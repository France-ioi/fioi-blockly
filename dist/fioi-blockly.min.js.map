{"version":3,"sources":["field_variable.js","scrollbar.js","variables.js","msg_fr.js","dicts.js","inputs.js","lists.js","logic.js","text.js","javascript.js","python.js","loops.js","python_procedures.js"],"names":["Blockly","FieldVariable","prototype","classValidator","text","workspace","this","sourceBlock_","Msg","RENAME_VARIABLE","oldVar","getText","hideChaff","cb","renameVariable","Variables","promptName","RENAME_VARIABLE_TITLE","replace","DELETE_VARIABLE","deleteVariable","Scrollbar","resizeViewHorizontal","hostMetrics","viewSize","viewWidth","flyoutWidth","pair_","scrollbarThickness","setScrollViewSize_","Math","max","xCoordinate","absoluteLeft","workspace_","RTL","yCoordinate","absoluteTop","viewHeight","setPosition","resizeContentHorizontal","setVisible","scrollViewSize_","contentWidth","ratio_","Infinity","isNaN","handleLength","setHandleLength_","handlePosition","viewLeft","contentLeft","setHandlePosition","constrainHandle_","flyoutOptions","any","anyButton","fixed","includedBlocks","get","set","incr","shortList","flyoutCategory","xmlList","options","scratchMode","fullVariableList","variableList","indexOf","newVarIdx","i","length","idx","splice","sort","goog","string","caseInsensitiveCompare","button","dom","createDom","setAttribute","NEW_VARIABLE","registerButtonCallback","createVariable","getTargetWorkspace","push","concat","blockNames","Blocks","block","field","createVariableDom_","appendChild","createTextDom_","createMathNumberDom_","value","shadowBlock","numberField","variableIndexOf","displayHelper","showPopupMessage","VARIABLE_ALREADY_EXISTS","toLowerCase","NEW_VARIABLE_TITLE","promptText","defaultText","callback","newVar","VARIABLES_DEFAULT_NAME","TEXT_APPEND_VARIABLE","DICTS_CREATE_EMPTY_TITLE","DICTS_CREATE_WITH_CONTAINER_TITLE_ADD","DICTS_CREATE_WITH_CONTAINER_TOOLTIP","DICTS_CREATE_WITH_INPUT_WITH","DICTS_CREATE_WITH_ITEM_KEY","DICTS_CREATE_WITH_ITEM_MAPPING","DICTS_CREATE_WITH_ITEM_TITLE","DICTS_CREATE_WITH_ITEM_TOOLTIP","DICTS_CREATE_WITH_TOOLTIP","DICT_GET","DICT_GET_TO","DICT_KEYS","LISTS_APPEND_MSG","LISTS_APPEND_TOOLTIP","TEXT_PRINT_TITLE","TEXT_PRINT_TOOLTIP","TEXT_PRINT_NOEND_TITLE","TEXT_PRINT_NOEND_TOOLTIP","INPUT_NUM","INPUT_NUM_TOOLTIP","INPUT_CHAR","INPUT_CHAR_TOOLTIP","INPUT_WORD","INPUT_WORD_TOOLTIP","INPUT_LINE","INPUT_LINE_TOOLTIP","dicts","HUE","init","setColour","appendValueInput","setCheck","appendField","setInputsInline","setOutput","newQuote_","FieldTextInput","open","file","FieldImage","appendDummyInput","appendStatementInput","setTooltip","contextMenu","setPreviousStatement","setNextStatement","itemCount_","updateShape_","setMutator","Mutator","mutationToDom","container","document","createElement","domToMutation","xmlElement","parseInt","getAttribute","getInput","removeInput","setAlign","ALIGN_RIGHT","decompose","containerBlock","Block","obtain","initSvg","connection","x","itemBlock","connect","previousConnection","nextConnection","compose","getInputTargetBlock","connections","valueConnection_","targetBlock","saveConnections","value_input","targetConnection","inputs","lists","jsonInit","message0","args0","type","name","variable","check","previousStatement","nextStatement","colour","thisBlock","getFieldValue","rtlOperators","ltrOperators","OPERATORS","setHelpUrl","LOGIC_COMPARE_HELPURL","logic","FieldDropdown","op","TOOLTIPS","EQ","LOGIC_COMPARE_TOOLTIP_EQ","NEQ","LOGIC_COMPARE_TOOLTIP_NEQ","LT","LOGIC_COMPARE_TOOLTIP_LT","LTE","LOGIC_COMPARE_TOOLTIP_LTE","GT","LOGIC_COMPARE_TOOLTIP_GT","GTE","LOGIC_COMPARE_TOOLTIP_GTE","prevBlocks_","onchange","e","blockA","blockB","outputConnection","checkType_","Events","setGroup","group","unplug","bumpNeighbours_","texts","tooltip","helpUrl","TEXT_PRINT_HELPURL","JavaScript","definitions_","Object","create","functionNames_","variableDB_","reset","Names","RESERVED_WORDS_","quote_","variable0","getName","NAME_TYPE","argument0","valueToCode","ORDER_ASSIGNMENT","argument1","increment","branch","statementToCode","addLoopTrap","id","code","isNumber","up","parseFloat","step","abs","startVar","match","getDistinctName","endVar","incVar","INDENT","varName","Python","PASS","dict","ORDER_MEMBER","ORDER_NONE","ORDER_ATOMIC","Array","n","key","join","getField","repeats","String","Number","loopVar","globals","arguments_","funcName","Procedures","STATEMENT_PREFIX","prefixLines","INFINITE_LOOP_TRAP","returnValue","args","ORDER_FUNCTION_CALL","condition","hasReturnValue_","msg"],"mappings":"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","file":"fioi-blockly.min.js","sourcesContent":["// Adapt to our custom Blockly.Variables.promptName behavior\nBlockly.FieldVariable.prototype.classValidator = function(text) {\n  var workspace = this.sourceBlock_.workspace;\n  if (text == Blockly.Msg.RENAME_VARIABLE) {\n    var oldVar = this.getText();\n    Blockly.hideChaff();\n    var cb = function(text) {\n      if (text) {\n        workspace.renameVariable(oldVar, text);\n      }\n    };\n    text = Blockly.Variables.promptName(\n        Blockly.Msg.RENAME_VARIABLE_TITLE.replace('%1', oldVar), oldVar, cb);\n    return null;\n  } else if (text == Blockly.Msg.DELETE_VARIABLE.replace('%1',\n      this.getText())) {\n    workspace.deleteVariable(this.getText());\n    return null;\n  }\n  return undefined;\n};\n","/**\n * Recalculate a horizontal scrollbar's location on the screen and path length.\n * This should be called when the layout or size of the window has changed.\n * @param {!Object} hostMetrics A data structure describing all the\n *     required dimensions, possibly fetched from the host object.\n */\nBlockly.Scrollbar.prototype.resizeViewHorizontal = function(hostMetrics) {\n  var viewSize = hostMetrics.viewWidth - hostMetrics.flyoutWidth - 1;\n  if (this.pair_) {\n    // Shorten the scrollbar to make room for the corner square.\n    viewSize -= Blockly.Scrollbar.scrollbarThickness;\n  }\n  this.setScrollViewSize_(Math.max(0, viewSize));\n\n  var xCoordinate = hostMetrics.absoluteLeft + hostMetrics.flyoutWidth + 0.5;\n  if (this.pair_ && this.workspace_.RTL) {\n    xCoordinate += Blockly.Scrollbar.scrollbarThickness;\n  }\n\n  // Horizontal toolbar should always be just above the bottom of the workspace.\n  var yCoordinate = hostMetrics.absoluteTop + hostMetrics.viewHeight -\n      Blockly.Scrollbar.scrollbarThickness - 0.5;\n  this.setPosition(xCoordinate, yCoordinate);\n\n  // If the view has been resized, a content resize will also be necessary.  The\n  // reverse is not true.\n  this.resizeContentHorizontal(hostMetrics);\n};\n\n/**\n * Recalculate a horizontal scrollbar's location within its path and length.\n * This should be called when the contents of the workspace have changed.\n * @param {!Object} hostMetrics A data structure describing all the\n *     required dimensions, possibly fetched from the host object.\n */\nBlockly.Scrollbar.prototype.resizeContentHorizontal = function(hostMetrics) {\n  if (!this.pair_) {\n    // Only show the scrollbar if needed.\n    // Ideally this would also apply to scrollbar pairs, but that's a bigger\n    // headache (due to interactions with the corner square).\n    this.setVisible(this.scrollViewSize_ < hostMetrics.contentWidth);\n  }\n\n  this.ratio_ = this.scrollViewSize_ / hostMetrics.contentWidth;\n  if (this.ratio_ == -Infinity || this.ratio_ == Infinity ||\n      isNaN(this.ratio_)) {\n    this.ratio_ = 0;\n  }\n\n  var handleLength = (hostMetrics.viewWidth - hostMetrics.flyoutWidth) * this.ratio_;\n  this.setHandleLength_(Math.max(0, handleLength));\n\n  var handlePosition = (hostMetrics.viewLeft - hostMetrics.contentLeft) *\n      this.ratio_;\n  this.setHandlePosition(this.constrainHandle_(handlePosition));\n};\n\n","// Options for the variables flyout\nBlockly.Variables.flyoutOptions = {\n  any: true, // Allow to create any variable\n  anyButton: true, // Add the button to add variables (needs any=true)\n  fixed: [], // List of fixed variables (will create blocks for each of them)\n  includedBlocks: {get: true, set: true, incr: true}, // Blocks to add to the list\n  shortList: true, // Generate set/incr blocks only for the first (non-fixed) variable\n  };\n\n// Construct the blocks required by the flyout for the variable category.\nBlockly.Variables.flyoutCategory = function(workspace) {\n  var xmlList = [];\n  var options = Blockly.Variables.flyoutOptions;\n\n  // Detect if we're in Blockly or Scratch\n  var scratchMode = !!(Blockly.registerButtonCallback);\n  if(options.any) {\n    if(workspace) {\n      var fullVariableList = workspace.variableList;\n    } else {\n      if(options.fixed.indexOf('newvar') > -1) {\n        var newVarIdx = 0;\n        while(options.fixed.indexOf('newvar'+newVarIdx) > -1) {\n          newVarIdx++;\n        }\n        var fullVariableList = ['newvar'+newVarIdx];\n      } else {\n        var fullVariableList = ['newvar'];\n      }\n    }\n    for(var i=0; i<options.fixed.length; i++) {\n      var idx = fullVariableList.indexOf(options.fixed[i]);\n      if(idx > -1) {\n        fullVariableList.splice(idx, 1);\n      }\n    }\n    fullVariableList.sort(goog.string.caseInsensitiveCompare);\n\n    if(options.anyButton) {\n      var button = goog.dom.createDom('button');\n      button.setAttribute('text', Blockly.Msg.NEW_VARIABLE);\n      if(scratchMode) {\n        // Scratch\n        button.setAttribute('callbackKey', 'CREATE_VARIABLE');\n        Blockly.registerButtonCallback('CREATE_VARIABLE', function(button) {\n          Blockly.Variables.createVariable(button.getTargetWorkspace());\n        });\n      }\n      xmlList.push(button);\n    }\n  } else {\n    var fullVariableList = [];\n  }\n\n  var variableList = options.fixed.concat(fullVariableList);\n\n  if (variableList.length > 0) {\n    if(scratchMode) {\n      var blockNames = {\n        get: 'data_variable',\n        set: 'data_setvariableto',\n        incr: 'data_changevariableby'\n        };\n    } else {\n      var blockNames = {\n        get: 'variables_get',\n        set: 'variables_set',\n        incr: 'math_change'\n        };\n    }\n\n    if (options.includedBlocks.get && Blockly.Blocks[blockNames.get]) {\n      for(var i=0; i<variableList.length; i++) {\n        // <block type=\"variables_get\" gap=\"8\">\n        //   <field name=\"VAR\">item</field>\n        // </block>\n        var block = goog.dom.createDom('block');\n        block.setAttribute('type', blockNames.get);\n        if (i < options.fixed.length) {\n          block.setAttribute('editable', 'false');\n        }\n        if (i == variableList.length - 1) {\n          block.setAttribute('gap', 24);\n        } else {\n          block.setAttribute('gap', 8);\n        }\n\n        if(scratchMode) {\n          var field = Blockly.Variables.createVariableDom_(variableList[i]);\n        } else {\n          var field = goog.dom.createDom('field', null, variableList[i]);\n          field.setAttribute('name', 'VAR');\n        }\n\n        block.appendChild(field);\n        xmlList.push(block);\n      }\n    }\n\n    if (options.includedBlocks.set && Blockly.Blocks[blockNames.set]) {\n      for(var i=0; i<variableList.length; i++) {\n        // <block type=\"variables_set\" gap=\"20\">\n        //   <field name=\"VAR\">item</field>\n        // </block>\n        if(options.shortList && i > options.fixed.length) {\n          break;\n        }\n\n        var block = goog.dom.createDom('block');\n        block.setAttribute('type', blockNames.set);\n        if (i < options.fixed.length) {\n          block.setAttribute('editable', 'false');\n        }\n        if (i == variableList.length - 1) {\n          block.setAttribute('gap', 24);\n        } else {\n          block.setAttribute('gap', 8);\n        }\n\n        if(scratchMode) {\n          var field = Blockly.Variables.createVariableDom_(variableList[i]);\n          block.appendChild(field);\n          block.appendChild(Blockly.Variables.createTextDom_());\n        } else {\n          var field = goog.dom.createDom('field', null, variableList[i]);\n          field.setAttribute('name', 'VAR');\n          block.appendChild(field);\n        }\n\n        xmlList.push(block);\n      }\n    }\n    if (options.includedBlocks.incr && Blockly.Blocks[blockNames.incr]) {\n      for(var i=0; i<variableList.length; i++) {\n        // <block type=\"math_change\">\n        //   <value name=\"DELTA\">\n        //     <shadow type=\"math_number\">\n        //       <field name=\"NUM\">1</field>\n        //     </shadow>\n        //   </value>\n        // </block>\n        if(options.shortList && i > options.fixed.length) {\n          break;\n        }\n\n        var block = goog.dom.createDom('block');\n        block.setAttribute('type', blockNames.incr);\n        if (i < options.fixed.length) {\n          block.setAttribute('editable', 'false');\n        }\n        if (i == variableList.length - 1) {\n          block.setAttribute('gap', 24);\n        } else {\n          block.setAttribute('gap', 8);\n        }\n        if(scratchMode) {\n          var field = Blockly.Variables.createVariableDom_(variableList[i]);\n          block.appendChild(field);\n          block.appendChild(Blockly.Variables.createMathNumberDom_())\n        } else {\n          var value = goog.dom.createDom('value');\n          value.setAttribute('name', 'DELTA');\n          block.appendChild(value);\n\n          var shadowBlock = goog.dom.createDom('shadow');\n          shadowBlock.setAttribute('type', 'math_number');\n          value.appendChild(shadowBlock);\n\n          var numberField = goog.dom.createDom('field', null, '1');\n          numberField.setAttribute('name', 'NUM');\n          shadowBlock.appendChild(numberField);\n\n          var field = goog.dom.createDom('field', null, variableList[i]);\n          field.setAttribute('name', 'VAR');\n          block.appendChild(field);\n        }\n\n        xmlList.push(block);\n      }\n    }\n\n  }\n  return xmlList;\n};\n\n// Adapt to our custom Blockly.Variables.promptName behavior\n// We also return null instead of the variable name as anyway no call seems to\n// read the return value\nBlockly.Variables.createVariable = function(workspace) {\n  var cb = function(text) {\n    if (text) {\n      if (workspace.variableIndexOf(text) != -1) {\n        displayHelper.showPopupMessage(Blockly.Msg.VARIABLE_ALREADY_EXISTS.replace('%1',\n            text.toLowerCase()), 'blanket');\n      } else {\n        workspace.createVariable(text);\n      }\n    }\n  }\n  Blockly.Variables.promptName(Blockly.Msg.NEW_VARIABLE_TITLE, '', cb);\n  return null;\n};\n\n/**\n * Prompt the user for a new variable name.\n * @param {string} promptText The string of the prompt.\n * @param {string} defaultText The default value to show in the prompt's field.\n * @return {?string} The new variable name, or null if the user picked\n *     something illegal.\n */\nBlockly.Variables.promptName = function(promptText, defaultText, callback) {\n  var cb = function (newVar) {\n    // Merge runs of whitespace.  Strip leading and trailing whitespace.\n    // Beyond this, all names are legal.\n    if (newVar) {\n      newVar = newVar.replace(/[\\s\\xa0]+/g, ' ').replace(/^ | $/g, '');\n      if (newVar == Blockly.Msg.RENAME_VARIABLE ||\n          newVar == Blockly.Msg.NEW_VARIABLE) {\n        // Ok, not ALL names are legal...\n        newVar = null;\n      }\n    };\n    callback(newVar);\n  };\n  displayHelper.showPopupMessage(promptText, 'input', null, cb);\n};\n","Blockly.Msg.VARIABLES_DEFAULT_NAME = \"element\";\nBlockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;\n\nBlockly.Msg.DICTS_CREATE_EMPTY_TITLE = \"dictionnaire vide\";\nBlockly.Msg.DICTS_CREATE_WITH_CONTAINER_TITLE_ADD = \"Créer un dictionnaire\";\nBlockly.Msg.DICTS_CREATE_WITH_CONTAINER_TOOLTIP = \"\";\nBlockly.Msg.DICTS_CREATE_WITH_INPUT_WITH = \"créer un dictionnaire :\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_KEY = \"cle\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_MAPPING = \":\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_TITLE = \"clé/valeur\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_TOOLTIP = \"\";\nBlockly.Msg.DICTS_CREATE_WITH_TOOLTIP = \"\";\nBlockly.Msg.DICT_GET = \"récupérer la clé\";\nBlockly.Msg.DICT_GET_TO = \"de\";\nBlockly.Msg.DICT_KEYS = \"liste des clés de\";\nBlockly.Msg.LISTS_APPEND_MSG = \"à la liste %1 ajouter l'élément %2\";\nBlockly.Msg.LISTS_APPEND_TOOLTIP = \"Ajouter un élément à la liste '%1'\";\nBlockly.Msg.TEXT_PRINT_TITLE = \"afficher la ligne %1\";\nBlockly.Msg.TEXT_PRINT_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, avec retour à la ligne après.\";\nBlockly.Msg.TEXT_PRINT_NOEND_TITLE = \"afficher %1\";\nBlockly.Msg.TEXT_PRINT_NOEND_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, sans retour à la ligne.\";\n\nBlockly.Msg.INPUT_NUM = \"lire un nombre\";\nBlockly.Msg.INPUT_NUM_TOOLTIP = \"Lit un nombre sur l'entrée du programme.\";\nBlockly.Msg.INPUT_CHAR = \"lire un caractère\";\nBlockly.Msg.INPUT_CHAR_TOOLTIP = \"Lit un caractère sur l'entrée du programme.\";\nBlockly.Msg.INPUT_WORD = \"lire un mot\";\nBlockly.Msg.INPUT_WORD_TOOLTIP = \"Lit un mot sur l'entrée du programme.\";\nBlockly.Msg.INPUT_LINE = \"lire une ligne\";\nBlockly.Msg.INPUT_LINE_TOOLTIP = \"Lit une ligne sur l'entrée du programme.\";\n","Blockly.Python['dict_get'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dict_get_literal'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.quote_(block.getFieldValue('ITEM'));\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dicts_create_with'] = function(block) {\n    var value_keys = Blockly.Python.valueToCode(block, 'keys', Blockly.   Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = new Array(block.itemCount_);\n  \n    for (var n = 0; n < block.itemCount_; n++) {\n        var key = Blockly.Python.quote_(block.getFieldValue('KEY' + n));\n        var value = Blockly.Python.valueToCode(block, 'VALUE' + n,\n                Blockly.Python.ORDER_NONE) || '___';\n        code[n] = key +\": \"+ value;\n    }\n    code = '{' + code.join(', ') + '}';\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['dict_keys'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var code = dict + '.keys()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n","Blockly.Python['input_num'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'int(input_word())';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_char'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.read(1)';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_word'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'input_word()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_line'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.readline()[:-1]';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n","Blockly.Python['lists_append'] = function(block) {\n  // Append\n  var varName = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.Variables.NAME_TYPE);\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  return varName + '.append(' + value + ')\\n';\n};\n","Blockly.Blocks['logic_compare'] = {\n  /**\n   * Block for comparison operator.\n   * @this Blockly.Block\n   */\n  init: function() {\n    var rtlOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['>', 'LT'],\n      ['>=', 'LTE'],\n      ['<', 'GT'],\n      ['<=', 'GTE']\n    ];\n    var ltrOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['<', 'LT'],\n      ['<=', 'LTE'],\n      ['>', 'GT'],\n      ['>=', 'GTE']\n    ];\n    var OPERATORS = this.RTL ? rtlOperators : ltrOperators;\n    this.setHelpUrl(Blockly.Msg.LOGIC_COMPARE_HELPURL);\n    this.setColour(Blockly.Blocks.logic.HUE);\n    this.setOutput(true, 'Boolean');\n    this.appendValueInput('A');\n    this.appendValueInput('B')\n        .appendField(new Blockly.FieldDropdown(OPERATORS), 'OP');\n    this.setInputsInline(true);\n    // Assign 'this' to a variable for use in the tooltip closure below.\n    var thisBlock = this;\n    this.setTooltip(function() {\n      var op = thisBlock.getFieldValue('OP');\n      var TOOLTIPS = {\n        'EQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ,\n        'NEQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ,\n        'LT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT,\n        'LTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE,\n        'GT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT,\n        'GTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE\n      };\n      return TOOLTIPS[op];\n    });\n    this.prevBlocks_ = [null, null];\n  },\n  /**\n   * Called whenever anything on the workspace changes.\n   * Prevent mismatched types from being compared.\n   * @param {!Blockly.Events.Abstract} e Change event.\n   * @this Blockly.Block\n   */\n  onchange: function(e) {\n    var blockA = this.getInputTargetBlock('A');\n    var blockB = this.getInputTargetBlock('B');\n    // Disconnect blocks that existed prior to this change if they don't match.\n    if (blockA && blockB &&\n        !blockA.outputConnection.checkType_(blockB.outputConnection)) {\n      // Mismatch between two inputs.  Disconnect previous and bump it away.\n      // Ensure that any disconnections are grouped with the causing event.\n      Blockly.Events.setGroup(e.group);\n      for (var i = 0; i < this.prevBlocks_.length; i++) {\n        var block = this.prevBlocks_[i];\n        if (block === blockA || block === blockB) {\n          block.unplug();\n          block.bumpNeighbours_();\n        }\n      }\n      Blockly.Events.setGroup(false);\n    }\n    this.prevBlocks_[0] = blockA;\n    this.prevBlocks_[1] = blockB;\n  }\n};\n\n","Blockly.Python['text_print_noend'] = function(block) {\n  // Print statement.\n  var msg = Blockly.Python.valueToCode(block, 'TEXT',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  return 'print(' + msg + ', end=\"\")\\n';\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.JavaScript.init = function(workspace) {\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.JavaScript.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.JavaScript.functionNames_ = Object.create(null);\n\n  if (!Blockly.JavaScript.variableDB_) {\n    Blockly.JavaScript.variableDB_ =\n        new Blockly.Names(Blockly.JavaScript.RESERVED_WORDS_);\n  } else {\n    Blockly.JavaScript.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped JavaScript string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @private\n */\nBlockly.JavaScript.quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n\n\nBlockly.JavaScript['controls_for'] = function(block) {\n  // For loop.\n  var variable0 = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'TO',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var increment = Blockly.JavaScript.valueToCode(block, 'BY',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\n  var code;\n  if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\n      Blockly.isNumber(increment)) {\n    // All arguments are simple numbers.\n    var up = parseFloat(argument0) <= parseFloat(argument1);\n    code = 'for (var ' + variable0 + ' = ' + argument0 + '; ' +\n        variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\n        variable0;\n    var step = Math.abs(parseFloat(increment));\n    if (step == 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    var startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\n      startVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_start', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    var endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\n      var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_end', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    var incVar = Blockly.JavaScript.variableDB_.getDistinctName(\n        variable0 + '_inc', Blockly.Variables.NAME_TYPE);\n    code += 'var ' + incVar + ' = ';\n    if (Blockly.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += Blockly.JavaScript.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' +\n        incVar + ' >= 0 ? ' +\n        variable0 + ' <= ' + endVar + ' : ' +\n        variable0 + ' >= ' + endVar + '; ' +\n        variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nBlockly.JavaScript['variables_set'] = function(block) {\n  // Variable setter.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  return 'var ' + varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.Python.init = function(workspace) {\n  /**\n   * Empty loops or conditionals are not allowed in Python.\n   */\n  Blockly.Python.PASS = this.INDENT + 'pass\\n';\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.Python.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.Python.functionNames_ = Object.create(null);\n\n  if (!Blockly.Python.variableDB_) {\n    Blockly.Python.variableDB_ =\n        new Blockly.Names(Blockly.Python.RESERVED_WORDS_);\n  } else {\n    Blockly.Python.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped Python string, complete with quotes.\n * @param {string} string Text to encode.\n * @return {string} Python string.\n * @private\n */\nBlockly.Python.quote_ = function(string) {\n  // Can't use goog.string.quote since % must also be escaped.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\\%/g, '\\\\%')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n","Blockly.Python['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  if (block.getField('TIMES')) {\n    // Internal number.\n    var repeats = String(parseInt(block.getFieldValue('TIMES'), 10));\n  } else {\n    // External number.\n    var repeats = Blockly.Python.valueToCode(block, 'TIMES',\n        Blockly.Python.ORDER_NONE) || '0';\n  }\n  if (Blockly.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'int(' + repeats + ')';\n  }\n  var branch = Blockly.Python.statementToCode(block, 'DO');\n  branch = Blockly.Python.addLoopTrap(branch, block.id) ||\n      Blockly.Python.PASS;\n  var loopVar = Blockly.Python.variableDB_.getDistinctName(\n      'loop', Blockly.Variables.NAME_TYPE);\n  var code = 'for ' + loopVar + ' in range(' + repeats + '):\\n' + branch;\n  return code;\n};\n\nBlockly.Python['controls_repeat'] = Blockly.Python['controls_repeat_ext'];\n","Blockly.Python['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  // First, add a 'global' statement for every variable that is assigned.\n  // acbart: Actually, skip that, globals are bad news!\n  var globals = []; //Blockly.Variables.allVariables(block);\n  for (var i = globals.length - 1; i >= 0; i--) {\n    var varName = globals[i];\n    if (block.arguments_.indexOf(varName) == -1) {\n      globals[i] = Blockly.Python.variableDB_.getName(varName,\n          Blockly.Variables.NAME_TYPE);\n    } else {\n      // This variable is actually a parameter name.  Do not include it in\n      // the list of globals, thus allowing it be of local scope.\n      globals.splice(i, 1);\n    }\n  }\n  globals = globals.length ? '  global ' + globals.join(', ') + '\\n' : '';\n  // Get the function's name\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  // Get the stack of code\n  var branch = Blockly.Python.statementToCode(block, 'STACK');\n  // Handle prefixing\n  if (Blockly.Python.STATEMENT_PREFIX) {\n    branch = Blockly.Python.prefixLines(\n        Blockly.Python.STATEMENT_PREFIX.replace(/%1/g,\n        '\\'' + block.id + '\\''), Blockly.Python.INDENT) + branch;\n  }\n  // Handle infinite loop trapping\n  if (Blockly.Python.INFINITE_LOOP_TRAP) {\n    branch = Blockly.Python.INFINITE_LOOP_TRAP.replace(/%1/g,\n        '\"' + block.id + '\"') + branch;\n  }\n  // Handle return value\n  var returnValue = Blockly.Python.valueToCode(block, 'RETURN',\n      Blockly.Python.ORDER_NONE) || '';\n  if (returnValue) {\n    returnValue = '  return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = Blockly.Python.PASS;\n  }\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.variableDB_.getName(block.arguments_[x],\n        Blockly.Variables.NAME_TYPE);\n  }\n  var code = 'def ' + funcName + '(' + args.join(', ') + '):\\n' +\n      globals + branch + returnValue;\n  //acbart: I'm not sure why this is used here. It was fine before when\n  //        functions didn't have anything after them, but now it's deadly.\n  //code = Blockly.Python.scrub_(block, code);\n  //Blockly.Python.definitions_[funcName] = code;\n  return code;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nBlockly.Python['procedures_defnoreturn'] =\n    Blockly.Python['procedures_defreturn'];\n\nBlockly.Python['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.valueToCode(block, 'ARG' + x,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = funcName + '(' + args.join(', ') + ')';\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.valueToCode(block, 'ARG' + x,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = funcName + '(' + args.join(', ') + ')\\n';\n  return code;\n};\n\nBlockly.Python['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  var condition = Blockly.Python.valueToCode(block, 'CONDITION',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = 'if ' + condition + ':\\n';\n  if (block.hasReturnValue_) {\n    var value = Blockly.Python.valueToCode(block, 'VALUE',\n        Blockly.Python.ORDER_NONE) || '___';\n    code += '  return ' + value + '\\n';\n  } else {\n    code += '  return\\n';\n  }\n  return code;\n};\n\nBlockly.Python['procedures_return'] = function(block) {\n  // return value from a procedure.\n  var code = \"return\";\n  if (block.hasReturnValue_) {\n    var value = Blockly.Python.valueToCode(block, 'VALUE',\n        Blockly.Python.ORDER_NONE) || '___';\n    code += ' ' + value + '\\n';\n  } else {\n    code += '\\n';\n  }\n  return code;\n};\n"]}