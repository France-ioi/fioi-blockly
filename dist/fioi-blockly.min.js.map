{"version":3,"sources":["base.js","dropdowndiv.js","field_variable.js","procedures.js","scrollbar.js","touch.js","utils.js","variables.js","workspace_svg.js","fr.js","msg_fill.js","dicts.js","inputs.js","lists.js","logic.js","text.js","javascript.js","python.js","loops.js","math.js","python_procedures.js"],"names":["FioiBlockly","Msg","OriginalBlocks","defaultLang","loadLanguage","lang","console","error","msgName","Blockly","reimportOriginalBlocks","blockNames","blockName","indexOf","Blocks","goog","provide","require","DropDownDiv","DIV_","boundsElement_","owner_","ARROW_SIZE","BORDER_SIZE","ARROW_HORIZONTAL_PADDING","PADDING_Y","ANIMATION_TIME","animateOutTimer_","onHide_","isInAnimation","isInAnimationTimer","createDom","dom","document","body","appendChild","content_","arrow_","style","transition","window","addEventListener","hideIfNotShowing","setBoundsElement","boundsElement","getContentDiv","clearContent","innerHTML","setColour","backgroundColour","borderColour","backgroundColor","borderColor","setCategory","category","setAttribute","showPositionedByBlock","owner","block","opt_onHide","opt_secondaryYOffset","scale","workspace","bBox","width","height","blockSvg","getSvgRoot","i","children","length","classList","position","getBoundingClientRect","primaryX","left","primaryY","top","secondaryX","secondaryY","getParentSvg","parentNode","show","this","clearTimeout","setTimeout","div","metrics","getPositionMetrics","transform","arrowX","arrowY","arrowAtTop","initialX","initialY","display","opacity","dx","finalX","dy","finalY","renderX","renderY","renderedSecondary","boundPosition","boundSize","getSize","divSize","Math","max","min","centerX","isVisible","hideIfOwner","hide","hideWithoutAnimation","FieldVariable","prototype","classValidator","text","sourceBlock_","RENAME_VARIABLE","oldVar","getText","hideChaff","cb","renameVariable","Variables","promptName","RENAME_VARIABLE_TITLE","replace","DELETE_VARIABLE","deleteVariable","Procedures","flyoutOptions","includedBlocks","noret","ret","ifret","flyoutCategory","populateProcedures","procedureList","templateName","name","args","mutation","j","arg","xmlList","push","incl","nameField","PROCEDURES_DEFNORETURN_PROCEDURE","tuple","allProcedures","Scrollbar","resizeViewHorizontal","hostMetrics","viewSize","viewWidth","flyoutWidth","pair_","scrollbarThickness","setScrollViewSize_","xCoordinate","absoluteLeft","workspace_","RTL","yCoordinate","absoluteTop","viewHeight","setPosition","resizeContentHorizontal","setVisible","scrollViewSize_","contentWidth","ratio_","Infinity","isNaN","handleLength","setHandleLength_","handlePosition","viewLeft","contentLeft","setHandlePosition","constrainHandle_","onMouseUp_","e","getMainWorkspace","dragMode_","DRAG_NONE","Touch","clearTouchIdentifier","Css","setCursor","Cursor","OPEN","onTouchUpWrapper_","unbindEvent_","onMouseMoveWrapper_","genUid","soup_","any","anyButton","fixed","get","set","incr","shortList","options","scratchMode","fullVariableList","variableList","newVarIdx","idx","splice","sort","string","caseInsensitiveCompare","button","NEW_VARIABLE","registerButtonCallback","createVariable","getTargetWorkspace","concat","field","createVariableDom_","createTextDom_","createMathNumberDom_","value","shadowBlock","numberField","variableIndexOf","displayHelper","showPopupMessage","VARIABLE_ALREADY_EXISTS","toLowerCase","NEW_VARIABLE_TITLE","promptText","defaultText","callback","newVar","UNDO","WorkspaceSvg","reportValue","id","getBlockById","contentDiv","valueReportBox","createElement","translate","x","y","translation","svgBlockCanvas_","svgBubbleCanvas_","fr","VARIABLES_DEFAULT_NAME","TEXT_APPEND_VARIABLE","DICTS_CREATE_EMPTY_TITLE","DICTS_CREATE_WITH_CONTAINER_TITLE_ADD","DICTS_CREATE_WITH_CONTAINER_TOOLTIP","DICTS_CREATE_WITH_INPUT_WITH","DICTS_CREATE_WITH_ITEM_KEY","DICTS_CREATE_WITH_ITEM_MAPPING","DICTS_CREATE_WITH_ITEM_TITLE","DICTS_CREATE_WITH_ITEM_TOOLTIP","DICTS_CREATE_WITH_TOOLTIP","DICT_GET","DICT_GET_TO","DICT_KEYS","TEXT_PRINT_TITLE","TEXT_PRINT_TOOLTIP","TEXT_PRINT_NOEND_TITLE","TEXT_PRINT_NOEND_TOOLTIP","LISTS_APPEND_MSG","LISTS_APPEND_TOOLTIP","LISTS_GET_INDEX_FIRST","LISTS_GET_INDEX_FROM_END","LISTS_GET_INDEX_FROM_START","LISTS_GET_INDEX_GET","LISTS_GET_INDEX_GET_REMOVE","LISTS_GET_INDEX_LAST","LISTS_GET_INDEX_RANDOM","LISTS_GET_INDEX_REMOVE","LISTS_SET_INDEX_INSERT","INPUT_NUM","INPUT_NUM_TOOLTIP","INPUT_CHAR","INPUT_CHAR_TOOLTIP","INPUT_WORD","INPUT_WORD_TOOLTIP","INPUT_LINE","INPUT_LINE_TOOLTIP","CANNOT_DELETE_VARIABLE_PROCEDURE","DATA_REPLACEITEMOFLIST_TITLE","DATA_ITEMOFLIST_TITLE","DATA_LISTREPEAT_TITLE","fillLanguage","dicts","HUE","init","appendValueInput","setCheck","appendField","setInputsInline","setOutput","newQuote_","FieldTextInput","open","file","FieldImage","appendDummyInput","appendStatementInput","setTooltip","contextMenu","setPreviousStatement","setNextStatement","itemCount_","updateShape_","setMutator","Mutator","mutationToDom","container","domToMutation","xmlElement","parseInt","getAttribute","getInput","removeInput","setAlign","ALIGN_RIGHT","decompose","containerBlock","Block","obtain","initSvg","connection","itemBlock","connect","previousConnection","nextConnection","compose","getInputTargetBlock","connections","valueConnection_","targetBlock","saveConnections","value_input","targetConnection","inputs","lists","jsonInit","message0","args0","type","variable","check","previousStatement","nextStatement","colour","thisBlock","getFieldValue","MODE","LISTS_SET_INDEX_SET","WHERE_OPTIONS","setHelpUrl","LISTS_SET_INDEX_HELPURL","LISTS_SET_INDEX_INPUT_IN_LIST","FieldDropdown","LISTS_SET_INDEX_TOOLTIP","updateAt_","mode","where","tooltip","LISTS_SET_INDEX_TOOLTIP_SET_FROM","LISTS_SET_INDEX_TOOLTIP_SET_FIRST","LISTS_SET_INDEX_TOOLTIP_SET_LAST","LISTS_SET_INDEX_TOOLTIP_SET_RANDOM","LISTS_SET_INDEX_TOOLTIP_INSERT_FROM","LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST","LISTS_SET_INDEX_TOOLTIP_INSERT_LAST","LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM","LISTS_INDEX_FROM_START_TOOLTIP","oneBasedIndex","isAt","INPUT_VALUE","ORDINAL_NUMBER_SUFFIX","menu","newAt","setFieldValue","moveInputBefore","rtlOperators","ltrOperators","OPERATORS","LOGIC_COMPARE_HELPURL","logic","op","TOOLTIPS","EQ","LOGIC_COMPARE_TOOLTIP_EQ","NEQ","LOGIC_COMPARE_TOOLTIP_NEQ","LT","LOGIC_COMPARE_TOOLTIP_LT","LTE","LOGIC_COMPARE_TOOLTIP_LTE","GT","LOGIC_COMPARE_TOOLTIP_GT","GTE","LOGIC_COMPARE_TOOLTIP_GTE","prevBlocks_","onchange","blockA","blockB","outputConnection","checkType_","Events","setGroup","group","unplug","bumpNeighbours_","rename","setSpellcheck","PROCEDURES_DEFNORETURN_TITLE","comments","parentWorkspace","PROCEDURES_DEFNORETURN_COMMENT","setCommentText","procedures","PROCEDURES_DEFNORETURN_TOOLTIP","PROCEDURES_DEFNORETURN_HELPURL","arguments_","setStatements_","statementConnection_","PROCEDURES_DEFRETURN_TITLE","PROCEDURES_DEFRETURN_RETURN","PROCEDURES_DEFRETURN_COMMENT","PROCEDURES_DEFRETURN_TOOLTIP","PROCEDURES_DEFRETURN_HELPURL","texts","helpUrl","TEXT_PRINT_HELPURL","JavaScript","definitions_","Object","create","functionNames_","variableDB_","reset","Names","RESERVED_WORDS_","quote_","variable0","getName","NAME_TYPE","argument0","valueToCode","ORDER_ASSIGNMENT","argument1","increment","branch","statementToCode","addLoopTrap","code","isNumber","up","parseFloat","step","abs","startVar","match","getDistinctName","endVar","incVar","INDENT","varName","Python","PASS","dict","ORDER_MEMBER","ORDER_NONE","ORDER_ATOMIC","Array","n","key","join","getField","repeats","String","Number","loopVar","ORDER_ADDITION","incrCode","reportCode","assignCode","globals","funcName","STATEMENT_PREFIX","prefixLines","INFINITE_LOOP_TRAP","returnValue","ORDER_FUNCTION_CALL","condition","hasReturnValue_","msg"],"mappings":"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","file":"fioi-blockly.min.js","sourcesContent":["FioiBlockly = {};\nFioiBlockly.Msg = {};\nFioiBlockly.OriginalBlocks = {};\n\nFioiBlockly.defaultLang = 'fr';\n\n// Import messages for a language\nFioiBlockly.loadLanguage = function(lang) {\n  if(!FioiBlockly.Msg[lang]) {\n    console.error(\"Language '+lang+' doesn't exist in fioi-blockly!\");\n    return;\n  }\n\n  for(var msgName in FioiBlockly.Msg[lang]) {\n    Blockly.Msg[msgName] = FioiBlockly.Msg[lang][msgName];\n  }\n};\n\n// Get back original Blockly blocks\nFioiBlockly.reimportOriginalBlocks = function(blockNames) {\n  for(var blockName in FioiBlockly.OriginalBlocks) {\n    if(!blockNames || blockNames.indexOf(blockName) != -1) {\n      Blockly.Blocks[blockName] = FioiBlockly.OriginalBlocks[blockName];\n    }\n  }\n};\n","/**\n * @license\n * Visual Blocks Editor\n *\n * Copyright 2016 Massachusetts Institute of Technology\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview A div that floats on top of the workspace, for drop-down menus.\n * The drop-down can be kept inside the workspace, animate in/out, etc.\n * @author tmickel@mit.edu (Tim Mickel)\n */\n\n'use strict';\n\ngoog.provide('Blockly.DropDownDiv');\n\ngoog.require('goog.dom');\ngoog.require('goog.style');\n\n/**\n * Class for drop-down div.\n * @constructor\n */\nBlockly.DropDownDiv = function() {\n};\n\n/**\n * The div element. Set once by Blockly.DropDownDiv.createDom.\n * @type {Element}\n * @private\n */\nBlockly.DropDownDiv.DIV_ = null;\n\n/**\n * Drop-downs will appear within the bounds of this element if possible.\n * Set in Blockly.DropDownDiv.setBoundsElement.\n * @type {Element}\n * @private\n */\nBlockly.DropDownDiv.boundsElement_ = null;\n\n/**\n * The object currently using the drop-down.\n * @type {Object}\n * @private\n */\nBlockly.DropDownDiv.owner_ = null;\n\n/**\n * Arrow size in px. Should match the value in CSS (need to position pre-render).\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.ARROW_SIZE = 16;\n\n/**\n * Drop-down border size in px. Should match the value in CSS (need to position the arrow).\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.BORDER_SIZE = 1;\n\n/**\n * Amount the arrow must be kept away from the edges of the main drop-down div, in px.\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.ARROW_HORIZONTAL_PADDING = 12;\n\n/**\n * Amount drop-downs should be padded away from the source, in px.\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.PADDING_Y = 20;\n\n/**\n * Length of animations in seconds.\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.ANIMATION_TIME = 0.25;\n\n/**\n * Timer for animation out, to be cleared if we need to immediately hide\n * without disrupting new shows.\n * @type {number}\n */\nBlockly.DropDownDiv.animateOutTimer_ = null;\n\n/**\n * Callback for when the drop-down is hidden.\n * @type {Function}\n */\nBlockly.DropDownDiv.onHide_ = 0;\n\n// Don't hide a DropDownDiv we're showing\nBlockly.DropDownDiv.isInAnimation = false;\nBlockly.DropDownDiv.isInAnimationTimer = null;\n\n/**\n * Create and insert the DOM element for this div.\n * @param {Element} container Element that the div should be contained in.\n */\nBlockly.DropDownDiv.createDom = function() {\n  if (Blockly.DropDownDiv.DIV_) {\n    return;  // Already created.\n  }\n  Blockly.DropDownDiv.DIV_ = goog.dom.createDom('div', 'blocklyDropDownDiv');\n  document.body.appendChild(Blockly.DropDownDiv.DIV_);\n  Blockly.DropDownDiv.content_ = goog.dom.createDom('div', 'blocklyDropDownContent');\n  Blockly.DropDownDiv.DIV_.appendChild(Blockly.DropDownDiv.content_);\n  Blockly.DropDownDiv.arrow_ = goog.dom.createDom('div', 'blocklyDropDownArrow');\n  Blockly.DropDownDiv.DIV_.appendChild(Blockly.DropDownDiv.arrow_);\n\n  // Transition animation for transform: translate() and opacity.\n  Blockly.DropDownDiv.DIV_.style.transition = 'transform ' +\n    Blockly.DropDownDiv.ANIMATION_TIME + 's, ' +\n    'opacity ' + Blockly.DropDownDiv.ANIMATION_TIME + 's';\n  window.addEventListener('mousedown', Blockly.DropDownDiv.hideIfNotShowing, true);\n};\n\n/**\n * Set an element to maintain bounds within. Drop-downs will appear\n * within the box of this element if possible.\n * @param {Element} boundsElement Element to bound drop-down to.\n */\nBlockly.DropDownDiv.setBoundsElement = function(boundsElement) {\n  Blockly.DropDownDiv.boundsElement_ = boundsElement;\n};\n\n/**\n * Provide the div for inserting content into the drop-down.\n * @return {Element} Div to populate with content\n */\nBlockly.DropDownDiv.getContentDiv = function() {\n  return Blockly.DropDownDiv.content_;\n};\n\n/**\n * Clear the content of the drop-down.\n */\nBlockly.DropDownDiv.clearContent = function() {\n  Blockly.DropDownDiv.content_.innerHTML = '';\n};\n\n/**\n * Set the colour for the drop-down.\n * @param {string} backgroundColour Any CSS color for the background\n * @param {string} borderColour Any CSS color for the border\n */\nBlockly.DropDownDiv.setColour = function(backgroundColour, borderColour) {\n  Blockly.DropDownDiv.DIV_.style.backgroundColor = backgroundColour;\n  Blockly.DropDownDiv.DIV_.style.borderColor = borderColour;\n};\n\n/**\n * Set the category for the drop-down.\n * @param {string} category The new category for the drop-down.\n */\nBlockly.DropDownDiv.setCategory = function(category) {\n  Blockly.DropDownDiv.DIV_.setAttribute('data-category', category);\n};\n\n// Modified: find blocklyPath\nBlockly.DropDownDiv.showPositionedByBlock = function(owner, block,\n      opt_onHide, opt_secondaryYOffset) {\n  var scale = block.workspace.scale;\n  var bBox = {width: block.width, height: block.height};\n  bBox.width *= scale;\n  bBox.height *= scale;\n  var blockSvg = block.getSvgRoot();\n  for(var i=0; i<blockSvg.children.length; i++) {\n     if(blockSvg.children[i].classList[0] == 'blocklyPath') {\n        blockSvg = blockSvg.children[i];\n        break;\n     }\n  }\n  var position = blockSvg.getBoundingClientRect();\n  // If we can fit it, render below the block.\n  var primaryX = position.left + position.width / 2;\n  var primaryY = position.top + position.height;\n  // If we can't fit it, render above the entire parent block.\n  var secondaryX = primaryX;\n  var secondaryY = position.top;\n  if (opt_secondaryYOffset) {\n    secondaryY += opt_secondaryYOffset;\n  }\n  // Set bounds to workspace; show the drop-down.\n  Blockly.DropDownDiv.setBoundsElement(block.workspace.getParentSvg().parentNode);\n  return Blockly.DropDownDiv.show(this, primaryX, primaryY, secondaryX, secondaryY, opt_onHide);\n};\n\n/**\n * Show and place the drop-down.\n * The drop-down is placed with an absolute \"origin point\" (x, y) - i.e.,\n * the arrow will point at this origin and box will positioned below or above it.\n * If we can maintain the container bounds at the primary point, the arrow will\n * point there, and the container will be positioned below it.\n * If we can't maintain the container bounds at the primary point, fall-back to the\n * secondary point and position above.\n * @param {Object} owner The object showing the drop-down\n * @param {number} primaryX Desired origin point x, in absolute px\n * @param {number} primaryY Desired origin point y, in absolute px\n * @param {number} secondaryX Secondary/alternative origin point x, in absolute px\n * @param {number} secondaryY Secondary/alternative origin point y, in absolute px\n * @param {Function=} opt_onHide Optional callback for when the drop-down is hidden\n * @return {boolean} True if the menu rendered at the primary origin point.\n */\nBlockly.DropDownDiv.show = function(owner, primaryX, primaryY, secondaryX, secondaryY, opt_onHide) {\n  // Do not hide the div while we're showing it\n  Blockly.DropDownDiv.isInAnimation = true;\n  if(Blockly.DropDownDiv.animateOutTimer_) {\n    window.clearTimeout(Blockly.DropDownDiv.animateOutTimer_);\n    Blockly.DropDownDiv.animateOutTimer_ = null;\n  }\n  if(Blockly.DropDownDiv.isInAnimationTimer) {\n    window.clearTimeout(Blockly.DropDownDiv.isInAnimationTimer);\n    Blockly.DropDownDiv.isInAnimationTimer = null;\n  }\n  Blockly.DropDownDiv.isInAnimationTimer = window.setTimeout(function () { Blockly.DropDownDiv.isInAnimation = false; }, Blockly.DropDownDiv.ANIMATION_TIME*1000);\n\n  Blockly.DropDownDiv.owner_ = owner;\n  Blockly.DropDownDiv.onHide_ = opt_onHide;\n  var div = Blockly.DropDownDiv.DIV_;\n  var metrics = Blockly.DropDownDiv.getPositionMetrics(primaryX, primaryY, secondaryX, secondaryY);\n  // Update arrow CSS\n  Blockly.DropDownDiv.arrow_.style.transform = 'translate(' +\n    metrics.arrowX + 'px,' + metrics.arrowY + 'px) rotate(45deg)';\n  Blockly.DropDownDiv.arrow_.setAttribute('class',\n    metrics.arrowAtTop ? 'blocklyDropDownArrow arrowTop' : 'blocklyDropDownArrow arrowBottom');\n\n  // When we change `translate` multiple times in close succession,\n  // Chrome may choose to wait and apply them all at once.\n  // Since we want the translation to initial X, Y to be immediate,\n  // and the translation to final X, Y to be animated,\n  // we saw problems where both would be applied after animation was turned on,\n  // making the dropdown appear to fly in from (0, 0).\n  // Using both `left`, `top` for the initial translation and then `translate`\n  // for the animated transition to final X, Y is a workaround.\n\n  // First apply initial translation.\n  div.style.left = metrics.initialX + 'px';\n  div.style.top = metrics.initialY + 'px';\n  // Show the div.\n  div.style.display = 'block';\n  div.style.opacity = 1;\n  // Add final translate, animated through `transition`.\n  // Coordinates are relative to (initialX, initialY),\n  // where the drop-down is absolutely positioned.\n  var dx = (metrics.finalX - metrics.initialX);\n  var dy = (metrics.finalY - metrics.initialY);\n  div.style.transform = 'translate(' + dx + 'px,' + dy + 'px)';\n  return metrics.arrowAtTop;\n};\n\n/**\n * Helper to position the drop-down and the arrow, maintaining bounds.\n * See explanation of origin points in Blockly.DropDownDiv.show.\n * @param {number} primaryX Desired origin point x, in absolute px\n * @param {number} primaryY Desired origin point y, in absolute px\n * @param {number} secondaryX Secondary/alternative origin point x, in absolute px\n * @param {number} secondaryY Secondary/alternative origin point y, in absolute px\n * @returns {Object} Various final metrics, including rendered positions for drop-down and arrow.\n */\nBlockly.DropDownDiv.getPositionMetrics = function(primaryX, primaryY, secondaryX, secondaryY) {\n  var div = Blockly.DropDownDiv.DIV_;\n  var boundPosition = Blockly.DropDownDiv.boundsElement_.getBoundingClientRect();\n\n  var boundSize = goog.style.getSize(Blockly.DropDownDiv.boundsElement_);\n  var divSize = goog.style.getSize(div);\n\n  // First decide if we will render at primary or secondary position\n  // i.e., above or below\n  // renderX, renderY will eventually be the final rendered position of the box.\n  var renderX, renderY, renderedSecondary;\n  // Can the div fit inside the bounds if we render below the primary point?\n  if (secondaryY - divSize.height < boundPosition.top) {\n    // We can't fit below in terms of y. Can we fit above?\n    if (primaryY + divSize.height > boundPosition.top + boundSize.height) {\n      // We also can't fit above, so just render below anyway.\n      renderX = secondaryX;\n      renderY = secondaryY - divSize.height - Blockly.DropDownDiv.PADDING_Y;\n      renderedSecondary = true;\n    } else {\n      // We can fit above, render secondary\n      renderX = primaryX;\n      renderY = primaryY + Blockly.DropDownDiv.PADDING_Y;\n      renderedSecondary = false;\n    }\n  } else {\n    // We can fit below, render primary\n    renderX = secondaryX;\n    renderY = secondaryY - divSize.height - Blockly.DropDownDiv.PADDING_Y;\n    renderedSecondary = true;\n  }\n  // First calculate the absolute arrow X\n  // This needs to be done before positioning the div, since the arrow\n  // wants to be as close to the origin point as possible.\n  var arrowX = renderX - Blockly.DropDownDiv.ARROW_SIZE / 2;\n  // Keep in overall bounds\n  arrowX = Math.max(boundPosition.left, Math.min(arrowX, boundPosition.left + boundSize.width));\n\n  // Adjust the x-position of the drop-down so that the div is centered and within bounds.\n  var centerX = divSize.width / 2;\n  renderX -= centerX;\n  // Fit horizontally in the bounds.\n  renderX = Math.max(\n    boundPosition.left,\n    Math.min(renderX, boundPosition.left + boundSize.width - divSize.width)\n  );\n  // After we've finished caclulating renderX, adjust the arrow to be relative to it.\n  arrowX -= renderX;\n\n  // Pad the arrow by some pixels, primarily so that it doesn't render on top of a rounded border.\n  arrowX = Math.max(\n    Blockly.DropDownDiv.ARROW_HORIZONTAL_PADDING,\n    Math.min(arrowX, divSize.width - Blockly.DropDownDiv.ARROW_HORIZONTAL_PADDING - Blockly.DropDownDiv.ARROW_SIZE)\n  );\n\n  // Calculate arrow Y. If we rendered secondary, add on bottom.\n  // Extra pixels are added so that it covers the border of the div.\n  var arrowY = (renderedSecondary) ? divSize.height - Blockly.DropDownDiv.BORDER_SIZE : 0;\n  arrowY -= (Blockly.DropDownDiv.ARROW_SIZE / 2) + Blockly.DropDownDiv.BORDER_SIZE;\n\n  // Initial position calculated without any padding to provide an animation point.\n  var initialX = renderX; // X position remains constant during animation.\n  var initialY;\n  if (renderedSecondary) {\n    initialY = secondaryY - divSize.height; // No padding on Y\n  } else {\n    initialY = primaryY; // No padding on Y\n  }\n\n  return {\n    initialX: initialX,\n    initialY : initialY+10,\n    finalX: renderX,\n    finalY: renderY+10,\n    arrowX: arrowX,\n    arrowY: arrowY,\n    arrowAtTop: !renderedSecondary\n  };\n};\n\n/**\n * Is the container visible?\n * @return {boolean} True if visible.\n */\nBlockly.DropDownDiv.isVisible = function() {\n  return !!Blockly.DropDownDiv.owner_;\n};\n\n/**\n * Hide the menu only if it is owned by the provided object.\n * @param {Object} owner Object which must be owning the drop-down to hide\n * @return {Boolean} True if hidden\n */\nBlockly.DropDownDiv.hideIfOwner = function(owner) {\n  if (Blockly.DropDownDiv.owner_ === owner) {\n    Blockly.DropDownDiv.hide();\n    return true;\n  }\n  return false;\n};\n\n/**\n * Hide the menu, triggering animation.\n */\nBlockly.DropDownDiv.hide = function() {\n  Blockly.DropDownDiv.isInAnimation = false;\n  // Start the animation by setting the translation and fading out.\n  var div = Blockly.DropDownDiv.DIV_;\n  // Reset to (initialX, initialY) - i.e., no translation.\n  if(div) {\n    div.style.transform = 'translate(0px, 0px)';\n    div.style.opacity = 0;\n    Blockly.DropDownDiv.animateOutTimer_ = setTimeout(function() {\n      // Finish animation - reset all values to default.\n      Blockly.DropDownDiv.hideWithoutAnimation();\n    }, Blockly.DropDownDiv.ANIMATION_TIME * 1000);\n  }\n  if (Blockly.DropDownDiv.onHide_) {\n    Blockly.DropDownDiv.onHide_();\n    Blockly.DropDownDiv.onHide_ = null;\n  }\n};\n\n// Hide after a timeout\nBlockly.DropDownDiv.hideIfNotShowing = function () {\n  if(!Blockly.DropDownDiv.isInAnimation) {\n    Blockly.DropDownDiv.hide();\n  }\n}\n\n/**\n * Hide the menu, without animation.\n */\nBlockly.DropDownDiv.hideWithoutAnimation = function() {\n  if (!Blockly.DropDownDiv.isVisible()) {\n    return;\n  }\n  var div = Blockly.DropDownDiv.DIV_;\n  Blockly.DropDownDiv.animateOutTimer_ && window.clearTimeout(Blockly.DropDownDiv.animateOutTimer_);\n  div.style.transform = '';\n  div.style.top = '';\n  div.style.left = '';\n  div.style.display = 'none';\n  Blockly.DropDownDiv.clearContent();\n  Blockly.DropDownDiv.owner_ = null;\n  if (Blockly.DropDownDiv.onHide_) {\n    Blockly.DropDownDiv.onHide_();\n    Blockly.DropDownDiv.onHide_ = null;\n  }\n};\n","// Adapt to our custom Blockly.Variables.promptName behavior\nBlockly.FieldVariable.prototype.classValidator = function(text) {\n  var workspace = this.sourceBlock_.workspace;\n  if (text == Blockly.Msg.RENAME_VARIABLE) {\n    var oldVar = this.getText();\n    Blockly.hideChaff();\n    var cb = function(text) {\n      if (text) {\n        workspace.renameVariable(oldVar, text);\n      }\n    };\n    text = Blockly.Variables.promptName(\n        Blockly.Msg.RENAME_VARIABLE_TITLE.replace('%1', oldVar), oldVar, cb);\n    return null;\n  } else if (text == Blockly.Msg.DELETE_VARIABLE.replace('%1',\n      this.getText())) {\n    workspace.deleteVariable(this.getText());\n    return null;\n  }\n  return undefined;\n};\n","Blockly.Blocks['procedures_defnoreturn'].init = function() {\n  var nameField = new Blockly.FieldTextInput('',\n      Blockly.Procedures.rename);\n  nameField.setSpellcheck(false);\n  this.appendDummyInput()\n      .appendField(Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE)\n      .appendField(nameField, 'NAME')\n      .appendField('', 'PARAMS');\n  this.setMutator(new Blockly.Mutator(['procedures_mutatorarg']));\n  if ((this.workspace.options.comments ||\n       (this.workspace.options.parentWorkspace &&\n        this.workspace.options.parentWorkspace.options.comments)) &&\n      Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT) {\n    this.setCommentText(Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT);\n  }\n  this.setColour(Blockly.Blocks.procedures.HUE);\n  this.setTooltip(Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP);\n  this.setHelpUrl(Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL);\n  this.arguments_ = [];\n  this.setStatements_(true);\n  this.statementConnection_ = null;\n};\n\n\nBlockly.Blocks['procedures_defreturn'].init = function() {\n  var nameField = new Blockly.FieldTextInput('',\n      Blockly.Procedures.rename);\n  nameField.setSpellcheck(false);\n  this.appendDummyInput()\n      .appendField(Blockly.Msg.PROCEDURES_DEFRETURN_TITLE)\n      .appendField(nameField, 'NAME')\n      .appendField('', 'PARAMS');\n  this.appendValueInput('RETURN')\n      .setAlign(Blockly.ALIGN_RIGHT)\n      .appendField(Blockly.Msg.PROCEDURES_DEFRETURN_RETURN);\n  this.setMutator(new Blockly.Mutator(['procedures_mutatorarg']));\n  if ((this.workspace.options.comments ||\n       (this.workspace.options.parentWorkspace &&\n        this.workspace.options.parentWorkspace.options.comments)) &&\n      Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT) {\n    this.setCommentText(Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT);\n  }\n  this.setColour(Blockly.Blocks.procedures.HUE);\n  this.setTooltip(Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP);\n  this.setHelpUrl(Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL);\n  this.arguments_ = [];\n  this.setStatements_(true);\n  this.statementConnection_ = null;\n};\n","/**\n * Recalculate a horizontal scrollbar's location on the screen and path length.\n * This should be called when the layout or size of the window has changed.\n * @param {!Object} hostMetrics A data structure describing all the\n *     required dimensions, possibly fetched from the host object.\n */\nBlockly.Scrollbar.prototype.resizeViewHorizontal = function(hostMetrics) {\n  var viewSize = hostMetrics.viewWidth - hostMetrics.flyoutWidth - 1;\n  if (this.pair_) {\n    // Shorten the scrollbar to make room for the corner square.\n    viewSize -= Blockly.Scrollbar.scrollbarThickness;\n  }\n  this.setScrollViewSize_(Math.max(0, viewSize));\n\n  var xCoordinate = hostMetrics.absoluteLeft + hostMetrics.flyoutWidth + 0.5;\n  if (this.pair_ && this.workspace_.RTL) {\n    xCoordinate += Blockly.Scrollbar.scrollbarThickness;\n  }\n\n  // Horizontal toolbar should always be just above the bottom of the workspace.\n  var yCoordinate = hostMetrics.absoluteTop + hostMetrics.viewHeight -\n      Blockly.Scrollbar.scrollbarThickness - 0.5;\n  this.setPosition(xCoordinate, yCoordinate);\n\n  // If the view has been resized, a content resize will also be necessary.  The\n  // reverse is not true.\n  this.resizeContentHorizontal(hostMetrics);\n};\n\n/**\n * Recalculate a horizontal scrollbar's location within its path and length.\n * This should be called when the contents of the workspace have changed.\n * @param {!Object} hostMetrics A data structure describing all the\n *     required dimensions, possibly fetched from the host object.\n */\nBlockly.Scrollbar.prototype.resizeContentHorizontal = function(hostMetrics) {\n  if (!this.pair_) {\n    // Only show the scrollbar if needed.\n    // Ideally this would also apply to scrollbar pairs, but that's a bigger\n    // headache (due to interactions with the corner square).\n    this.setVisible(this.scrollViewSize_ < hostMetrics.contentWidth);\n  }\n\n  this.ratio_ = this.scrollViewSize_ / hostMetrics.contentWidth;\n  if (this.ratio_ == -Infinity || this.ratio_ == Infinity ||\n      isNaN(this.ratio_)) {\n    this.ratio_ = 0;\n  }\n\n  var handleLength = (hostMetrics.viewWidth - hostMetrics.flyoutWidth) * this.ratio_;\n  this.setHandleLength_(Math.max(0, handleLength));\n\n  var handlePosition = (hostMetrics.viewLeft - hostMetrics.contentLeft) *\n      this.ratio_;\n  this.setHandlePosition(this.constrainHandle_(handlePosition));\n};\n\n","// Fix case where there's no workspace (we're probably unloading)\nBlockly.onMouseUp_ = function(e) {\n  var workspace = Blockly.getMainWorkspace();\n  if (!workspace || workspace.dragMode_ == Blockly.DRAG_NONE) {\n    return;\n  }\n  Blockly.Touch.clearTouchIdentifier();\n  Blockly.Css.setCursor(Blockly.Css.Cursor.OPEN);\n  workspace.dragMode_ = Blockly.DRAG_NONE;\n  // Unbind the touch event if it exists.\n  if (Blockly.Touch.onTouchUpWrapper_) {\n    Blockly.unbindEvent_(Blockly.Touch.onTouchUpWrapper_);\n    Blockly.Touch.onTouchUpWrapper_ = null;\n  }\n  if (Blockly.onMouseMoveWrapper_) {\n    Blockly.unbindEvent_(Blockly.onMouseMoveWrapper_);\n    Blockly.onMouseMoveWrapper_ = null;\n  }\n};\n\n","// Remove some characters which make JavaScript.STATEMENT_PREFIX instructions\n// generation go wrong\nBlockly.genUid.soup_ = '!#()*+,-./:;=?@[]_`{|}~' +\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n","Blockly.JavaScript['variables_set'] = function(block) {\n  // Variable setter.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var assignCode = varName + ' = ' + argument0 + ';\\n';\n\n  // Report value if available\n  var reportCode = \"reportBlockValue('\" + block.id + \"', \"+varName+\", '\"+varName+\"');\\n\";\n\n  return assignCode + reportCode;\n};\n","// reportValue allows to show a popup next to a block\nBlockly.WorkspaceSvg.prototype.reportValue = function(id, value) {\n  var block = this.getBlockById(id);\n  if (!block) {\n    throw 'Tried to report value on block that does not exist.';\n  }\n  Blockly.DropDownDiv.createDom();\n  Blockly.DropDownDiv.hideWithoutAnimation();\n  Blockly.DropDownDiv.clearContent();\n  var contentDiv = Blockly.DropDownDiv.getContentDiv();\n  var valueReportBox = goog.dom.createElement('div');\n  valueReportBox.setAttribute('class', 'valueReportBox');\n  valueReportBox.innerHTML = value;\n  contentDiv.appendChild(valueReportBox);\n  Blockly.DropDownDiv.setColour(\"#FFFFFF\", \"#AAAAAA\");\n  Blockly.DropDownDiv.showPositionedByBlock(this, block);\n};\n\n// Fix issue when unloading\nBlockly.WorkspaceSvg.prototype.translate = function(x, y) {\n  var translation = 'translate(' + x + ',' + y + ') ' +\n      'scale(' + this.scale + ')';\n  if(this.svgBlockCanvas_) {\n    this.svgBlockCanvas_.setAttribute('transform', translation);\n  }\n  if(this.svgBubbleCanvas_) {\n    this.svgBubbleCanvas_.setAttribute('transform', translation);\n  }\n};\n","FioiBlockly.Msg.fr = {};\n\nFioiBlockly.Msg.fr.VARIABLES_DEFAULT_NAME = \"element\";\nFioiBlockly.Msg.fr.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;\n\nFioiBlockly.Msg.fr.DICTS_CREATE_EMPTY_TITLE = \"dictionnaire vide\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_CONTAINER_TITLE_ADD = \"Créer un dictionnaire\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_CONTAINER_TOOLTIP = \"\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_INPUT_WITH = \"créer un dictionnaire :\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_ITEM_KEY = \"cle\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_ITEM_MAPPING = \":\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_ITEM_TITLE = \"clé/valeur\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_ITEM_TOOLTIP = \"\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_TOOLTIP = \"\";\nFioiBlockly.Msg.fr.DICT_GET = \"récupérer la clé\";\nFioiBlockly.Msg.fr.DICT_GET_TO = \"de\";\nFioiBlockly.Msg.fr.DICT_KEYS = \"liste des clés de\";\nFioiBlockly.Msg.fr.TEXT_PRINT_TITLE = \"afficher la ligne %1\";\nFioiBlockly.Msg.fr.TEXT_PRINT_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, avec retour à la ligne après.\";\nFioiBlockly.Msg.fr.TEXT_PRINT_NOEND_TITLE = \"afficher %1\";\nFioiBlockly.Msg.fr.TEXT_PRINT_NOEND_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, sans retour à la ligne.\";\n\nFioiBlockly.Msg.fr.LISTS_APPEND_MSG = \"à la liste %1 ajouter l'élément %2\";\nFioiBlockly.Msg.fr.LISTS_APPEND_TOOLTIP = \"Ajouter un élément à la liste '%1'\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_FIRST = \"au début\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_FROM_END = \"à l'indice depuis la fin\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_FROM_START = \"à l'indice\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_GET = \"obtenir la valeur\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_GET_REMOVE = \"obtenir et supprimer la valeur\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_LAST = \"à la fin\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_RANDOM = \"à un indice aléatoire\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_REMOVE = \"supprimer la valeur\";\nFioiBlockly.Msg.fr.LISTS_SET_INDEX_INSERT = \"insérer\";\n\nFioiBlockly.Msg.fr.INPUT_NUM = \"lire un nombre\";\nFioiBlockly.Msg.fr.INPUT_NUM_TOOLTIP = \"Lit un nombre sur l'entrée du programme.\";\nFioiBlockly.Msg.fr.INPUT_CHAR = \"lire un caractère\";\nFioiBlockly.Msg.fr.INPUT_CHAR_TOOLTIP = \"Lit un caractère sur l'entrée du programme.\";\nFioiBlockly.Msg.fr.INPUT_WORD = \"lire un mot\";\nFioiBlockly.Msg.fr.INPUT_WORD_TOOLTIP = \"Lit un mot sur l'entrée du programme.\";\nFioiBlockly.Msg.fr.INPUT_LINE = \"lire une ligne\";\nFioiBlockly.Msg.fr.INPUT_LINE_TOOLTIP = \"Lit une ligne sur l'entrée du programme.\";\n\nFioiBlockly.Msg.fr.CANNOT_DELETE_VARIABLE_PROCEDURE = \"Impossible de supprimer la variable '%1', utilisée par la procédure '%2'.\";\n\nFioiBlockly.Msg.fr.DATA_REPLACEITEMOFLIST_TITLE = \"remplacer l'élément %1 de la liste %2 par %3\";\nFioiBlockly.Msg.fr.DATA_ITEMOFLIST_TITLE = \"élément %1 dans %2\";\nFioiBlockly.Msg.fr.DATA_LISTREPEAT_TITLE = \"initialiser la liste %1 avec %2 répété %3 fois\";\n","// Fill undefined Blockly.Msg messages with messages from the default language\nFioiBlockly.fillLanguage = function() {\n  for(var msgName in FioiBlockly.Msg[FioiBlockly.defaultLang]) {\n    if(typeof Blockly.Msg[msgName] == 'undefined') {\n      Blockly.Msg[msgName] = FioiBlockly.Msg[FioiBlockly.defaultLang][msgName];\n    }\n  }\n}\nFioiBlockly.fillLanguage();\n","Blockly.Python['dict_get'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dict_get_literal'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.quote_(block.getFieldValue('ITEM'));\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dicts_create_with'] = function(block) {\n    var value_keys = Blockly.Python.valueToCode(block, 'keys', Blockly.   Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = new Array(block.itemCount_);\n  \n    for (var n = 0; n < block.itemCount_; n++) {\n        var key = Blockly.Python.quote_(block.getFieldValue('KEY' + n));\n        var value = Blockly.Python.valueToCode(block, 'VALUE' + n,\n                Blockly.Python.ORDER_NONE) || '___';\n        code[n] = key +\": \"+ value;\n    }\n    code = '{' + code.join(', ') + '}';\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['dict_keys'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var code = dict + '.keys()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n","Blockly.Python['input_num'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'int(input_word())';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_char'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.read(1)';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_word'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'input_word()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_line'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.readline()[:-1]';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n","Blockly.Python['lists_append'] = function(block) {\n  // Append\n  var varName = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.Variables.NAME_TYPE);\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  return varName + '.append(' + value + ')\\n';\n};\n","FioiBlockly.OriginalBlocks['logic_compare'] = Blockly.Blocks['logic_compare'];\n\n// Use standard operator names (for instance '!=' instead of '≠')\nBlockly.Blocks['logic_compare'] = {\n  /**\n   * Block for comparison operator.\n   * @this Blockly.Block\n   */\n  init: function() {\n    var rtlOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['>', 'LT'],\n      ['>=', 'LTE'],\n      ['<', 'GT'],\n      ['<=', 'GTE']\n    ];\n    var ltrOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['<', 'LT'],\n      ['<=', 'LTE'],\n      ['>', 'GT'],\n      ['>=', 'GTE']\n    ];\n    var OPERATORS = this.RTL ? rtlOperators : ltrOperators;\n    this.setHelpUrl(Blockly.Msg.LOGIC_COMPARE_HELPURL);\n    this.setColour(Blockly.Blocks.logic.HUE);\n    this.setOutput(true, 'Boolean');\n    this.appendValueInput('A');\n    this.appendValueInput('B')\n        .appendField(new Blockly.FieldDropdown(OPERATORS), 'OP');\n    this.setInputsInline(true);\n    // Assign 'this' to a variable for use in the tooltip closure below.\n    var thisBlock = this;\n    this.setTooltip(function() {\n      var op = thisBlock.getFieldValue('OP');\n      var TOOLTIPS = {\n        'EQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ,\n        'NEQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ,\n        'LT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT,\n        'LTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE,\n        'GT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT,\n        'GTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE\n      };\n      return TOOLTIPS[op];\n    });\n    this.prevBlocks_ = [null, null];\n  },\n  /**\n   * Called whenever anything on the workspace changes.\n   * Prevent mismatched types from being compared.\n   * @param {!Blockly.Events.Abstract} e Change event.\n   * @this Blockly.Block\n   */\n  onchange: function(e) {\n    var blockA = this.getInputTargetBlock('A');\n    var blockB = this.getInputTargetBlock('B');\n    // Disconnect blocks that existed prior to this change if they don't match.\n    if (blockA && blockB &&\n        !blockA.outputConnection.checkType_(blockB.outputConnection)) {\n      // Mismatch between two inputs.  Disconnect previous and bump it away.\n      // Ensure that any disconnections are grouped with the causing event.\n      Blockly.Events.setGroup(e.group);\n      for (var i = 0; i < this.prevBlocks_.length; i++) {\n        var block = this.prevBlocks_[i];\n        if (block === blockA || block === blockB) {\n          block.unplug();\n          block.bumpNeighbours_();\n        }\n      }\n      Blockly.Events.setGroup(false);\n    }\n    this.prevBlocks_[0] = blockA;\n    this.prevBlocks_[1] = blockB;\n  }\n};\n\n","Blockly.Python['text_print_noend'] = function(block) {\n  // Print statement.\n  var msg = Blockly.Python.valueToCode(block, 'TEXT',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  return 'print(' + msg + ', end=\"\")\\n';\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.JavaScript.init = function(workspace) {\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.JavaScript.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.JavaScript.functionNames_ = Object.create(null);\n\n  if (!Blockly.JavaScript.variableDB_) {\n    Blockly.JavaScript.variableDB_ =\n        new Blockly.Names(Blockly.JavaScript.RESERVED_WORDS_);\n  } else {\n    Blockly.JavaScript.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped JavaScript string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @private\n */\nBlockly.JavaScript.quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n\n\nBlockly.JavaScript['controls_for'] = function(block) {\n  // For loop.\n  var variable0 = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'TO',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var increment = Blockly.JavaScript.valueToCode(block, 'BY',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\n  var code;\n  if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\n      Blockly.isNumber(increment)) {\n    // All arguments are simple numbers.\n    var up = parseFloat(argument0) <= parseFloat(argument1);\n    code = 'for (var ' + variable0 + ' = ' + argument0 + '; ' +\n        variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\n        variable0;\n    var step = Math.abs(parseFloat(increment));\n    if (step == 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    var startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\n      startVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_start', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    var endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\n      var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_end', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    var incVar = Blockly.JavaScript.variableDB_.getDistinctName(\n        variable0 + '_inc', Blockly.Variables.NAME_TYPE);\n    code += 'var ' + incVar + ' = ';\n    if (Blockly.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += Blockly.JavaScript.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' +\n        incVar + ' >= 0 ? ' +\n        variable0 + ' <= ' + endVar + ' : ' +\n        variable0 + ' >= ' + endVar + '; ' +\n        variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nBlockly.JavaScript['variables_set'] = function(block) {\n  // Variable setter.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  return 'var ' + varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.Python.init = function(workspace) {\n  /**\n   * Empty loops or conditionals are not allowed in Python.\n   */\n  Blockly.Python.PASS = this.INDENT + 'pass\\n';\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.Python.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.Python.functionNames_ = Object.create(null);\n\n  if (!Blockly.Python.variableDB_) {\n    Blockly.Python.variableDB_ =\n        new Blockly.Names(Blockly.Python.RESERVED_WORDS_);\n  } else {\n    Blockly.Python.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped Python string, complete with quotes.\n * @param {string} string Text to encode.\n * @return {string} Python string.\n * @private\n */\nBlockly.Python.quote_ = function(string) {\n  // Can't use goog.string.quote since % must also be escaped.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\\%/g, '\\\\%')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n","Blockly.Python['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  if (block.getField('TIMES')) {\n    // Internal number.\n    var repeats = String(parseInt(block.getFieldValue('TIMES'), 10));\n  } else {\n    // External number.\n    var repeats = Blockly.Python.valueToCode(block, 'TIMES',\n        Blockly.Python.ORDER_NONE) || '0';\n  }\n  if (Blockly.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'int(' + repeats + ')';\n  }\n  var branch = Blockly.Python.statementToCode(block, 'DO');\n  branch = Blockly.Python.addLoopTrap(branch, block.id) ||\n      Blockly.Python.PASS;\n  var loopVar = Blockly.Python.variableDB_.getDistinctName(\n      'loop', Blockly.Variables.NAME_TYPE);\n  var code = 'for ' + loopVar + ' in range(' + repeats + '):\\n' + branch;\n  return code;\n};\n\nBlockly.Python['controls_repeat'] = Blockly.Python['controls_repeat_ext'];\n","Blockly.JavaScript['math_change'] = function(block) {\n  // Add to a variable in place.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'DELTA',\n      Blockly.JavaScript.ORDER_ADDITION) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var incrCode = varName + ' = (typeof ' + varName + ' == \\'number\\' ? ' + varName +\n      ' : 0) + ' + argument0 + ';\\n';\n\n  // Report value if available\n  var reportCode = \"reportBlockValue('\" + block.id + \"', \"+varName+\", '\"+varName+\"');\\n\";\n\n  return incrCode + reportCode;\n};\n","Blockly.Python['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  // First, add a 'global' statement for every variable that is assigned.\n  // acbart: Actually, skip that, globals are bad news!\n  var globals = []; //Blockly.Variables.allVariables(block);\n  for (var i = globals.length - 1; i >= 0; i--) {\n    var varName = globals[i];\n    if (block.arguments_.indexOf(varName) == -1) {\n      globals[i] = Blockly.Python.variableDB_.getName(varName,\n          Blockly.Variables.NAME_TYPE);\n    } else {\n      // This variable is actually a parameter name.  Do not include it in\n      // the list of globals, thus allowing it be of local scope.\n      globals.splice(i, 1);\n    }\n  }\n  globals = globals.length ? '  global ' + globals.join(', ') + '\\n' : '';\n  // Get the function's name\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  // Get the stack of code\n  var branch = Blockly.Python.statementToCode(block, 'STACK');\n  // Handle prefixing\n  if (Blockly.Python.STATEMENT_PREFIX) {\n    branch = Blockly.Python.prefixLines(\n        Blockly.Python.STATEMENT_PREFIX.replace(/%1/g,\n        '\\'' + block.id + '\\''), Blockly.Python.INDENT) + branch;\n  }\n  // Handle infinite loop trapping\n  if (Blockly.Python.INFINITE_LOOP_TRAP) {\n    branch = Blockly.Python.INFINITE_LOOP_TRAP.replace(/%1/g,\n        '\"' + block.id + '\"') + branch;\n  }\n  // Handle return value\n  var returnValue = Blockly.Python.valueToCode(block, 'RETURN',\n      Blockly.Python.ORDER_NONE) || '';\n  if (returnValue) {\n    returnValue = '  return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = Blockly.Python.PASS;\n  }\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.variableDB_.getName(block.arguments_[x],\n        Blockly.Variables.NAME_TYPE);\n  }\n  var code = 'def ' + funcName + '(' + args.join(', ') + '):\\n' +\n      globals + branch + returnValue;\n  //acbart: I'm not sure why this is used here. It was fine before when\n  //        functions didn't have anything after them, but now it's deadly.\n  //code = Blockly.Python.scrub_(block, code);\n  //Blockly.Python.definitions_[funcName] = code;\n  return code;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nBlockly.Python['procedures_defnoreturn'] =\n    Blockly.Python['procedures_defreturn'];\n\nBlockly.Python['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.valueToCode(block, 'ARG' + x,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = funcName + '(' + args.join(', ') + ')';\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.valueToCode(block, 'ARG' + x,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = funcName + '(' + args.join(', ') + ')\\n';\n  return code;\n};\n\nBlockly.Python['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  var condition = Blockly.Python.valueToCode(block, 'CONDITION',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = 'if ' + condition + ':\\n';\n  if (block.hasReturnValue_) {\n    var value = Blockly.Python.valueToCode(block, 'VALUE',\n        Blockly.Python.ORDER_NONE) || '___';\n    code += '  return ' + value + '\\n';\n  } else {\n    code += '  return\\n';\n  }\n  return code;\n};\n\nBlockly.Python['procedures_return'] = function(block) {\n  // return value from a procedure.\n  var code = \"return\";\n  if (block.hasReturnValue_) {\n    var value = Blockly.Python.valueToCode(block, 'VALUE',\n        Blockly.Python.ORDER_NONE) || '___';\n    code += ' ' + value + '\\n';\n  } else {\n    code += '\\n';\n  }\n  return code;\n};\n"]}