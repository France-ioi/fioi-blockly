{"version":3,"sources":["field_variable.js","variables.js","msg_fr.js","dicts.js","inputs.js","lists.js","logic.js","text.js","javascript.js","python.js","loops.js","python_procedures.js"],"names":["Blockly","FieldVariable","prototype","classValidator","text","promptName","promptText","defaultText","hideChaff","newVar","window","prompt","replace","Msg","RENAME_VARIABLE","NEW_VARIABLE","test","workspace","this","sourceBlock_","oldVar","getText","RENAME_VARIABLE_TITLE","Variables","renameVariable","NEW_VARIABLE_TITLE","flyoutOptions","any","anyButton","fixed","includedBlocks","get","set","incr","shortList","flyoutCategory","xmlList","options","fullVariableList","variableList","indexOf","newVarIdx","i","length","idx","splice","sort","goog","string","caseInsensitiveCompare","button","dom","createDom","setAttribute","push","concat","Blocks","block","field","appendChild","value","shadowBlock","numberField","VARIABLES_DEFAULT_NAME","TEXT_APPEND_VARIABLE","DICTS_CREATE_EMPTY_TITLE","DICTS_CREATE_WITH_CONTAINER_TITLE_ADD","DICTS_CREATE_WITH_CONTAINER_TOOLTIP","DICTS_CREATE_WITH_INPUT_WITH","DICTS_CREATE_WITH_ITEM_KEY","DICTS_CREATE_WITH_ITEM_MAPPING","DICTS_CREATE_WITH_ITEM_TITLE","DICTS_CREATE_WITH_ITEM_TOOLTIP","DICTS_CREATE_WITH_TOOLTIP","DICT_GET","DICT_GET_TO","DICT_KEYS","LISTS_APPEND_MSG","LISTS_APPEND_TOOLTIP","TEXT_PRINT_TITLE","TEXT_PRINT_TOOLTIP","TEXT_PRINT_NOEND_TITLE","TEXT_PRINT_NOEND_TOOLTIP","INPUT_NUM","INPUT_NUM_TOOLTIP","INPUT_CHAR","INPUT_CHAR_TOOLTIP","INPUT_WORD","INPUT_WORD_TOOLTIP","INPUT_LINE","INPUT_LINE_TOOLTIP","dicts","HUE","init","setColour","appendValueInput","setCheck","appendField","setInputsInline","setOutput","newQuote_","FieldTextInput","open","RTL","file","FieldImage","appendDummyInput","appendStatementInput","setTooltip","contextMenu","setPreviousStatement","setNextStatement","itemCount_","updateShape_","setMutator","Mutator","mutationToDom","container","document","createElement","domToMutation","xmlElement","parseInt","getAttribute","getInput","removeInput","setAlign","ALIGN_RIGHT","decompose","containerBlock","Block","obtain","initSvg","connection","x","itemBlock","connect","previousConnection","nextConnection","compose","getInputTargetBlock","connections","valueConnection_","targetBlock","saveConnections","value_input","targetConnection","inputs","lists","jsonInit","message0","args0","type","name","variable","check","previousStatement","nextStatement","colour","thisBlock","getFieldValue","rtlOperators","ltrOperators","OPERATORS","setHelpUrl","LOGIC_COMPARE_HELPURL","logic","FieldDropdown","op","TOOLTIPS","EQ","LOGIC_COMPARE_TOOLTIP_EQ","NEQ","LOGIC_COMPARE_TOOLTIP_NEQ","LT","LOGIC_COMPARE_TOOLTIP_LT","LTE","LOGIC_COMPARE_TOOLTIP_LTE","GT","LOGIC_COMPARE_TOOLTIP_GT","GTE","LOGIC_COMPARE_TOOLTIP_GTE","prevBlocks_","onchange","e","blockA","blockB","outputConnection","checkType_","Events","setGroup","group","unplug","bumpNeighbours_","texts","tooltip","helpUrl","TEXT_PRINT_HELPURL","JavaScript","definitions_","Object","create","functionNames_","variableDB_","reset","Names","RESERVED_WORDS_","quote_","variable0","getName","NAME_TYPE","argument0","valueToCode","ORDER_ASSIGNMENT","argument1","increment","branch","statementToCode","addLoopTrap","id","code","isNumber","up","parseFloat","step","Math","abs","startVar","match","getDistinctName","endVar","incVar","INDENT","varName","Python","PASS","dict","ORDER_MEMBER","ORDER_NONE","ORDER_ATOMIC","Array","n","key","join","getField","repeats","String","Number","loopVar","globals","arguments_","funcName","Procedures","STATEMENT_PREFIX","prefixLines","INFINITE_LOOP_TRAP","returnValue","args","ORDER_FUNCTION_CALL","condition","hasReturnValue_","msg"],"mappings":"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","file":"fioi-blockly.min.js","sourcesContent":["Blockly.FieldVariable.prototype.classValidator = function(text) {\n  function promptName(promptText, defaultText) {\n    Blockly.hideChaff();\n    var newVar = window.prompt(promptText, defaultText);\n    // Merge runs of whitespace.  Strip leading and trailing whitespace.\n    if (newVar) {\n      newVar = newVar.replace(/[\\s\\xa0]+/g, ' ').replace(/^ | $/g, '');\n      // Allow only\n      if (newVar == Blockly.Msg.RENAME_VARIABLE ||\n          newVar == Blockly.Msg.NEW_VARIABLE ||\n          !(/^[a-zA-Z_]\\w*$/.test(newVar))) {\n        newVar = null;\n      }\n    }\n    return newVar;\n  }\n  var workspace = this.sourceBlock_.workspace;\n  if (text == Blockly.Msg.RENAME_VARIABLE) {\n    var oldVar = this.getText();\n    text = promptName(Blockly.Msg.RENAME_VARIABLE_TITLE.replace('%1', oldVar),\n                      oldVar);\n    if (text) {\n      Blockly.Variables.renameVariable(oldVar, text, workspace);\n    }\n    return null;\n  } else if (text == Blockly.Msg.NEW_VARIABLE) {\n    text = promptName(Blockly.Msg.NEW_VARIABLE_TITLE, '');\n    // Since variables are case-insensitive, ensure that if the new variable\n    // matches with an existing variable, the new case prevails throughout.\n    if (text) {\n      Blockly.Variables.renameVariable(text, text, workspace);\n      return text;\n    }\n    return null;\n  }\n  return undefined;\n};\n","// Options for the variables flyout\nBlockly.Variables.flyoutOptions = {\n  any: true, // Allow to create any variable\n  anyButton: true, // Add the button to add variables (needs any=true)\n  fixed: [], // List of fixed variables (will create blocks for each of them)\n  includedBlocks: {get: true, set: true, incr: true}, // Blocks to add to the list\n  shortList: true, // Generate set/incr blocks only for the first (non-fixed) variable\n  };\n\n// Construct the blocks required by the flyout for the variable category.\nBlockly.Variables.flyoutCategory = function(workspace) {\n  var xmlList = [];\n\n  var options = Blockly.Variables.flyoutOptions;\n\n  if(options.any) {\n    if(workspace) {\n      var fullVariableList = workspace.variableList;\n    } else {\n      if(options.fixed.indexOf('newvar') > -1) {\n        var newVarIdx = 0;\n        while(options.fixed.indexOf('newvar'+newVarIdx) > -1) {\n          newVarIdx++;\n        }\n        var fullVariableList = ['newvar'+newVarIdx];\n      } else {\n        var fullVariableList = ['newvar'];\n      }\n    }\n    for(var i=0; i<options.fixed.length; i++) {\n      var idx = fullVariableList.indexOf(options.fixed[i]);\n      if(idx > -1) {\n        fullVariableList.splice(idx, 1);\n      }\n    }\n    fullVariableList.sort(goog.string.caseInsensitiveCompare);\n\n    if(options.anyButton) {\n      var button = goog.dom.createDom('button');\n      button.setAttribute('text', Blockly.Msg.NEW_VARIABLE);\n      xmlList.push(button);\n    }\n  } else {\n    var fullVariableList = [];\n  }\n\n  var variableList = options.fixed.concat(fullVariableList);\n\n  if (variableList.length > 0) {\n    if (Blockly.Blocks['variables_get']) {\n      for(var i=0; i<variableList.length; i++) {\n        // <block type=\"variables_get\" gap=\"8\">\n        //   <field name=\"VAR\">item</field>\n        // </block>\n        var block = goog.dom.createDom('block');\n        block.setAttribute('type', 'variables_get');\n        if (i < options.fixed.length) {\n          block.setAttribute('editable', 'false');\n        }\n        if (i == variableList.length - 1) {\n          block.setAttribute('gap', 24);\n        } else {\n          block.setAttribute('gap', 8);\n        }\n\n        var field = goog.dom.createDom('field', null, variableList[i]);\n        field.setAttribute('name', 'VAR');\n\n        block.appendChild(field);\n        xmlList.push(block);\n      }\n    }\n\n    if (options.includedBlocks.set && Blockly.Blocks['variables_set']) {\n      for(var i=0; i<variableList.length; i++) {\n        // <block type=\"variables_set\" gap=\"20\">\n        //   <field name=\"VAR\">item</field>\n        // </block>\n        if(options.shortList && i > options.fixed.length) {\n          break;\n        }\n\n        var block = goog.dom.createDom('block');\n        block.setAttribute('type', 'variables_set');\n        if (i < options.fixed.length) {\n          block.setAttribute('editable', 'false');\n        }\n        if (i == variableList.length - 1) {\n          block.setAttribute('gap', 24);\n        } else {\n          block.setAttribute('gap', 8);\n        }\n\n        var field = goog.dom.createDom('field', null, variableList[i]);\n        field.setAttribute('name', 'VAR');\n\n        block.appendChild(field);\n        xmlList.push(block);\n      }\n    }\n    if (options.includedBlocks.incr && Blockly.Blocks['math_change']) {\n      for(var i=0; i<variableList.length; i++) {\n        // <block type=\"math_change\">\n        //   <value name=\"DELTA\">\n        //     <shadow type=\"math_number\">\n        //       <field name=\"NUM\">1</field>\n        //     </shadow>\n        //   </value>\n        // </block>\n        if(options.shortList && i > options.fixed.length) {\n          break;\n        }\n\n        var block = goog.dom.createDom('block');\n        block.setAttribute('type', 'math_change');\n        if (i < options.fixed.length) {\n          block.setAttribute('editable', 'false');\n        }\n        if (i == variableList.length - 1) {\n          block.setAttribute('gap', 24);\n        } else {\n          block.setAttribute('gap', 8);\n        }\n        var value = goog.dom.createDom('value');\n        value.setAttribute('name', 'DELTA');\n        block.appendChild(value);\n\n        var field = goog.dom.createDom('field', null, variableList[i]);\n        field.setAttribute('name', 'VAR');\n        block.appendChild(field);\n\n        var shadowBlock = goog.dom.createDom('shadow');\n        shadowBlock.setAttribute('type', 'math_number');\n        value.appendChild(shadowBlock);\n\n        var numberField = goog.dom.createDom('field', null, '1');\n        numberField.setAttribute('name', 'NUM');\n        shadowBlock.appendChild(numberField);\n\n        xmlList.push(block);\n      }\n    }\n\n  }\n  return xmlList;\n};\n\n","Blockly.Msg.VARIABLES_DEFAULT_NAME = \"element\";\nBlockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;\n\nBlockly.Msg.DICTS_CREATE_EMPTY_TITLE = \"dictionnaire vide\";\nBlockly.Msg.DICTS_CREATE_WITH_CONTAINER_TITLE_ADD = \"Créer un dictionnaire\";\nBlockly.Msg.DICTS_CREATE_WITH_CONTAINER_TOOLTIP = \"\";\nBlockly.Msg.DICTS_CREATE_WITH_INPUT_WITH = \"créer un dictionnaire :\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_KEY = \"cle\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_MAPPING = \":\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_TITLE = \"clé/valeur\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_TOOLTIP = \"\";\nBlockly.Msg.DICTS_CREATE_WITH_TOOLTIP = \"\";\nBlockly.Msg.DICT_GET = \"récupérer la clé\";\nBlockly.Msg.DICT_GET_TO = \"de\";\nBlockly.Msg.DICT_KEYS = \"liste des clés de\";\nBlockly.Msg.LISTS_APPEND_MSG = \"à la liste %1 ajouter l'élément %2\";\nBlockly.Msg.LISTS_APPEND_TOOLTIP = \"Ajouter un élément à la liste '%1'\";\nBlockly.Msg.TEXT_PRINT_TITLE = \"afficher la ligne %1\";\nBlockly.Msg.TEXT_PRINT_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, avec retour à la ligne après.\";\nBlockly.Msg.TEXT_PRINT_NOEND_TITLE = \"afficher %1\";\nBlockly.Msg.TEXT_PRINT_NOEND_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, sans retour à la ligne.\";\n\nBlockly.Msg.INPUT_NUM = \"lire un nombre\";\nBlockly.Msg.INPUT_NUM_TOOLTIP = \"Lit un nombre sur l'entrée du programme.\";\nBlockly.Msg.INPUT_CHAR = \"lire un caractère\";\nBlockly.Msg.INPUT_CHAR_TOOLTIP = \"Lit un caractère sur l'entrée du programme.\";\nBlockly.Msg.INPUT_WORD = \"lire un mot\";\nBlockly.Msg.INPUT_WORD_TOOLTIP = \"Lit un mot sur l'entrée du programme.\";\nBlockly.Msg.INPUT_LINE = \"lire une ligne\";\nBlockly.Msg.INPUT_LINE_TOOLTIP = \"Lit une ligne sur l'entrée du programme.\";\n","Blockly.Python['dict_get'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dict_get_literal'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.quote_(block.getFieldValue('ITEM'));\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dicts_create_with'] = function(block) {\n    var value_keys = Blockly.Python.valueToCode(block, 'keys', Blockly.   Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = new Array(block.itemCount_);\n  \n    for (var n = 0; n < block.itemCount_; n++) {\n        var key = Blockly.Python.quote_(block.getFieldValue('KEY' + n));\n        var value = Blockly.Python.valueToCode(block, 'VALUE' + n,\n                Blockly.Python.ORDER_NONE) || '___';\n        code[n] = key +\": \"+ value;\n    }\n    code = '{' + code.join(', ') + '}';\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['dict_keys'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var code = dict + '.keys()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n","Blockly.Python['input_num'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'int(input_word())';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_char'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.read(1)';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_word'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'input_word()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_line'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.readline()[:-1]';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n","Blockly.Python['lists_append'] = function(block) {\n  // Append\n  var varName = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.Variables.NAME_TYPE);\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  return varName + '.append(' + value + ')\\n';\n};\n","Blockly.Blocks['logic_compare'] = {\n  /**\n   * Block for comparison operator.\n   * @this Blockly.Block\n   */\n  init: function() {\n    var rtlOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['>', 'LT'],\n      ['>=', 'LTE'],\n      ['<', 'GT'],\n      ['<=', 'GTE']\n    ];\n    var ltrOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['<', 'LT'],\n      ['<=', 'LTE'],\n      ['>', 'GT'],\n      ['>=', 'GTE']\n    ];\n    var OPERATORS = this.RTL ? rtlOperators : ltrOperators;\n    this.setHelpUrl(Blockly.Msg.LOGIC_COMPARE_HELPURL);\n    this.setColour(Blockly.Blocks.logic.HUE);\n    this.setOutput(true, 'Boolean');\n    this.appendValueInput('A');\n    this.appendValueInput('B')\n        .appendField(new Blockly.FieldDropdown(OPERATORS), 'OP');\n    this.setInputsInline(true);\n    // Assign 'this' to a variable for use in the tooltip closure below.\n    var thisBlock = this;\n    this.setTooltip(function() {\n      var op = thisBlock.getFieldValue('OP');\n      var TOOLTIPS = {\n        'EQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ,\n        'NEQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ,\n        'LT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT,\n        'LTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE,\n        'GT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT,\n        'GTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE\n      };\n      return TOOLTIPS[op];\n    });\n    this.prevBlocks_ = [null, null];\n  },\n  /**\n   * Called whenever anything on the workspace changes.\n   * Prevent mismatched types from being compared.\n   * @param {!Blockly.Events.Abstract} e Change event.\n   * @this Blockly.Block\n   */\n  onchange: function(e) {\n    var blockA = this.getInputTargetBlock('A');\n    var blockB = this.getInputTargetBlock('B');\n    // Disconnect blocks that existed prior to this change if they don't match.\n    if (blockA && blockB &&\n        !blockA.outputConnection.checkType_(blockB.outputConnection)) {\n      // Mismatch between two inputs.  Disconnect previous and bump it away.\n      // Ensure that any disconnections are grouped with the causing event.\n      Blockly.Events.setGroup(e.group);\n      for (var i = 0; i < this.prevBlocks_.length; i++) {\n        var block = this.prevBlocks_[i];\n        if (block === blockA || block === blockB) {\n          block.unplug();\n          block.bumpNeighbours_();\n        }\n      }\n      Blockly.Events.setGroup(false);\n    }\n    this.prevBlocks_[0] = blockA;\n    this.prevBlocks_[1] = blockB;\n  }\n};\n\n","Blockly.Python['text_print_noend'] = function(block) {\n  // Print statement.\n  var msg = Blockly.Python.valueToCode(block, 'TEXT',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  return 'print(' + msg + ', end=\"\")\\n';\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.JavaScript.init = function(workspace) {\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.JavaScript.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.JavaScript.functionNames_ = Object.create(null);\n\n  if (!Blockly.JavaScript.variableDB_) {\n    Blockly.JavaScript.variableDB_ =\n        new Blockly.Names(Blockly.JavaScript.RESERVED_WORDS_);\n  } else {\n    Blockly.JavaScript.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped JavaScript string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @private\n */\nBlockly.JavaScript.quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n\n\nBlockly.JavaScript['controls_for'] = function(block) {\n  // For loop.\n  var variable0 = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'TO',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var increment = Blockly.JavaScript.valueToCode(block, 'BY',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\n  var code;\n  if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\n      Blockly.isNumber(increment)) {\n    // All arguments are simple numbers.\n    var up = parseFloat(argument0) <= parseFloat(argument1);\n    code = 'for (var ' + variable0 + ' = ' + argument0 + '; ' +\n        variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\n        variable0;\n    var step = Math.abs(parseFloat(increment));\n    if (step == 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    var startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\n      startVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_start', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    var endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\n      var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_end', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    var incVar = Blockly.JavaScript.variableDB_.getDistinctName(\n        variable0 + '_inc', Blockly.Variables.NAME_TYPE);\n    code += 'var ' + incVar + ' = ';\n    if (Blockly.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += Blockly.JavaScript.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' +\n        incVar + ' >= 0 ? ' +\n        variable0 + ' <= ' + endVar + ' : ' +\n        variable0 + ' >= ' + endVar + '; ' +\n        variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nBlockly.JavaScript['variables_set'] = function(block) {\n  // Variable setter.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  return 'var ' + varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.Python.init = function(workspace) {\n  /**\n   * Empty loops or conditionals are not allowed in Python.\n   */\n  Blockly.Python.PASS = this.INDENT + 'pass\\n';\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.Python.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.Python.functionNames_ = Object.create(null);\n\n  if (!Blockly.Python.variableDB_) {\n    Blockly.Python.variableDB_ =\n        new Blockly.Names(Blockly.Python.RESERVED_WORDS_);\n  } else {\n    Blockly.Python.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped Python string, complete with quotes.\n * @param {string} string Text to encode.\n * @return {string} Python string.\n * @private\n */\nBlockly.Python.quote_ = function(string) {\n  // Can't use goog.string.quote since % must also be escaped.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\\%/g, '\\\\%')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n","Blockly.Python['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  if (block.getField('TIMES')) {\n    // Internal number.\n    var repeats = String(parseInt(block.getFieldValue('TIMES'), 10));\n  } else {\n    // External number.\n    var repeats = Blockly.Python.valueToCode(block, 'TIMES',\n        Blockly.Python.ORDER_NONE) || '0';\n  }\n  if (Blockly.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'int(' + repeats + ')';\n  }\n  var branch = Blockly.Python.statementToCode(block, 'DO');\n  branch = Blockly.Python.addLoopTrap(branch, block.id) ||\n      Blockly.Python.PASS;\n  var loopVar = Blockly.Python.variableDB_.getDistinctName(\n      'loop', Blockly.Variables.NAME_TYPE);\n  var code = 'for ' + loopVar + ' in range(' + repeats + '):\\n' + branch;\n  return code;\n};\n\nBlockly.Python['controls_repeat'] = Blockly.Python['controls_repeat_ext'];\n","Blockly.Python['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  // First, add a 'global' statement for every variable that is assigned.\n  // acbart: Actually, skip that, globals are bad news!\n  var globals = []; //Blockly.Variables.allVariables(block);\n  for (var i = globals.length - 1; i >= 0; i--) {\n    var varName = globals[i];\n    if (block.arguments_.indexOf(varName) == -1) {\n      globals[i] = Blockly.Python.variableDB_.getName(varName,\n          Blockly.Variables.NAME_TYPE);\n    } else {\n      // This variable is actually a parameter name.  Do not include it in\n      // the list of globals, thus allowing it be of local scope.\n      globals.splice(i, 1);\n    }\n  }\n  globals = globals.length ? '  global ' + globals.join(', ') + '\\n' : '';\n  // Get the function's name\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  // Get the stack of code\n  var branch = Blockly.Python.statementToCode(block, 'STACK');\n  // Handle prefixing\n  if (Blockly.Python.STATEMENT_PREFIX) {\n    branch = Blockly.Python.prefixLines(\n        Blockly.Python.STATEMENT_PREFIX.replace(/%1/g,\n        '\\'' + block.id + '\\''), Blockly.Python.INDENT) + branch;\n  }\n  // Handle infinite loop trapping\n  if (Blockly.Python.INFINITE_LOOP_TRAP) {\n    branch = Blockly.Python.INFINITE_LOOP_TRAP.replace(/%1/g,\n        '\"' + block.id + '\"') + branch;\n  }\n  // Handle return value\n  var returnValue = Blockly.Python.valueToCode(block, 'RETURN',\n      Blockly.Python.ORDER_NONE) || '';\n  if (returnValue) {\n    returnValue = '  return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = Blockly.Python.PASS;\n  }\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.variableDB_.getName(block.arguments_[x],\n        Blockly.Variables.NAME_TYPE);\n  }\n  var code = 'def ' + funcName + '(' + args.join(', ') + '):\\n' +\n      globals + branch + returnValue;\n  //acbart: I'm not sure why this is used here. It was fine before when\n  //        functions didn't have anything after them, but now it's deadly.\n  //code = Blockly.Python.scrub_(block, code);\n  //Blockly.Python.definitions_[funcName] = code;\n  return code;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nBlockly.Python['procedures_defnoreturn'] =\n    Blockly.Python['procedures_defreturn'];\n\nBlockly.Python['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.valueToCode(block, 'ARG' + x,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = funcName + '(' + args.join(', ') + ')';\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.valueToCode(block, 'ARG' + x,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = funcName + '(' + args.join(', ') + ')\\n';\n  return code;\n};\n\nBlockly.Python['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  var condition = Blockly.Python.valueToCode(block, 'CONDITION',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = 'if ' + condition + ':\\n';\n  if (block.hasReturnValue_) {\n    var value = Blockly.Python.valueToCode(block, 'VALUE',\n        Blockly.Python.ORDER_NONE) || '___';\n    code += '  return ' + value + '\\n';\n  } else {\n    code += '  return\\n';\n  }\n  return code;\n};\n\nBlockly.Python['procedures_return'] = function(block) {\n  // return value from a procedure.\n  var code = \"return\";\n  if (block.hasReturnValue_) {\n    var value = Blockly.Python.valueToCode(block, 'VALUE',\n        Blockly.Python.ORDER_NONE) || '___';\n    code += ' ' + value + '\\n';\n  } else {\n    code += '\\n';\n  }\n  return code;\n};\n"]}