{"version":3,"sources":["field_variable.js","msg_fr.js","dicts.js","inputs.js","lists.js","logic.js","text.js","javascript.js","python.js","loops.js","python_procedures.js"],"names":["Blockly","FieldVariable","prototype","classValidator","text","promptName","promptText","defaultText","hideChaff","newVar","window","prompt","replace","Msg","RENAME_VARIABLE","NEW_VARIABLE","test","workspace","this","sourceBlock_","oldVar","getText","RENAME_VARIABLE_TITLE","Variables","renameVariable","NEW_VARIABLE_TITLE","VARIABLES_DEFAULT_NAME","TEXT_APPEND_VARIABLE","DICTS_CREATE_EMPTY_TITLE","DICTS_CREATE_WITH_CONTAINER_TITLE_ADD","DICTS_CREATE_WITH_CONTAINER_TOOLTIP","DICTS_CREATE_WITH_INPUT_WITH","DICTS_CREATE_WITH_ITEM_KEY","DICTS_CREATE_WITH_ITEM_MAPPING","DICTS_CREATE_WITH_ITEM_TITLE","DICTS_CREATE_WITH_ITEM_TOOLTIP","DICTS_CREATE_WITH_TOOLTIP","DICT_GET","DICT_GET_TO","DICT_KEYS","LISTS_APPEND_MSG","LISTS_APPEND_TOOLTIP","TEXT_PRINT_TITLE","TEXT_PRINT_TOOLTIP","TEXT_PRINT_NOEND_TITLE","TEXT_PRINT_NOEND_TOOLTIP","INPUT_NUM","INPUT_NUM_TOOLTIP","INPUT_CHAR","INPUT_CHAR_TOOLTIP","INPUT_WORD","INPUT_WORD_TOOLTIP","INPUT_LINE","INPUT_LINE_TOOLTIP","Blocks","dicts","HUE","init","setColour","appendValueInput","setCheck","appendField","setInputsInline","setOutput","newQuote_","FieldTextInput","open","RTL","file","FieldImage","appendDummyInput","appendStatementInput","setTooltip","contextMenu","setPreviousStatement","setNextStatement","itemCount_","updateShape_","setMutator","Mutator","mutationToDom","container","document","createElement","setAttribute","domToMutation","xmlElement","parseInt","getAttribute","getInput","removeInput","i","setAlign","ALIGN_RIGHT","decompose","containerBlock","Block","obtain","initSvg","connection","x","itemBlock","connect","previousConnection","nextConnection","compose","getInputTargetBlock","connections","valueConnection_","targetBlock","saveConnections","value_input","targetConnection","inputs","lists","jsonInit","message0","args0","type","name","variable","check","previousStatement","nextStatement","colour","thisBlock","getFieldValue","rtlOperators","ltrOperators","OPERATORS","setHelpUrl","LOGIC_COMPARE_HELPURL","logic","FieldDropdown","op","TOOLTIPS","EQ","LOGIC_COMPARE_TOOLTIP_EQ","NEQ","LOGIC_COMPARE_TOOLTIP_NEQ","LT","LOGIC_COMPARE_TOOLTIP_LT","LTE","LOGIC_COMPARE_TOOLTIP_LTE","GT","LOGIC_COMPARE_TOOLTIP_GT","GTE","LOGIC_COMPARE_TOOLTIP_GTE","prevBlocks_","onchange","e","blockA","blockB","outputConnection","checkType_","Events","setGroup","group","length","block","unplug","bumpNeighbours_","texts","tooltip","helpUrl","TEXT_PRINT_HELPURL","JavaScript","definitions_","Object","create","functionNames_","variableDB_","reset","Names","RESERVED_WORDS_","quote_","string","variable0","getName","NAME_TYPE","argument0","valueToCode","ORDER_ASSIGNMENT","argument1","increment","branch","statementToCode","addLoopTrap","id","code","isNumber","up","parseFloat","step","Math","abs","startVar","match","getDistinctName","endVar","incVar","INDENT","varName","Python","PASS","dict","ORDER_MEMBER","value","ORDER_NONE","ORDER_ATOMIC","Array","n","key","join","getField","repeats","String","Number","loopVar","globals","arguments_","indexOf","splice","funcName","Procedures","STATEMENT_PREFIX","prefixLines","INFINITE_LOOP_TRAP","returnValue","args","ORDER_FUNCTION_CALL","condition","hasReturnValue_","msg"],"mappings":"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","file":"fioi-blockly.min.js","sourcesContent":["Blockly.FieldVariable.prototype.classValidator = function(text) {\n  function promptName(promptText, defaultText) {\n    Blockly.hideChaff();\n    var newVar = window.prompt(promptText, defaultText);\n    // Merge runs of whitespace.  Strip leading and trailing whitespace.\n    if (newVar) {\n      newVar = newVar.replace(/[\\s\\xa0]+/g, ' ').replace(/^ | $/g, '');\n      // Allow only\n      if (newVar == Blockly.Msg.RENAME_VARIABLE ||\n          newVar == Blockly.Msg.NEW_VARIABLE ||\n          !(/^[a-zA-Z_]\\w*$/.test(newVar))) {\n        newVar = null;\n      }\n    }\n    return newVar;\n  }\n  var workspace = this.sourceBlock_.workspace;\n  if (text == Blockly.Msg.RENAME_VARIABLE) {\n    var oldVar = this.getText();\n    text = promptName(Blockly.Msg.RENAME_VARIABLE_TITLE.replace('%1', oldVar),\n                      oldVar);\n    if (text) {\n      Blockly.Variables.renameVariable(oldVar, text, workspace);\n    }\n    return null;\n  } else if (text == Blockly.Msg.NEW_VARIABLE) {\n    text = promptName(Blockly.Msg.NEW_VARIABLE_TITLE, '');\n    // Since variables are case-insensitive, ensure that if the new variable\n    // matches with an existing variable, the new case prevails throughout.\n    if (text) {\n      Blockly.Variables.renameVariable(text, text, workspace);\n      return text;\n    }\n    return null;\n  }\n  return undefined;\n};\n","Blockly.Msg.VARIABLES_DEFAULT_NAME = \"element\";\nBlockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;\n\nBlockly.Msg.DICTS_CREATE_EMPTY_TITLE = \"dictionnaire vide\";\nBlockly.Msg.DICTS_CREATE_WITH_CONTAINER_TITLE_ADD = \"Créer un dictionnaire\";\nBlockly.Msg.DICTS_CREATE_WITH_CONTAINER_TOOLTIP = \"\";\nBlockly.Msg.DICTS_CREATE_WITH_INPUT_WITH = \"créer un dictionnaire :\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_KEY = \"cle\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_MAPPING = \":\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_TITLE = \"clé/valeur\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_TOOLTIP = \"\";\nBlockly.Msg.DICTS_CREATE_WITH_TOOLTIP = \"\";\nBlockly.Msg.DICT_GET = \"récupérer la clé\";\nBlockly.Msg.DICT_GET_TO = \"de\";\nBlockly.Msg.DICT_KEYS = \"liste des clés de\";\nBlockly.Msg.LISTS_APPEND_MSG = \"à la liste %1 ajouter l'élément %2\";\nBlockly.Msg.LISTS_APPEND_TOOLTIP = \"Ajouter un élément à la liste '%1'\";\nBlockly.Msg.TEXT_PRINT_TITLE = \"afficher la ligne %1\";\nBlockly.Msg.TEXT_PRINT_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, avec retour à la ligne après.\";\nBlockly.Msg.TEXT_PRINT_NOEND_TITLE = \"afficher %1\";\nBlockly.Msg.TEXT_PRINT_NOEND_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, sans retour à la ligne.\";\n\nBlockly.Msg.INPUT_NUM = \"lire un nombre\";\nBlockly.Msg.INPUT_NUM_TOOLTIP = \"Lit un nombre sur l'entrée du programme.\";\nBlockly.Msg.INPUT_CHAR = \"lire un caractère\";\nBlockly.Msg.INPUT_CHAR_TOOLTIP = \"Lit un caractère sur l'entrée du programme.\";\nBlockly.Msg.INPUT_WORD = \"lire un mot\";\nBlockly.Msg.INPUT_WORD_TOOLTIP = \"Lit un mot sur l'entrée du programme.\";\nBlockly.Msg.INPUT_LINE = \"lire une ligne\";\nBlockly.Msg.INPUT_LINE_TOOLTIP = \"Lit une ligne sur l'entrée du programme.\";\n","Blockly.Python['dict_get'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dict_get_literal'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.quote_(block.getFieldValue('ITEM'));\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dicts_create_with'] = function(block) {\n    var value_keys = Blockly.Python.valueToCode(block, 'keys', Blockly.   Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = new Array(block.itemCount_);\n  \n    for (var n = 0; n < block.itemCount_; n++) {\n        var key = Blockly.Python.quote_(block.getFieldValue('KEY' + n));\n        var value = Blockly.Python.valueToCode(block, 'VALUE' + n,\n                Blockly.Python.ORDER_NONE) || '___';\n        code[n] = key +\": \"+ value;\n    }\n    code = '{' + code.join(', ') + '}';\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['dict_keys'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var code = dict + '.keys()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n","Blockly.Python['input_num'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'int(input_word())';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_char'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.read(1)';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_word'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'input_word()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_line'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.readline()[:-1]';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n","Blockly.Python['lists_append'] = function(block) {\n  // Append\n  var varName = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.Variables.NAME_TYPE);\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  return varName + '.append(' + value + ')\\n';\n};\n","Blockly.Blocks['logic_compare'] = {\n  /**\n   * Block for comparison operator.\n   * @this Blockly.Block\n   */\n  init: function() {\n    var rtlOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['>', 'LT'],\n      ['>=', 'LTE'],\n      ['<', 'GT'],\n      ['<=', 'GTE']\n    ];\n    var ltrOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['<', 'LT'],\n      ['<=', 'LTE'],\n      ['>', 'GT'],\n      ['>=', 'GTE']\n    ];\n    var OPERATORS = this.RTL ? rtlOperators : ltrOperators;\n    this.setHelpUrl(Blockly.Msg.LOGIC_COMPARE_HELPURL);\n    this.setColour(Blockly.Blocks.logic.HUE);\n    this.setOutput(true, 'Boolean');\n    this.appendValueInput('A');\n    this.appendValueInput('B')\n        .appendField(new Blockly.FieldDropdown(OPERATORS), 'OP');\n    this.setInputsInline(true);\n    // Assign 'this' to a variable for use in the tooltip closure below.\n    var thisBlock = this;\n    this.setTooltip(function() {\n      var op = thisBlock.getFieldValue('OP');\n      var TOOLTIPS = {\n        'EQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ,\n        'NEQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ,\n        'LT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT,\n        'LTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE,\n        'GT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT,\n        'GTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE\n      };\n      return TOOLTIPS[op];\n    });\n    this.prevBlocks_ = [null, null];\n  },\n  /**\n   * Called whenever anything on the workspace changes.\n   * Prevent mismatched types from being compared.\n   * @param {!Blockly.Events.Abstract} e Change event.\n   * @this Blockly.Block\n   */\n  onchange: function(e) {\n    var blockA = this.getInputTargetBlock('A');\n    var blockB = this.getInputTargetBlock('B');\n    // Disconnect blocks that existed prior to this change if they don't match.\n    if (blockA && blockB &&\n        !blockA.outputConnection.checkType_(blockB.outputConnection)) {\n      // Mismatch between two inputs.  Disconnect previous and bump it away.\n      // Ensure that any disconnections are grouped with the causing event.\n      Blockly.Events.setGroup(e.group);\n      for (var i = 0; i < this.prevBlocks_.length; i++) {\n        var block = this.prevBlocks_[i];\n        if (block === blockA || block === blockB) {\n          block.unplug();\n          block.bumpNeighbours_();\n        }\n      }\n      Blockly.Events.setGroup(false);\n    }\n    this.prevBlocks_[0] = blockA;\n    this.prevBlocks_[1] = blockB;\n  }\n};\n\n","Blockly.Python['text_print_noend'] = function(block) {\n  // Print statement.\n  var msg = Blockly.Python.valueToCode(block, 'TEXT',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  return 'print(' + msg + ', end=\"\")\\n';\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.JavaScript.init = function(workspace) {\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.JavaScript.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.JavaScript.functionNames_ = Object.create(null);\n\n  if (!Blockly.JavaScript.variableDB_) {\n    Blockly.JavaScript.variableDB_ =\n        new Blockly.Names(Blockly.JavaScript.RESERVED_WORDS_);\n  } else {\n    Blockly.JavaScript.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped JavaScript string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @private\n */\nBlockly.JavaScript.quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n\n\nBlockly.JavaScript['controls_for'] = function(block) {\n  // For loop.\n  var variable0 = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'TO',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var increment = Blockly.JavaScript.valueToCode(block, 'BY',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\n  var code;\n  if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\n      Blockly.isNumber(increment)) {\n    // All arguments are simple numbers.\n    var up = parseFloat(argument0) <= parseFloat(argument1);\n    code = 'for (var ' + variable0 + ' = ' + argument0 + '; ' +\n        variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\n        variable0;\n    var step = Math.abs(parseFloat(increment));\n    if (step == 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    var startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\n      startVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_start', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    var endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\n      var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_end', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    var incVar = Blockly.JavaScript.variableDB_.getDistinctName(\n        variable0 + '_inc', Blockly.Variables.NAME_TYPE);\n    code += 'var ' + incVar + ' = ';\n    if (Blockly.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += Blockly.JavaScript.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' +\n        incVar + ' >= 0 ? ' +\n        variable0 + ' <= ' + endVar + ' : ' +\n        variable0 + ' >= ' + endVar + '; ' +\n        variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nBlockly.JavaScript['variables_set'] = function(block) {\n  // Variable setter.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  return 'var ' + varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.Python.init = function(workspace) {\n  /**\n   * Empty loops or conditionals are not allowed in Python.\n   */\n  Blockly.Python.PASS = this.INDENT + 'pass\\n';\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.Python.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.Python.functionNames_ = Object.create(null);\n\n  if (!Blockly.Python.variableDB_) {\n    Blockly.Python.variableDB_ =\n        new Blockly.Names(Blockly.Python.RESERVED_WORDS_);\n  } else {\n    Blockly.Python.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped Python string, complete with quotes.\n * @param {string} string Text to encode.\n * @return {string} Python string.\n * @private\n */\nBlockly.Python.quote_ = function(string) {\n  // Can't use goog.string.quote since % must also be escaped.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\\%/g, '\\\\%')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n","Blockly.Python['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  if (block.getField('TIMES')) {\n    // Internal number.\n    var repeats = String(parseInt(block.getFieldValue('TIMES'), 10));\n  } else {\n    // External number.\n    var repeats = Blockly.Python.valueToCode(block, 'TIMES',\n        Blockly.Python.ORDER_NONE) || '0';\n  }\n  if (Blockly.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'int(' + repeats + ')';\n  }\n  var branch = Blockly.Python.statementToCode(block, 'DO');\n  branch = Blockly.Python.addLoopTrap(branch, block.id) ||\n      Blockly.Python.PASS;\n  var loopVar = Blockly.Python.variableDB_.getDistinctName(\n      'loop', Blockly.Variables.NAME_TYPE);\n  var code = 'for ' + loopVar + ' in range(' + repeats + '):\\n' + branch;\n  return code;\n};\n\nBlockly.Python['controls_repeat'] = Blockly.Python['controls_repeat_ext'];\n","Blockly.Python['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  // First, add a 'global' statement for every variable that is assigned.\n  // acbart: Actually, skip that, globals are bad news!\n  var globals = []; //Blockly.Variables.allVariables(block);\n  for (var i = globals.length - 1; i >= 0; i--) {\n    var varName = globals[i];\n    if (block.arguments_.indexOf(varName) == -1) {\n      globals[i] = Blockly.Python.variableDB_.getName(varName,\n          Blockly.Variables.NAME_TYPE);\n    } else {\n      // This variable is actually a parameter name.  Do not include it in\n      // the list of globals, thus allowing it be of local scope.\n      globals.splice(i, 1);\n    }\n  }\n  globals = globals.length ? '  global ' + globals.join(', ') + '\\n' : '';\n  // Get the function's name\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  // Get the stack of code\n  var branch = Blockly.Python.statementToCode(block, 'STACK');\n  // Handle prefixing\n  if (Blockly.Python.STATEMENT_PREFIX) {\n    branch = Blockly.Python.prefixLines(\n        Blockly.Python.STATEMENT_PREFIX.replace(/%1/g,\n        '\\'' + block.id + '\\''), Blockly.Python.INDENT) + branch;\n  }\n  // Handle infinite loop trapping\n  if (Blockly.Python.INFINITE_LOOP_TRAP) {\n    branch = Blockly.Python.INFINITE_LOOP_TRAP.replace(/%1/g,\n        '\"' + block.id + '\"') + branch;\n  }\n  // Handle return value\n  var returnValue = Blockly.Python.valueToCode(block, 'RETURN',\n      Blockly.Python.ORDER_NONE) || '';\n  if (returnValue) {\n    returnValue = '  return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = Blockly.Python.PASS;\n  }\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.variableDB_.getName(block.arguments_[x],\n        Blockly.Variables.NAME_TYPE);\n  }\n  var code = 'def ' + funcName + '(' + args.join(', ') + '):\\n' +\n      globals + branch + returnValue;\n  //acbart: I'm not sure why this is used here. It was fine before when\n  //        functions didn't have anything after them, but now it's deadly.\n  //code = Blockly.Python.scrub_(block, code);\n  //Blockly.Python.definitions_[funcName] = code;\n  return code;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nBlockly.Python['procedures_defnoreturn'] =\n    Blockly.Python['procedures_defreturn'];\n\nBlockly.Python['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.valueToCode(block, 'ARG' + x,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = funcName + '(' + args.join(', ') + ')';\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.valueToCode(block, 'ARG' + x,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = funcName + '(' + args.join(', ') + ')\\n';\n  return code;\n};\n\nBlockly.Python['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  var condition = Blockly.Python.valueToCode(block, 'CONDITION',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = 'if ' + condition + ':\\n';\n  if (block.hasReturnValue_) {\n    var value = Blockly.Python.valueToCode(block, 'VALUE',\n        Blockly.Python.ORDER_NONE) || '___';\n    code += '  return ' + value + '\\n';\n  } else {\n    code += '  return\\n';\n  }\n  return code;\n};\n\nBlockly.Python['procedures_return'] = function(block) {\n  // return value from a procedure.\n  var code = \"return\";\n  if (block.hasReturnValue_) {\n    var value = Blockly.Python.valueToCode(block, 'VALUE',\n        Blockly.Python.ORDER_NONE) || '___';\n    code += ' ' + value + '\\n';\n  } else {\n    code += '\\n';\n  }\n  return code;\n};\n"],"sourceRoot":"/source/"}