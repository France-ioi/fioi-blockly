{"version":3,"sources":["base.js","dropdowndiv.js","field_variable.js","names.js","procedures.js","scrollbar.js","touch.js","utils.js","variables.js","workspace_svg.js","de.js","en.js","es.js","fr.js","msg_fill.js","dicts.js","inputs.js","lists.js","logic.js","tables.js","text.js","javascript.js","python.js","loops.js","math.js"],"names":["FioiBlockly","Msg","OriginalBlocks","defaultLang","langErrorDisplayed","loadLanguage","lang","console","error","msgName","Blockly","reimportOriginalBlocks","blockNames","blockName","indexOf","Blocks","goog","provide","require","DropDownDiv","DIV_","boundsElement_","owner_","ARROW_SIZE","BORDER_SIZE","ARROW_HORIZONTAL_PADDING","PADDING_Y","ANIMATION_TIME","animateOutTimer_","onHide_","isInAnimation","isInAnimationTimer","listenerActive","createDom","dom","document","body","appendChild","content_","arrow_","style","transition","setBoundsElement","boundsElement","getContentDiv","clearContent","innerHTML","setColour","backgroundColour","borderColour","backgroundColor","borderColor","setCategory","category","setAttribute","showPositionedByBlock","owner","block","opt_onHide","opt_secondaryYOffset","scale","workspace","bBox","width","height","blockSvg","getSvgRoot","i","children","length","classList","position","getBoundingClientRect","primaryX","left","primaryY","top","secondaryX","secondaryY","getParentSvg","parentNode","show","this","removeListener","unbindEvent_","addListener","bindEventWithChecks_","window","hideIfNotShowing","clearTimeout","setTimeout","div","metrics","getPositionMetrics","transform","arrowX","arrowY","arrowAtTop","initialX","initialY","display","opacity","dx","finalX","dy","finalY","renderX","renderY","renderedSecondary","boundPosition","boundSize","getSize","divSize","Math","max","min","centerX","isVisible","hideIfOwner","hide","hideWithoutAnimation","FieldVariable","prototype","classValidator","text","sourceBlock_","RENAME_VARIABLE","oldVar","getText","hideChaff","cb","renameVariable","Variables","promptName","RENAME_VARIABLE_TITLE","replace","DELETE_VARIABLE","deleteVariable","Names","safeName_","name","newname","encodeURI","Procedures","flyoutOptions","includedBlocks","noret","ret","ifret","flyoutCategory","populateProcedures","procedureList","templateName","args","mutation","j","arg","xmlList","push","incl","nameField","PROCEDURES_DEFNORETURN_PROCEDURE","tuple","allProcedures","Scrollbar","resizeViewHorizontal","hostMetrics","viewSize","viewWidth","flyoutWidth","pair_","scrollbarThickness","setScrollViewSize_","xCoordinate","absoluteLeft","workspace_","RTL","yCoordinate","absoluteTop","viewHeight","setPosition","resizeContentHorizontal","setVisible","scrollViewSize_","contentWidth","ratio_","Infinity","isNaN","handleLength","setHandleLength_","handlePosition","viewLeft","contentLeft","setHandlePosition","constrainHandle_","onMouseUp_","e","getMainWorkspace","dragMode_","DRAG_NONE","Touch","clearTouchIdentifier","Css","setCursor","Cursor","OPEN","onTouchUpWrapper_","onMouseMoveWrapper_","genUid","soup_","eventsBound","node","thisObject","func","opt_noCaptureIdentifier","handled","wrapFunc","event","captureIdentifier","events","splitEventByTouches","shouldHandleEvent","setClientFromTouch","call","addEventListener","bindData","TOUCH_MAP","eventName","touchWrapFunc","preventDefault","removeEvents","eData","removeEventListener","documentEventsBound_","validateExpression","checkAst","state","type","allowedTypes","msg","EVAL_ERROR_TYPE","object","end","property","variableList","EVAL_ERROR_VAR","acorn","walk","EVAL_ERROR_SEMICOLON","ast","parse","EVAL_ERROR_SYNTAX","full","reindexExpression","getReindexes","reindexes","newText","start","slice","any","anyButton","fixed","get","set","incr","shortList","options","scratchMode","fullVariableList","newVarIdx","idx","splice","sort","string","caseInsensitiveCompare","button","NEW_VARIABLE","registerButtonCallback","createVariable","getTargetWorkspace","concat","field","createVariableDom_","createTextDom_","createMathNumberDom_","value","shadowBlock","numberField","variableIndexOf","displayHelper","showPopupMessage","VARIABLE_ALREADY_EXISTS","toLowerCase","NEW_VARIABLE_TITLE","promptText","defaultText","callback","wasInvalid","newVar","fullPromptText","INVALID_NAME","UNDO","WorkspaceSvg","reportValue","id","getBlockById","contentDiv","valueReportBox","createElement","translate","x","y","translation","svgBlockCanvas_","svgBubbleCanvas_","dragSurface","translateAndScaleGroup","en","VARIABLES_DEFAULT_NAME","TEXT_APPEND_VARIABLE","DICTS_CREATE_EMPTY_TITLE","DICTS_CREATE_WITH_CONTAINER_TITLE_ADD","DICTS_CREATE_WITH_CONTAINER_TOOLTIP","DICTS_CREATE_WITH_INPUT_WITH","DICTS_CREATE_WITH_ITEM_KEY","DICTS_CREATE_WITH_ITEM_MAPPING","DICTS_CREATE_WITH_ITEM_TITLE","DICTS_CREATE_WITH_ITEM_TOOLTIP","DICTS_CREATE_WITH_TOOLTIP","DICT_GET","DICT_GET_TO","DICT_KEYS","DICT_SET_TITLE","DICT_SET_OF","DICT_SET_TO","TEXT_PRINT_TITLE","TEXT_PRINT_TOOLTIP","TEXT_PRINT_NOEND_TITLE","TEXT_PRINT_NOEND_TOOLTIP","LISTS_APPEND_MSG","LISTS_APPEND_TOOLTIP","LISTS_GET_INDEX_FIRST","LISTS_GET_INDEX_FROM_END","LISTS_GET_INDEX_FROM_START","LISTS_GET_INDEX_GET","LISTS_GET_INDEX_GET_REMOVE","LISTS_GET_INDEX_LAST","LISTS_GET_INDEX_RANDOM","LISTS_GET_INDEX_REMOVE","LISTS_SET_INDEX_INSERT","LISTS_SORT_TITLE","LISTS_SORT_PLACE_MSG","LISTS_SORT_PLACE_TOOLTIP","INPUT_NUM","INPUT_NUM_TOOLTIP","INPUT_NUM_LIST","INPUT_NUM_LIST_TOOLTIP","INPUT_NUM_NEXT","INPUT_NUM_NEXT_TOOLTIP","INPUT_CHAR","INPUT_CHAR_TOOLTIP","INPUT_WORD","INPUT_WORD_TOOLTIP","INPUT_LINE","INPUT_LINE_TOOLTIP","CANNOT_DELETE_VARIABLE_PROCEDURE","DATA_REPLACEITEMOFLIST_TITLE","DATA_ITEMOFLIST_TITLE","DATA_LISTREPEAT_TITLE","es","fr","TEXT_EVAL_TITLE","TEXT_EVAL_TOOLTIP","TEXT_EVAL_INVALID","TABLES_2D_INIT","TABLES_2D_INIT_TOOLTIP","TABLES_2D_SET","TABLES_3D_SET_TOOLTIP","TABLES_2D_GET","TABLES_2D_GET_TOOLTIP","TABLES_3D_INIT","TABLES_3D_INIT_TOOLTIP","TABLES_3D_SET","TABLES_3D_GET","TABLES_3D_GET_TOOLTIP","TABLES_VAR_NAME","TABLES_TOO_BIG","TABLES_OUT_OF_BOUNDS","fillLanguage","dicts","HUE","init","appendValueInput","setCheck","appendField","setInputsInline","setOutput","newQuote_","FieldTextInput","open","file","FieldImage","setPreviousStatement","setNextStatement","appendDummyInput","appendStatementInput","setTooltip","contextMenu","itemCount_","updateShape_","setMutator","Mutator","mutationToDom","container","domToMutation","xmlElement","parseInt","getAttribute","getInput","removeInput","setAlign","ALIGN_RIGHT","decompose","containerBlock","Block","obtain","initSvg","connection","itemBlock","connect","previousConnection","nextConnection","compose","getInputTargetBlock","connections","valueConnection_","targetBlock","saveConnections","value_input","targetConnection","inputs","setOutputShape","OUTPUT_SHAPE_HEXAGONAL","lists","jsonInit","message0","args0","variable","check","previousStatement","nextStatement","colour","Colours","data","primary","colourSecondary","secondary","colourTertiary","tertiary","thisBlock","getFieldValue","MODE","LISTS_SET_INDEX_SET","WHERE_OPTIONS","setHelpUrl","LISTS_SET_INDEX_HELPURL","LISTS_SET_INDEX_INPUT_IN_LIST","FieldDropdown","LISTS_SET_INDEX_TOOLTIP","updateAt_","mode","where","tooltip","LISTS_SET_INDEX_TOOLTIP_SET_FROM","LISTS_SET_INDEX_TOOLTIP_SET_FIRST","LISTS_SET_INDEX_TOOLTIP_SET_LAST","LISTS_SET_INDEX_TOOLTIP_SET_RANDOM","LISTS_SET_INDEX_TOOLTIP_INSERT_FROM","LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST","LISTS_SET_INDEX_TOOLTIP_INSERT_LAST","LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM","LISTS_INDEX_FROM_START_TOOLTIP","oneBasedIndex","isAt","INPUT_VALUE","ORDINAL_NUMBER_SUFFIX","menu","newAt","setFieldValue","moveInputBefore","rtlOperators","ltrOperators","OPERATORS","LOGIC_COMPARE_HELPURL","logic","op","TOOLTIPS","EQ","LOGIC_COMPARE_TOOLTIP_EQ","NEQ","LOGIC_COMPARE_TOOLTIP_NEQ","LT","LOGIC_COMPARE_TOOLTIP_LT","LTE","LOGIC_COMPARE_TOOLTIP_LTE","GT","LOGIC_COMPARE_TOOLTIP_GT","GTE","LOGIC_COMPARE_TOOLTIP_GTE","prevBlocks_","onchange","blockA","blockB","outputConnection","checkType_","Events","setGroup","group","unplug","bumpNeighbours_","rename","setSpellcheck","PROCEDURES_DEFNORETURN_TITLE","comments","parentWorkspace","PROCEDURES_DEFNORETURN_COMMENT","setCommentText","procedures","PROCEDURES_DEFNORETURN_TOOLTIP","PROCEDURES_DEFNORETURN_HELPURL","arguments_","setStatements_","statementConnection_","PROCEDURES_DEFRETURN_TITLE","PROCEDURES_DEFRETURN_RETURN","PROCEDURES_DEFRETURN_COMMENT","PROCEDURES_DEFRETURN_TOOLTIP","PROCEDURES_DEFRETURN_HELPURL","tables","inputsInline","TABLES_2D_SET_TOOLTIP","output","outputShape","OUTPUT_SHAPE_ROUND","texts","helpUrl","TEXT_PRINT_HELPURL","textInput","msgTimeout","validate_","validationMsg","asserts","assertObject","htmlInput_","htmlInput","addClass_","setWarningText","resizeEditor_","removeClass_","JavaScript","definitions_","Object","create","functionNames_","variableDB_","reset","RESERVED_WORDS_","quote_","variable0","getName","NAME_TYPE","argument0","valueToCode","ORDER_ASSIGNMENT","argument1","increment","branch","statementToCode","addLoopTrap","code","isNumber","up","parseFloat","step","abs","startVar","match","getDistinctName","endVar","incVar","INDENT","varName","Python","PASS","dict","ORDER_MEMBER","ORDER_NONE","ORDER_ATOMIC","key","Array","n","join","cacheList","list","listVar","at","getAdjusted","ORDER_SUBTRACTION","xVar","getField","repeats","String","Number","loopVar","ORDER_ADDITION","incrCode","reportCode","blockVarName","at1","ORDER_COMMA","at2","at3","expr","reindexExpr","assignCode","makeAssignIndex","l","a","v","getAdjustedInt"],"mappings":"AAAAA,eACAA,YAAAC,OACAD,YAAAE,kBAEAF,YAAAG,YAAA,KAEAH,YAAAI,sBAGAJ,YAAAK,aAAA,SAAAC,GACA,IAAAN,YAAAC,IAAAK,KAAAN,YAAAI,mBAAAE,GAGA,MAFAC,SAAAC,MAAA,YAAAF,EAAA,wCACAN,YAAAI,mBAAAE,IAAA,EAIA,KAAA,GAAAG,KAAAT,aAAAC,IAAAK,GACAI,QAAAT,IAAAQ,GAAAT,YAAAC,IAAAK,GAAAG,IAKAT,YAAAW,uBAAA,SAAAC,GACA,IAAA,GAAAC,KAAAb,aAAAE,eACAU,GAAAA,EAAAE,QAAAD,KAAA,IACAH,QAAAK,OAAAF,GAAAb,YAAAE,eAAAW,KCGAG,KAAAC,QAAA,uBAEAD,KAAAE,QAAA,YACAF,KAAAE,QAAA,cAMAR,QAAAS,YAAA,aAQAT,QAAAS,YAAAC,KAAA,KAQAV,QAAAS,YAAAE,eAAA,KAOAX,QAAAS,YAAAG,OAAA,KAOAZ,QAAAS,YAAAI,WAAA,GAOAb,QAAAS,YAAAK,YAAA,EAOAd,QAAAS,YAAAM,yBAAA,GAOAf,QAAAS,YAAAO,UAAA,GAOAhB,QAAAS,YAAAQ,eAAA,IAOAjB,QAAAS,YAAAS,iBAAA,KAMAlB,QAAAS,YAAAU,QAAA,EAGAnB,QAAAS,YAAAW,eAAA,EACApB,QAAAS,YAAAY,mBAAA,KAGArB,QAAAS,YAAAa,gBAAA,EAMAtB,QAAAS,YAAAc,UAAA,WACAvB,QAAAS,YAAAC,OAGAV,QAAAS,YAAAC,KAAAJ,KAAAkB,IAAAD,UAAA,MAAA,sBACAE,SAAAC,KAAAC,YAAA3B,QAAAS,YAAAC,MACAV,QAAAS,YAAAmB,SAAAtB,KAAAkB,IAAAD,UAAA,MAAA,0BACAvB,QAAAS,YAAAC,KAAAiB,YAAA3B,QAAAS,YAAAmB,UACA5B,QAAAS,YAAAoB,OAAAvB,KAAAkB,IAAAD,UAAA,MAAA,wBACAvB,QAAAS,YAAAC,KAAAiB,YAAA3B,QAAAS,YAAAoB,QAGA7B,QAAAS,YAAAC,KAAAoB,MAAAC,WAAA,aACA/B,QAAAS,YAAAQ,eAAA,cACAjB,QAAAS,YAAAQ,eAAA,MAQAjB,QAAAS,YAAAuB,iBAAA,SAAAC,GACAjC,QAAAS,YAAAE,eAAAsB,GAOAjC,QAAAS,YAAAyB,cAAA,WACA,MAAAlC,SAAAS,YAAAmB,UAMA5B,QAAAS,YAAA0B,aAAA,WACAnC,QAAAS,YAAAmB,SAAAQ,UAAA,IAQApC,QAAAS,YAAA4B,UAAA,SAAAC,EAAAC,GACAvC,QAAAS,YAAAC,KAAAoB,MAAAU,gBAAAF,EACAtC,QAAAS,YAAAC,KAAAoB,MAAAW,YAAAF,GAOAvC,QAAAS,YAAAiC,YAAA,SAAAC,GACA3C,QAAAS,YAAAC,KAAAkC,aAAA,gBAAAD,IAIA3C,QAAAS,YAAAoC,sBAAA,SAAAC,EAAAC,EACAC,EAAAC,GACA,GAAAC,GAAAH,EAAAI,UAAAD,MACAE,GAAAC,MAAAN,EAAAM,MAAAC,OAAAP,EAAAO,OACAF,GAAAC,OAAAH,EACAE,EAAAE,QAAAJ,CAEA,KAAA,GADAK,GAAAR,EAAAS,aACAC,EAAA,EAAAA,EAAAF,EAAAG,SAAAC,OAAAF,IACA,GAAA,eAAAF,EAAAG,SAAAD,GAAAG,UAAA,GAAA,CACAL,EAAAA,EAAAG,SAAAD,EACA,OAGA,GAAAI,GAAAN,EAAAO,wBAEAC,EAAAF,EAAAG,KAAAH,EAAAR,MAAA,EACAY,EAAAJ,EAAAK,IAAAL,EAAAP,OAEAa,EAAAJ,EACAK,EAAAP,EAAAK,GAMA,OALAjB,KACAmB,GAAAnB,GAGAjD,QAAAS,YAAAuB,iBAAAe,EAAAI,UAAAkB,eAAAC,YACAtE,QAAAS,YAAA8D,KAAAC,KAAAT,EAAAE,EAAAE,EAAAC,EAAApB,IAIAhD,QAAAS,YAAAgE,eAAA,WACAzE,QAAAS,YAAAa,iBACAtB,QAAA0E,aAAA1E,QAAAS,YAAAa,gBACAtB,QAAAS,YAAAa,gBAAA,IAKAtB,QAAAS,YAAAkE,YAAA,WACA3E,QAAAS,YAAAa,iBACAtB,QAAAS,YAAAa,eAAAtB,QAAA4E,qBAAAC,OAAA,YAAA7E,QAAAS,YAAAT,QAAAS,YAAAqE,oBAoBA9E,QAAAS,YAAA8D,KAAA,SAAAzB,EAAAiB,EAAAE,EAAAE,EAAAC,EAAApB,GAEAhD,QAAAS,YAAAW,eAAA,EACApB,QAAAS,YAAAS,mBACA2D,OAAAE,aAAA/E,QAAAS,YAAAS,kBACAlB,QAAAS,YAAAS,iBAAA,MAEAlB,QAAAS,YAAAY,qBACAwD,OAAAE,aAAA/E,QAAAS,YAAAY,oBACArB,QAAAS,YAAAY,mBAAA,MAEArB,QAAAS,YAAAY,mBAAAwD,OAAAG,WAAA,WAAAhF,QAAAS,YAAAW,eAAA,GAAA,IAAApB,QAAAS,YAAAQ,gBAEAjB,QAAAS,YAAAkE,cAEA3E,QAAAS,YAAAG,OAAAkC,EACA9C,QAAAS,YAAAU,QAAA6B,CACA,IAAAiC,GAAAjF,QAAAS,YAAAC,KACAwE,EAAAlF,QAAAS,YAAA0E,mBAAApB,EAAAE,EAAAE,EAAAC,EAEApE,SAAAS,YAAAoB,OAAAC,MAAAsD,UAAA,aACAF,EAAAG,OAAA,MAAAH,EAAAI,OAAA,oBACAtF,QAAAS,YAAAoB,OAAAe,aAAA,QACAsC,EAAAK,WAAA,gCAAA,oCAYAN,EAAAnD,MAAAkC,KAAAkB,EAAAM,SAAA,KACAP,EAAAnD,MAAAoC,IAAAgB,EAAAO,SAAA,KAEAR,EAAAnD,MAAA4D,QAAA,QACAT,EAAAnD,MAAA6D,QAAA,CAIA,IAAAC,GAAAV,EAAAW,OAAAX,EAAAM,SACAM,EAAAZ,EAAAa,OAAAb,EAAAO,QAEA,OADAR,GAAAnD,MAAAsD,UAAA,aAAAQ,EAAA,MAAAE,EAAA,MACAZ,EAAAK,YAYAvF,QAAAS,YAAA0E,mBAAA,SAAApB,EAAAE,EAAAE,EAAAC,GACA,GASA4B,GAAAC,EAAAC,EATAjB,EAAAjF,QAAAS,YAAAC,KACAyF,EAAAnG,QAAAS,YAAAE,eAAAmD,wBAEAsC,EAAA9F,KAAAwB,MAAAuE,QAAArG,QAAAS,YAAAE,gBACA2F,EAAAhG,KAAAwB,MAAAuE,QAAApB,EAOAb,GAAAkC,EAAAhD,OAAA6C,EAAAjC,IAEAD,EAAAqC,EAAAhD,OAAA6C,EAAAjC,IAAAkC,EAAA9C,QAEA0C,EAAA7B,EACA8B,EAAA7B,EAAAkC,EAAAhD,OAAAtD,QAAAS,YAAAO,UACAkF,GAAA,IAGAF,EAAAjC,EACAkC,EAAAhC,EAAAjE,QAAAS,YAAAO,UACAkF,GAAA,IAIAF,EAAA7B,EACA8B,EAAA7B,EAAAkC,EAAAhD,OAAAtD,QAAAS,YAAAO,UACAkF,GAAA,EAKA,IAAAb,GAAAW,EAAAhG,QAAAS,YAAAI,WAAA,CAEAwE,GAAAkB,KAAAC,IAAAL,EAAAnC,KAAAuC,KAAAE,IAAApB,EAAAc,EAAAnC,KAAAoC,EAAA/C,OAGA,IAAAqD,GAAAJ,EAAAjD,MAAA,CACA2C,IAAAU,EAEAV,EAAAO,KAAAC,IACAL,EAAAnC,KACAuC,KAAAE,IAAAT,EAAAG,EAAAnC,KAAAoC,EAAA/C,MAAAiD,EAAAjD,QAGAgC,GAAAW,EAGAX,EAAAkB,KAAAC,IACAxG,QAAAS,YAAAM,yBACAwF,KAAAE,IAAApB,EAAAiB,EAAAjD,MAAArD,QAAAS,YAAAM,yBAAAf,QAAAS,YAAAI,YAKA,IAAAyE,GAAA,EAAAgB,EAAAhD,OAAAtD,QAAAS,YAAAK,YAAA,CACAwE,IAAAtF,QAAAS,YAAAI,WAAA,EAAAb,QAAAS,YAAAK,WAGA,IACA2E,GADAD,EAAAQ,CAQA,OALAP,GADAS,EACA9B,EAAAkC,EAAAhD,OAEAW,GAIAuB,SAAAA,EACAC,SAAAA,EAAA,GACAI,OAAAG,EACAD,OAAAE,EAAA,GACAZ,OAAAA,EACAC,OAAAA,EACAC,YAAAW,IAQAlG,QAAAS,YAAAkG,UAAA,WACA,QAAA3G,QAAAS,YAAAG,QAQAZ,QAAAS,YAAAmG,YAAA,SAAA9D,GACA,MAAA9C,SAAAS,YAAAG,SAAAkC,IACA9C,QAAAS,YAAAoG,QACA,IAQA7G,QAAAS,YAAAoG,KAAA,WACA7G,QAAAS,YAAAW,eAAA,CAEA,IAAA6D,GAAAjF,QAAAS,YAAAC,IAEAuE,KACAA,EAAAnD,MAAAsD,UAAA,sBACAH,EAAAnD,MAAA6D,QAAA,EACA3F,QAAAS,YAAAS,iBAAA8D,WAAA,WAEAhF,QAAAS,YAAAqG,wBACA,IAAA9G,QAAAS,YAAAQ,iBAEAjB,QAAAS,YAAAU,UACAnB,QAAAS,YAAAU,UACAnB,QAAAS,YAAAU,QAAA,OAKAnB,QAAAS,YAAAqE,iBAAA,WACA9E,QAAAS,YAAAW,eACApB,QAAAS,YAAAoG,QAOA7G,QAAAS,YAAAqG,qBAAA,WACA,GAAA9G,QAAAS,YAAAkG,YAAA,CAGA,GAAA1B,GAAAjF,QAAAS,YAAAC,IACAV,SAAAS,YAAAS,kBAAA2D,OAAAE,aAAA/E,QAAAS,YAAAS,kBACA+D,EAAAnD,MAAAsD,UAAA,GACAH,EAAAnD,MAAAoC,IAAA,GACAe,EAAAnD,MAAAkC,KAAA,GACAiB,EAAAnD,MAAA4D,QAAA,OACA1F,QAAAS,YAAA0B,eACAnC,QAAAS,YAAAgE,iBACAzE,QAAAS,YAAAG,OAAA,KACAZ,QAAAS,YAAAU,UACAnB,QAAAS,YAAAU,UACAnB,QAAAS,YAAAU,QAAA,QC7bAnB,QAAA+G,cAAAC,UAAAC,eAAA,SAAAC,GACA,GAAA/D,GAAAqB,KAAA2C,aAAAhE,SACA,IAAA+D,GAAAlH,QAAAT,IAAA6H,gBAAA,CACA,GAAAC,GAAA7C,KAAA8C,SACAtH,SAAAuH,WACA,IAAAC,GAAA,SAAAN,GACAA,GACA/D,EAAAsE,eAAAJ,EAAAH,GAKA,OAFAA,GAAAlH,QAAA0H,UAAAC,WACA3H,QAAAT,IAAAqI,sBAAAC,QAAA,KAAAR,GAAAA,EAAAG,GACA,KACA,GAAAN,GAAAlH,QAAAT,IAAAuI,gBAAAD,QAAA,KACArD,KAAA8C,WAEA,MADAnE,GAAA4E,eAAAvD,KAAA8C,WACA,MChBAtH,QAAAgI,MAAAhB,UAAAiB,UAAA,SAAAC,GACA,GAAAA,EAEA,CAEA,IAAA,GADAC,GAAA,GACA1E,EAAA,EAAAA,EAAAyE,EAAAvE,OAAAF,IACA,GAAAA,GAAA,aAAArD,QAAA8H,EAAAzE,MAAA,IAEA0E,EAAA,OAGAA,GADA,KAAAD,EAAAzE,GACA,IACA,eAAArD,QAAA8H,EAAAzE,MAAA,EACAyE,EAAAzE,GAEA2E,UAAAF,EAAAzE,IAAAoE,QAAA,SAAA,IAGA,OAAAM,GAhBA,MAAA,WCFAnI,QAAAqI,WAAAC,eACAC,gBAAAC,OAAA,EAAAC,KAAA,EAAAC,OAAA,IAKA1I,QAAAqI,WAAAM,eAAA,SAAAxF,GAqCA,QAAAyF,GAAAC,EAAAC,GACA,IAAA,GAAArF,GAAA,EAAAA,EAAAoF,EAAAlF,OAAAF,IAAA,CACA,GAAAyE,GAAAW,EAAApF,GAAA,GACAsF,EAAAF,EAAApF,GAAA,GAMAV,EAAAzC,KAAAkB,IAAAD,UAAA,QACAwB,GAAAH,aAAA,OAAAkG,GACA/F,EAAAH,aAAA,MAAA,GACA,IAAAoG,GAAA1I,KAAAkB,IAAAD,UAAA,WACAyH,GAAApG,aAAA,OAAAsF,GACAnF,EAAApB,YAAAqH,EACA,KAAA,GAAAC,GAAA,EAAAA,EAAAF,EAAApF,OAAAsF,IAAA,CACA,GAAAC,GAAA5I,KAAAkB,IAAAD,UAAA,MACA2H,GAAAtG,aAAA,OAAAmG,EAAAE,IACAD,EAAArH,YAAAuH,GAEAC,EAAAC,KAAArG,IAxDA,GAAAsG,GAAArJ,QAAAqI,WAAAC,cAAAC,eACAY,IACA,IAAAE,EAAAb,OAAAxI,QAAAK,OAAA,uBAAA,CAEA,GAAA0C,GAAAzC,KAAAkB,IAAAD,UAAA,QACAwB,GAAAH,aAAA,OAAA,0BACAG,EAAAH,aAAA,MAAA,GACA,IAAA0G,GAAAhJ,KAAAkB,IAAAD,UAAA,QAAA,KACAvB,QAAAT,IAAAgK,iCACAD,GAAA1G,aAAA,OAAA,QACAG,EAAApB,YAAA2H,GACAH,EAAAC,KAAArG,GAEA,GAAAsG,EAAAZ,KAAAzI,QAAAK,OAAA,qBAAA,CAEA,GAAA0C,GAAAzC,KAAAkB,IAAAD,UAAA,QACAwB,GAAAH,aAAA,OAAA,wBACAG,EAAAH,aAAA,MAAA,GACA,IAAA0G,GAAAhJ,KAAAkB,IAAAD,UAAA,QAAA,KACAvB,QAAAT,IAAAgK,iCACAD,GAAA1G,aAAA,OAAA,QACAG,EAAApB,YAAA2H,GACAH,EAAAC,KAAArG,GAEA,GAAAsG,EAAAX,OAAA1I,QAAAK,OAAA,oBAAA,CAEA,GAAA0C,GAAAzC,KAAAkB,IAAAD,UAAA,QACAwB,GAAAH,aAAA,OAAA,uBACAG,EAAAH,aAAA,MAAA,IACAuG,EAAAC,KAAArG,GAEAoG,EAAAxF,QAEAwF,EAAAA,EAAAxF,OAAA,GAAAf,aAAA,MAAA,GA2BA,IAAA4G,GAAAxJ,QAAAqI,WAAAoB,cAAAtG,EAGA,OAFAyF,GAAAY,EAAA,GAAA,2BACAZ,EAAAY,EAAA,GAAA,yBACAL,GCjEAnJ,QAAA0J,UAAA1C,UAAA2C,qBAAA,SAAAC,GACA,GAAAC,GAAAD,EAAAE,UAAAF,EAAAG,YAAA,CACAvF,MAAAwF,QAEAH,GAAA7J,QAAA0J,UAAAO,oBAEAzF,KAAA0F,mBAAA3D,KAAAC,IAAA,EAAAqD,GAEA,IAAAM,GAAAP,EAAAQ,aAAAR,EAAAG,YAAA,EACAvF,MAAAwF,OAAAxF,KAAA6F,WAAAC,MACAH,GAAAnK,QAAA0J,UAAAO,mBAIA,IAAAM,GAAAX,EAAAY,YAAAZ,EAAAa,WACAzK,QAAA0J,UAAAO,mBAAA,EACAzF,MAAAkG,YAAAP,EAAAI,GAIA/F,KAAAmG,wBAAAf,IASA5J,QAAA0J,UAAA1C,UAAA2D,wBAAA,SAAAf,GACApF,KAAAwF,OAIAxF,KAAAoG,WAAApG,KAAAqG,gBAAAjB,EAAAkB,cAGAtG,KAAAuG,OAAAvG,KAAAqG,gBAAAjB,EAAAkB,cACAtG,KAAAuG,UAAAC,EAAAA,IAAAxG,KAAAuG,QAAAC,EAAAA,GACAC,MAAAzG,KAAAuG,WACAvG,KAAAuG,OAAA,EAGA,IAAAG,IAAAtB,EAAAE,UAAAF,EAAAG,aAAAvF,KAAAuG,MACAvG,MAAA2G,iBAAA5E,KAAAC,IAAA,EAAA0E,GAEA,IAAAE,IAAAxB,EAAAyB,SAAAzB,EAAA0B,aACA9G,KAAAuG,MACAvG,MAAA+G,kBAAA/G,KAAAgH,iBAAAJ,KCrDApL,QAAAyL,WAAA,SAAAC,GACA,GAAAvI,GAAAnD,QAAA2L,kBACAxI,IAAAA,EAAAyI,WAAA5L,QAAA6L,YAGA7L,QAAA8L,MAAAC,uBACA/L,QAAAgM,IAAAC,UAAAjM,QAAAgM,IAAAE,OAAAC,MACAhJ,EAAAyI,UAAA5L,QAAA6L,UAEA7L,QAAA8L,MAAAM,oBACApM,QAAA0E,aAAA1E,QAAA8L,MAAAM,mBACApM,QAAA8L,MAAAM,kBAAA,MAEApM,QAAAqM,sBACArM,QAAA0E,aAAA1E,QAAAqM,qBACArM,QAAAqM,oBAAA,QCdArM,QAAAsM,OAAAC,MAAA,wFAIAvM,QAAAwM,cACAxM,QAAAwM,gBAGAxM,QAAA4E,qBAAA,SAAA6H,EAAAvE,EAAAwE,EAAAC,EACAC,GACA,GAAAC,IAAA,EACAC,EAAA,SAAApB,GAKA,IAAA,GAAAqB,GAJAC,GAAAJ,EAGAK,EAAAjN,QAAA8L,MAAAoB,oBAAAxB,GACAjI,EAAA,EAAAsJ,EAAAE,EAAAxJ,GAAAA,IACAuJ,IAAAhN,QAAA8L,MAAAqB,kBAAAJ,KAGA/M,QAAA8L,MAAAsB,mBAAAL,GACAL,EACAC,EAAAU,KAAAX,EAAAK,GAEAJ,EAAAI,GAEAF,GAAA,GAIAJ,GAAAa,iBAAApF,EAAA4E,GAAA,GACA9M,QAAAwM,YAAApD,MAAAqD,KAAAA,EAAAvE,KAAAA,EAAAyE,KAAAG,GACA,IAAAS,KAAAd,EAAAvE,EAAA4E,GAGA,IAAA5E,IAAAlI,SAAA8L,MAAA0B,UAQA,IAAA,GAAAC,GAPAC,EAAA,SAAAhC,GACAoB,EAAApB,GAEAmB,GACAnB,EAAAiC,kBAGAlK,EAAA,EACAgK,EAAAzN,QAAA8L,MAAA0B,UAAAtF,GAAAzE,GAAAA,IACAgJ,EAAAa,iBAAAG,EAAAC,GAAA,GACA1N,QAAAwM,YAAApD,MAAAqD,KAAAA,EAAAvE,KAAAuF,EAAAd,KAAAA,IACAY,EAAAnE,MAAAqD,EAAAgB,EAAAC,GAGA,OAAAH,IAKAvN,QAAA4N,aAAA,WACA,IAAA,GAAAnK,GAAA,EAAAA,EAAAzD,QAAAwM,YAAA7I,OAAAF,IAAA,CACA,GAAAoK,GAAA7N,QAAAwM,YAAA/I,EACA,KACAoK,EAAApB,KAAAqB,oBAAAD,EAAA3F,KAAA2F,EAAAlB,MACA,MAAAjB,KAEA1L,QAAA+N,uBACAtM,SAAAqM,oBAAA,UAAA9N,QAAAyL,YACAzL,QAAA+N,sBAAA,GAEA/N,QAAAwM,gBAKAxM,QAAAgO,mBAAA,SAAA9G,EAAA/D,GA0BA,QAAA8K,GAAAxB,EAAAyB,EAAAC,GACA,MAAAC,GAAAhO,QAAA+N,KAAA,OAEAE,EAAArO,QAAAT,IAAA+O,gBAAAzG,QAAA,KAAAsG,IAIA,oBAAAA,GAAA,KAAAjH,EAAAuF,EAAA8B,OAAAC,MAAA/B,EAAAgC,SAAAD,KAAA/B,EAAA+B,KAAA,KAAAtH,EAAAuF,EAAA+B,IAAA,GAMA,cAAAL,GAAAhL,IAEA,OAAAuL,IACAA,EAAAvL,EAAAuL,cAEAA,GAAAA,EAAAtO,QAAAqM,EAAAvE,QAAA,QAEAmG,EAAArO,QAAAT,IAAAoP,eAAA9G,QAAA,KAAA4E,EAAAvE,OAPA,YAJAmG,EAAArO,QAAAT,IAAA+O,gBAAAzG,QAAA,KAAAsG,IAlCA,IACA,GAAAS,GAAA/J,OAAA+J,MAAA/J,OAAA+J,MAAApO,QAAA,SACAqO,EAAAD,EAAAC,KAAAD,EAAAC,KAAArO,QAAA,cACA,MAAAkL,GAEA,MADA7L,SAAAC,MAAA,mEACA,KAIA,GAAAoH,EAAA9G,QAAA,OAAA,EAEA,MAAAJ,SAAAT,IAAAuP,oBAIA,KACA,GAAAC,GAAAH,EAAAI,MAAA9H,GACA,MAAAwE,GAEA,MAAA1L,SAAAT,IAAA0P,kBAGA,GAAAZ,GAAA,KACAK,EAAA,KACAN,GAAA,UAAA,aAAA,mBAAA,kBAAA,kBAAA,mBAAA,sBAAA,UA8BA,OAFAS,GAAAK,KAAAH,EAAAd,GAEAI,GAIArO,QAAAmP,kBAAA,SAAAjI,EAAA/D,GAoBA,QAAAiM,GAAA3C,EAAAyB,EAAAC,GACA,oBAAAA,GACAkB,EAAAjG,MAAAqD,EAAA8B,OAAAC,IAAA/B,EAAA+B,IAAA,IArBA,GAAA,OAAAxO,QAAAgO,mBAAA9G,EAAA/D,GAEA,MAAA,KAGA,KACA,GAAAyL,GAAA/J,OAAA+J,MAAA/J,OAAA+J,MAAApO,QAAA,SACAqO,EAAAD,EAAAC,KAAAD,EAAAC,KAAArO,QAAA,cACA,MAAAkL,GAEA,MADA7L,SAAAC,MAAA,kEACA,KAIA,GAAAiP,GAAAH,EAAAI,MAAA9H,GAGAmI,KACAC,EAAApI,CAQA2H,GAAAK,KAAAH,EAAAK,EAGA,KAAA,GAAA3L,GAAA,EAAAA,EAAA4L,EAAA1L,OAAAF,IAAA,CACA,GAAA8L,GAAAF,EAAA5L,GAAA,GACA+K,EAAAa,EAAA5L,GAAA,EAEA6L,GAAAA,EAAAE,MAAA,EAAAD,EAAA,GAAA,IAAAD,EAAAE,MAAAD,EAAA,EAAAf,GAAA,MAAAc,EAAAE,MAAAhB,EAGA,KAAA,GAAAvF,GAAAxF,EAAA,EAAAwF,EAAAoG,EAAA1L,OAAAsF,IACAsG,EAAAF,EAAApG,GAAA,KACAoG,EAAApG,GAAA,IAAA,GAEAsG,EAAAF,EAAApG,GAAA,KACAoG,EAAApG,GAAA,IAAA,GAEAuF,EAAAa,EAAApG,GAAA,KACAoG,EAAApG,GAAA,IAAA,GAEAuF,EAAAa,EAAApG,GAAA,KACAoG,EAAApG,GAAA,IAAA,GAKA,MAAAqG,ICxLAtP,QAAA0H,UAAAY,eACAmH,KAAA,EACAC,WAAA,EACAC,SACApH,gBAAAqH,KAAA,EAAAC,KAAA,EAAAC,MAAA,GACAC,WAAA,GAIA/P,QAAA0H,UAAAiB,eAAA,SAAAxF,GACA,GAAAgG,MACA6G,EAAAhQ,QAAA0H,UAAAY,cAGA2H,IAAAjQ,QAAA,sBACA,IAAAgQ,EAAAP,IAAA,CACA,GAAAtM,EACA,GAAA+M,GAAA/M,EAAAuL,iBAEA,IAAAsB,EAAAL,MAAAvP,QAAA,WAAA,EAAA,CAEA,IADA,GAAA+P,GAAA,EACAH,EAAAL,MAAAvP,QAAA,SAAA+P,IAAA,GACAA,GAEA,IAAAD,IAAA,SAAAC,OAEA,IAAAD,IAAA,SAGA,KAAA,GAAAzM,GAAA,EAAAA,EAAAuM,EAAAL,MAAAhM,OAAAF,IAAA,CACA,GAAA2M,GAAAF,EAAA9P,QAAA4P,EAAAL,MAAAlM,GACA2M,IAAA,GACAF,EAAAG,OAAAD,EAAA,GAKA,GAFAF,EAAAI,KAAAhQ,KAAAiQ,OAAAC,wBAEAR,EAAAN,UAAA,CACA,GAAAe,GAAAnQ,KAAAkB,IAAAD,UAAA,SACAkP,GAAA7N,aAAA,OAAA5C,QAAAT,IAAAmR,cACAT,IAEAQ,EAAA7N,aAAA,cAAA,mBACA5C,QAAA2Q,uBAAA,kBAAA,SAAAF,GACAzQ,QAAA0H,UAAAkJ,eAAAH,EAAAI,yBAGA1H,EAAAC,KAAAqH,QAGA,IAAAP,KAGA,IAAAxB,GAAAsB,EAAAL,MAAAmB,OAAAZ,EAEA,IAAAxB,EAAA/K,OAAA,EAAA,CACA,GAAAsM,EACA,GAAA/P,IACA0P,IAAA,gBACAC,IAAA,qBACAC,KAAA,6BAGA,IAAA5P,IACA0P,IAAA,gBACAC,IAAA,gBACAC,KAAA,cAIA,IAAAE,EAAAzH,eAAAqH,KAAA5P,QAAAK,OAAAH,EAAA0P,KACA,IAAA,GAAAnM,GAAA,EAAAA,EAAAiL,EAAA/K,OAAAF,IAAA,CAIA,GAAAV,GAAAzC,KAAAkB,IAAAD,UAAA,QAWA,IAVAwB,EAAAH,aAAA,OAAA1C,EAAA0P,KACAnM,EAAAuM,EAAAL,MAAAhM,QACAZ,EAAAH,aAAA,WAAA,SAEAa,GAAAiL,EAAA/K,OAAA,EACAZ,EAAAH,aAAA,MAAA,IAEAG,EAAAH,aAAA,MAAA,GAGAqN,EACA,GAAAc,GAAA/Q,QAAA0H,UAAAsJ,mBAAAtC,EAAAjL,QACA,CACA,GAAAsN,GAAAzQ,KAAAkB,IAAAD,UAAA,QAAA,KAAAmN,EAAAjL,GACAsN,GAAAnO,aAAA,OAAA,OAGAG,EAAApB,YAAAoP,GACA5H,EAAAC,KAAArG,GAIA,GAAAiN,EAAAzH,eAAAsH,KAAA7P,QAAAK,OAAAH,EAAA2P,KACA,IAAA,GAAApM,GAAA,EAAAA,EAAAiL,EAAA/K,UAIAqM,EAAAD,WAAAtM,EAAAuM,EAAAL,MAAAhM,QAJAF,IAAA,CAQA,GAAAV,GAAAzC,KAAAkB,IAAAD,UAAA,QAWA,IAVAwB,EAAAH,aAAA,OAAA1C,EAAA2P,KACApM,EAAAuM,EAAAL,MAAAhM,QACAZ,EAAAH,aAAA,WAAA,SAEAa,GAAAiL,EAAA/K,OAAA,EACAZ,EAAAH,aAAA,MAAA,IAEAG,EAAAH,aAAA,MAAA,GAGAqN,EAAA,CACA,GAAAc,GAAA/Q,QAAA0H,UAAAsJ,mBAAAtC,EAAAjL,GACAV,GAAApB,YAAAoP,GACAhO,EAAApB,YAAA3B,QAAA0H,UAAAuJ,sBACA,CACA,GAAAF,GAAAzQ,KAAAkB,IAAAD,UAAA,QAAA,KAAAmN,EAAAjL,GACAsN,GAAAnO,aAAA,OAAA,OACAG,EAAApB,YAAAoP,GAGA5H,EAAAC,KAAArG,GAGA,GAAAiN,EAAAzH,eAAAuH,MAAA9P,QAAAK,OAAAH,EAAA4P,MACA,IAAA,GAAArM,GAAA,EAAAA,EAAAiL,EAAA/K,UAQAqM,EAAAD,WAAAtM,EAAAuM,EAAAL,MAAAhM,QARAF,IAAA,CAYA,GAAAV,GAAAzC,KAAAkB,IAAAD,UAAA,QAUA,IATAwB,EAAAH,aAAA,OAAA1C,EAAA4P,MACArM,EAAAuM,EAAAL,MAAAhM,QACAZ,EAAAH,aAAA,WAAA,SAEAa,GAAAiL,EAAA/K,OAAA,EACAZ,EAAAH,aAAA,MAAA,IAEAG,EAAAH,aAAA,MAAA,GAEAqN,EAAA,CACA,GAAAc,GAAA/Q,QAAA0H,UAAAsJ,mBAAAtC,EAAAjL,GACAV,GAAApB,YAAAoP,GACAhO,EAAApB,YAAA3B,QAAA0H,UAAAwJ,4BACA,CACA,GAAAC,GAAA7Q,KAAAkB,IAAAD,UAAA,QACA4P,GAAAvO,aAAA,OAAA,SACAG,EAAApB,YAAAwP,EAEA,IAAAC,GAAA9Q,KAAAkB,IAAAD,UAAA,SACA6P,GAAAxO,aAAA,OAAA,eACAuO,EAAAxP,YAAAyP,EAEA,IAAAC,GAAA/Q,KAAAkB,IAAAD,UAAA,QAAA,KAAA,IACA8P,GAAAzO,aAAA,OAAA,OACAwO,EAAAzP,YAAA0P,EAEA,IAAAN,GAAAzQ,KAAAkB,IAAAD,UAAA,QAAA,KAAAmN,EAAAjL,GACAsN,GAAAnO,aAAA,OAAA,OACAG,EAAApB,YAAAoP,GAGA5H,EAAAC,KAAArG,IAKA,MAAAoG,IAMAnJ,QAAA0H,UAAAkJ,eAAA,SAAAzN,GACA,GAAAqE,GAAA,SAAAN,GACAA,IACA/D,EAAAmO,gBAAApK,KAAA,EACAqK,cAAAC,iBAAAxR,QAAAT,IAAAkS,wBAAA5J,QAAA,KACAX,EAAAwK,eAAA,WAEAvO,EAAAyN,eAAA1J,IAKA,OADAlH,SAAA0H,UAAAC,WAAA3H,QAAAT,IAAAoS,mBAAA,GAAAnK,GACA,MAUAxH,QAAA0H,UAAAC,WAAA,SAAAiK,EAAAC,EAAAC,EAAAC,GACA,GAAAvK,GAAA,SAAAwK,GAEA,GAAAA,EAAA,CAGA,GAFAA,EAAAA,EAAAnK,QAAA,aAAA,KAAAA,QAAA,SAAA,IAEA7H,QAAAgI,MAAAhB,UAAAiB,UAAA+J,IAAAA,EAEA,WADAhS,SAAA0H,UAAAC,WAAAiK,EAAAI,EAAAF,GAAA,EAGAE,IAAAhS,QAAAT,IAAA6H,iBACA4K,GAAAhS,QAAAT,IAAAmR,eAEAsB,EAAA,MAGAF,EAAAE,GAGA,IAAAD,EACA,GAAAE,GAAA,MAAAjS,QAAAT,IAAA2S,aAAA,aAAAN,MAEA,IAAAK,GAAAL,CAEAC,GACAN,cAAAC,iBAAAS,EAAA,QAAA,KAAAzK,EAAAxH,QAAAT,IAAA4S,KAAA,KAAAN,GAEAN,cAAAC,iBAAAS,EAAA,QAAA,KAAAzK,IC5OAxH,QAAAoS,aAAApL,UAAAqL,YAAA,SAAAC,EAAAnB,GACA,GAAApO,GAAAyB,KAAA+N,aAAAD,EACA,KAAAvP,EACA,KAAA,qDAEA/C,SAAAS,YAAAc,YACAvB,QAAAS,YAAAqG,uBACA9G,QAAAS,YAAA0B,cACA,IAAAqQ,GAAAxS,QAAAS,YAAAyB,gBACAuQ,EAAAnS,KAAAkB,IAAAkR,cAAA,MACAD,GAAA7P,aAAA,QAAA,kBACA6P,EAAArQ,UAAA+O,EACAqB,EAAA7Q,YAAA8Q,GACAzS,QAAAS,YAAA4B,UAAA,UAAA,WACArC,QAAAS,YAAAoC,sBAAA2B,KAAAzB,IAIA/C,QAAAoS,aAAApL,UAAA2L,UAAA,SAAAC,EAAAC,GACA,GAAAC,GAAA,aAAAF,EAAA,IAAAC,EAAA,WACArO,KAAAtB,MAAA,GACAsB,MAAAuO,iBACAvO,KAAAuO,gBAAAnQ,aAAA,YAAAkQ,GAEAtO,KAAAwO,kBACAxO,KAAAwO,iBAAApQ,aAAA,YAAAkQ,GAEAtO,KAAAyO,aACAzO,KAAAyO,YAAAC,uBAAAN,EAAAC,EAAArO,KAAAtB,QC7BA5D,YAAAC,IAAA4T,MAEA7T,YAAAC,IAAA4T,GAAAC,uBAAA,UACA9T,YAAAC,IAAA4T,GAAAE,qBAAArT,QAAAT,IAAA6T,uBAEA9T,YAAAC,IAAA4T,GAAAG,yBAAA,oBACAhU,YAAAC,IAAA4T,GAAAI,sCAAA,uBACAjU,YAAAC,IAAA4T,GAAAK,oCAAA,GACAlU,YAAAC,IAAA4T,GAAAM,6BAAA,4BACAnU,YAAAC,IAAA4T,GAAAO,2BAAA,OACApU,YAAAC,IAAA4T,GAAAQ,+BAAA,IACArU,YAAAC,IAAA4T,GAAAS,6BAAA,YACAtU,YAAAC,IAAA4T,GAAAU,+BAAA,GACAvU,YAAAC,IAAA4T,GAAAW,0BAAA,GACAxU,YAAAC,IAAA4T,GAAAY,SAAA,cACAzU,YAAAC,IAAA4T,GAAAa,YAAA,OACA1U,YAAAC,IAAA4T,GAAAc,UAAA,sBACA3U,YAAAC,IAAA4T,GAAAe,eAAA,gBACA5U,YAAAC,IAAA4T,GAAAgB,YAAA,gBACA7U,YAAAC,IAAA4T,GAAAiB,YAAA,KAEA9U,YAAAC,IAAA4T,GAAAkB,iBAAA,mBACA/U,YAAAC,IAAA4T,GAAAmB,mBAAA,+DACAhV,YAAAC,IAAA4T,GAAAoB,uBAAA,aACAjV,YAAAC,IAAA4T,GAAAqB,yBAAA,0DAEAlV,YAAAC,IAAA4T,GAAAsB,iBAAA,oCACAnV,YAAAC,IAAA4T,GAAAuB,qBAAA,kCACApV,YAAAC,IAAA4T,GAAAwB,sBAAA,mBACArV,YAAAC,IAAA4T,GAAAyB,yBAAA,4BACAtV,YAAAC,IAAA4T,GAAA0B,2BAAA,eACAvV,YAAAC,IAAA4T,GAAA2B,oBAAA,YACAxV,YAAAC,IAAA4T,GAAA4B,2BAAA,uBACAzV,YAAAC,IAAA4T,GAAA6B,qBAAA,aACA1V,YAAAC,IAAA4T,GAAA8B,uBAAA,oBACA3V,YAAAC,IAAA4T,GAAA+B,uBAAA,eACA5V,YAAAC,IAAA4T,GAAAgC,uBAAA,SACA7V,YAAAC,IAAA4T,GAAAiC,iBAAA,mCACA9V,YAAAC,IAAA4T,GAAAkC,qBAAA,wBACA/V,YAAAC,IAAA4T,GAAAmC,yBAAA,4CAEAhW,YAAAC,IAAA4T,GAAAoC,UAAA,yCACAjW,YAAAC,IAAA4T,GAAAqC,kBAAA,yDACAlW,YAAAC,IAAA4T,GAAAsC,eAAA,mCACAnW,YAAAC,IAAA4T,GAAAuC,uBAAA,2DACApW,YAAAC,IAAA4T,GAAAwC,eAAA,gBACArW,YAAAC,IAAA4T,GAAAyC,uBAAA,8CACAtW,YAAAC,IAAA4T,GAAA0C,WAAA,mBACAvW,YAAAC,IAAA4T,GAAA2C,mBAAA,0CACAxW,YAAAC,IAAA4T,GAAA4C,WAAA,cACAzW,YAAAC,IAAA4T,GAAA6C,mBAAA,qCACA1W,YAAAC,IAAA4T,GAAA8C,WAAA,cACA3W,YAAAC,IAAA4T,GAAA+C,mBAAA,qCAEA5W,YAAAC,IAAA4T,GAAAgD,iCAAA,oFAEA7W,YAAAC,IAAA4T,GAAAiD,6BAAA,wCACA9W,YAAAC,IAAA4T,GAAAkD,sBAAA,mBACA/W,YAAAC,IAAA4T,GAAAmD,sBAAA,+CAEAhX,YAAAC,IAAA4T,GAAAjB,aAAA,yGC5DA5S,YAAAC,IAAA4T,MAEA7T,YAAAC,IAAA4T,GAAAC,uBAAA,UACA9T,YAAAC,IAAA4T,GAAAE,qBAAArT,QAAAT,IAAA6T,uBAEA9T,YAAAC,IAAA4T,GAAAG,yBAAA,mBACAhU,YAAAC,IAAA4T,GAAAI,sCAAA,sBACAjU,YAAAC,IAAA4T,GAAAK,oCAAA,GACAlU,YAAAC,IAAA4T,GAAAM,6BAAA,wBACAnU,YAAAC,IAAA4T,GAAAO,2BAAA,OACApU,YAAAC,IAAA4T,GAAAQ,+BAAA,IACArU,YAAAC,IAAA4T,GAAAS,6BAAA,YACAtU,YAAAC,IAAA4T,GAAAU,+BAAA,GACAvU,YAAAC,IAAA4T,GAAAW,0BAAA,GACAxU,YAAAC,IAAA4T,GAAAY,SAAA,cACAzU,YAAAC,IAAA4T,GAAAa,YAAA,OACA1U,YAAAC,IAAA4T,GAAAc,UAAA,sBACA3U,YAAAC,IAAA4T,GAAAe,eAAA,gBACA5U,YAAAC,IAAA4T,GAAAgB,YAAA,gBACA7U,YAAAC,IAAA4T,GAAAiB,YAAA,KAEA9U,YAAAC,IAAA4T,GAAAkB,iBAAA,gBACA/U,YAAAC,IAAA4T,GAAAmB,mBAAA,+DACAhV,YAAAC,IAAA4T,GAAAoB,uBAAA,WACAjV,YAAAC,IAAA4T,GAAAqB,yBAAA,0DAEAlV,YAAAC,IAAA4T,GAAAsB,iBAAA,oCACAnV,YAAAC,IAAA4T,GAAAuB,qBAAA,kCACApV,YAAAC,IAAA4T,GAAAwB,sBAAA,mBACArV,YAAAC,IAAA4T,GAAAyB,yBAAA,4BACAtV,YAAAC,IAAA4T,GAAA0B,2BAAA,eACAvV,YAAAC,IAAA4T,GAAA2B,oBAAA,YACAxV,YAAAC,IAAA4T,GAAA4B,2BAAA,uBACAzV,YAAAC,IAAA4T,GAAA6B,qBAAA,aACA1V,YAAAC,IAAA4T,GAAA8B,uBAAA,oBACA3V,YAAAC,IAAA4T,GAAA+B,uBAAA,eACA5V,YAAAC,IAAA4T,GAAAgC,uBAAA,SACA7V,YAAAC,IAAA4T,GAAAiC,iBAAA,mCACA9V,YAAAC,IAAA4T,GAAAkC,qBAAA,wBACA/V,YAAAC,IAAA4T,GAAAmC,yBAAA,4CAEAhW,YAAAC,IAAA4T,GAAAoC,UAAA,yCACAjW,YAAAC,IAAA4T,GAAAqC,kBAAA,yDACAlW,YAAAC,IAAA4T,GAAAsC,eAAA,mCACAnW,YAAAC,IAAA4T,GAAAuC,uBAAA,2DACApW,YAAAC,IAAA4T,GAAAwC,eAAA,gBACArW,YAAAC,IAAA4T,GAAAyC,uBAAA,8CACAtW,YAAAC,IAAA4T,GAAA0C,WAAA,mBACAvW,YAAAC,IAAA4T,GAAA2C,mBAAA,0CACAxW,YAAAC,IAAA4T,GAAA4C,WAAA,cACAzW,YAAAC,IAAA4T,GAAA6C,mBAAA,qCACA1W,YAAAC,IAAA4T,GAAA8C,WAAA,cACA3W,YAAAC,IAAA4T,GAAA+C,mBAAA,qCAEA5W,YAAAC,IAAA4T,GAAAgD,iCAAA,uDAEA7W,YAAAC,IAAA4T,GAAAiD,6BAAA,wCACA9W,YAAAC,IAAA4T,GAAAkD,sBAAA,mBACA/W,YAAAC,IAAA4T,GAAAmD,sBAAA,+CAEAhX,YAAAC,IAAA4T,GAAAjB,aAAA,4HC5DA5S,YAAAC,IAAAgX,MAEAjX,YAAAC,IAAAgX,GAAAnD,uBAAA,WACA9T,YAAAC,IAAAgX,GAAAlD,qBAAArT,QAAAT,IAAA6T,uBAEA9T,YAAAC,IAAAgX,GAAAjD,yBAAA,oBACAhU,YAAAC,IAAAgX,GAAAhD,sCAAA,uBACAjU,YAAAC,IAAAgX,GAAA/C,oCAAA,GACAlU,YAAAC,IAAAgX,GAAA9C,6BAAA,wBACAnU,YAAAC,IAAAgX,GAAA7C,2BAAA,QACApU,YAAAC,IAAAgX,GAAA5C,+BAAA,IACArU,YAAAC,IAAAgX,GAAA3C,6BAAA,cACAtU,YAAAC,IAAAgX,GAAA1C,+BAAA,GACAvU,YAAAC,IAAAgX,GAAAzC,0BAAA,GACAxU,YAAAC,IAAAgX,GAAAxC,SAAA,qBACAzU,YAAAC,IAAAgX,GAAAvC,YAAA,KACA1U,YAAAC,IAAAgX,GAAAtC,UAAA,uBACA3U,YAAAC,IAAAgX,GAAArC,eAAA,qBACA5U,YAAAC,IAAAgX,GAAApC,YAAA,kBACA7U,YAAAC,IAAAgX,GAAAnC,YAAA,IAEA9U,YAAAC,IAAAgX,GAAAlC,iBAAA,oBACA/U,YAAAC,IAAAgX,GAAAjC,mBAAA,0EACAhV,YAAAC,IAAAgX,GAAAhC,uBAAA,cACAjV,YAAAC,IAAAgX,GAAA/B,yBAAA,gEAEAlV,YAAAC,IAAAgX,GAAA9B,iBAAA,uCACAnV,YAAAC,IAAAgX,GAAA7B,qBAAA,sCACApV,YAAAC,IAAAgX,GAAA5B,sBAAA,YACArV,YAAAC,IAAAgX,GAAA3B,yBAAA,kCACAtV,YAAAC,IAAAgX,GAAA1B,2BAAA,eACAvV,YAAAC,IAAAgX,GAAAzB,oBAAA,gBACAxV,YAAAC,IAAAgX,GAAAxB,2BAAA,0BACAzV,YAAAC,IAAAgX,GAAAvB,qBAAA,WACA1V,YAAAC,IAAAgX,GAAAtB,uBAAA,yBACA3V,YAAAC,IAAAgX,GAAArB,uBAAA,mBACA5V,YAAAC,IAAAgX,GAAApB,uBAAA,WACA7V,YAAAC,IAAAgX,GAAAnB,iBAAA,gDACA9V,YAAAC,IAAAgX,GAAAlB,qBAAA,iCACA/V,aAAAC,IAAAgX,GAAAjB,yBAAA,kDAEAhW,aAAAC,IAAAgX,GAAAhB,UAAA,uCACAjW,YAAAC,IAAAgX,GAAAf,kBAAA,8DACAlW,YAAAC,IAAAgX,GAAAd,eAAA,yCACAnW,YAAAC,IAAAgX,GAAAb,uBAAA,qEACApW,YAAAC,IAAAgX,GAAAZ,eAAA,iBACArW,YAAAC,IAAAgX,GAAAX,uBAAA,qDACAtW,YAAAC,IAAAgX,GAAAV,WAAA,mBACAvW,YAAAC,IAAAgX,GAAAT,mBAAA,iDACAxW,YAAAC,IAAAgX,GAAAR,WAAA,mBACAzW,YAAAC,IAAAgX,GAAAP,mBAAA,iDACA1W,YAAAC,IAAAgX,GAAAN,WAAA,iBACA3W,YAAAC,IAAAgX,GAAAL,mBAAA,+CAEA5W,YAAAC,IAAAgX,GAAAJ,iCAAA,gFAEA7W,YAAAC,IAAAgX,GAAAH,6BAAA,kDACA9W,YAAAC,IAAAgX,GAAAF,sBAAA,oBACA/W,YAAAC,IAAAgX,GAAAD,sBAAA,mDAEAhX,YAAAC,IAAAgX,GAAArE,aAAA,yIC5DA5S,YAAAC,IAAAiX,MAEAlX,YAAAC,IAAAiX,GAAApD,uBAAA,UACA9T,YAAAC,IAAAiX,GAAAnD,qBAAArT,QAAAT,IAAA6T,uBAEA9T,YAAAC,IAAAiX,GAAAlD,yBAAA,oBACAhU,YAAAC,IAAAiX,GAAAjD,sCAAA,wBACAjU,YAAAC,IAAAiX,GAAAhD,oCAAA,GACAlU,YAAAC,IAAAiX,GAAA/C,6BAAA,0BACAnU,YAAAC,IAAAiX,GAAA9C,2BAAA,MACApU,YAAAC,IAAAiX,GAAA7C,+BAAA,IACArU,YAAAC,IAAAiX,GAAA5C,6BAAA,aACAtU,YAAAC,IAAAiX,GAAA3C,+BAAA,GACAvU,YAAAC,IAAAiX,GAAA1C,0BAAA,GACAxU,YAAAC,IAAAiX,GAAAzC,SAAA,mBACAzU,YAAAC,IAAAiX,GAAAxC,YAAA,KACA1U,YAAAC,IAAAiX,GAAAvC,UAAA,oBACA3U,YAAAC,IAAAiX,GAAAtC,eAAA,kBACA5U,YAAAC,IAAAiX,GAAArC,YAAA,kBACA7U,YAAAC,IAAAiX,GAAApC,YAAA,IAEA9U,YAAAC,IAAAiX,GAAAnC,iBAAA,uBACA/U,YAAAC,IAAAiX,GAAAlC,mBAAA,4FACAhV,YAAAC,IAAAiX,GAAAjC,uBAAA,cACAjV,YAAAC,IAAAiX,GAAAhC,yBAAA,sFAEAlV,YAAAC,IAAAiX,GAAAC,gBAAA,UACAnX,YAAAC,IAAAiX,GAAAE,kBAAA,8CACApX,YAAAC,IAAAiX,GAAAG,kBAAA,+CAEArX,YAAAC,IAAAiX,GAAA1H,qBAAA,0CACAxP,YAAAC,IAAAiX,GAAAvH,kBAAA,+CACA3P,YAAAC,IAAAiX,GAAAlI,gBAAA,+CACAhP,YAAAC,IAAAiX,GAAA7H,eAAA,yDAEArP,YAAAC,IAAAiX,GAAA/B,iBAAA,qCACAnV,YAAAC,IAAAiX,GAAA9B,qBAAA,qCACApV,YAAAC,IAAAiX,GAAA7B,sBAAA,WACArV,YAAAC,IAAAiX,GAAA5B,yBAAA,2BACAtV,YAAAC,IAAAiX,GAAA3B,2BAAA,aACAvV,YAAAC,IAAAiX,GAAA1B,oBAAA,oBACAxV,YAAAC,IAAAiX,GAAAzB,2BAAA,iCACAzV,YAAAC,IAAAiX,GAAAxB,qBAAA,WACA1V,YAAAC,IAAAiX,GAAAvB,uBAAA,wBACA3V,YAAAC,IAAAiX,GAAAtB,uBAAA,sBACA5V,YAAAC,IAAAiX,GAAArB,uBAAA,UACA7V,YAAAC,IAAAiX,GAAApB,iBAAA,uCACA9V,YAAAC,IAAAiX,GAAAnB,qBAAA,8BACA/V,YAAAC,IAAAiX,GAAAlB,yBAAA,gDAEAhW,YAAAC,IAAAiX,GAAAjB,UAAA,oCACAjW,YAAAC,IAAAiX,GAAAhB,kBAAA,+DACAlW,YAAAC,IAAAiX,GAAAf,eAAA,0CACAnW,YAAAC,IAAAiX,GAAAd,uBAAA,qEACApW,YAAAC,IAAAiX,GAAAb,eAAA,iBACArW,YAAAC,IAAAiX,GAAAZ,uBAAA,oDACAtW,YAAAC,IAAAiX,GAAAX,WAAA,oBACAvW,YAAAC,IAAAiX,GAAAV,mBAAA,8CACAxW,YAAAC,IAAAiX,GAAAT,WAAA,cACAzW,YAAAC,IAAAiX,GAAAR,mBAAA,wCACA1W,YAAAC,IAAAiX,GAAAP,WAAA,iBACA3W,YAAAC,IAAAiX,GAAAN,mBAAA,2CAEA5W,YAAAC,IAAAiX,GAAAL,iCAAA,4EAEA7W,YAAAC,IAAAiX,GAAAJ,6BAAA,+CACA9W,YAAAC,IAAAiX,GAAAH,sBAAA,qBACA/W,YAAAC,IAAAiX,GAAAF,sBAAA,iDAEAhX,YAAAC,IAAAiX,GAAAtE,aAAA,8IAEA5S,YAAAC,IAAAiX,GAAAI,eAAA,0EACAtX,YAAAC,IAAAiX,GAAAK,uBAAA;AACAvX,YAAAC,IAAAiX,GAAAM,cAAA,6BACAxX,YAAAC,IAAAiX,GAAAO,sBAAA,8DACAzX,YAAAC,IAAAiX,GAAAQ,cAAA,cACA1X,YAAAC,IAAAiX,GAAAS,sBAAA,mEAEA3X,YAAAC,IAAAiX,GAAAU,eAAA,oFACA5X,YAAAC,IAAAiX,GAAAW,uBAAA,8HACA7X,YAAAC,IAAAiX,GAAAY,cAAA,kCACA9X,YAAAC,IAAAiX,GAAAO,sBAAA,uEACAzX,YAAAC,IAAAiX,GAAAa,cAAA,mBACA/X,YAAAC,IAAAiX,GAAAc,sBAAA,4EAEAhY,YAAAC,IAAAiX,GAAAe,gBAAA,UACAjY,YAAAC,IAAAiX,GAAAgB,eAAA,uCACAlY,YAAAC,IAAAiX,GAAAiB,qBAAA,iDCtFAnY,YAAAoY,aAAA,WACA,IAAA,GAAA3X,KAAAT,aAAAC,IAAAD,YAAAG,aACA,mBAAAO,SAAAT,IAAAQ,KACAC,QAAAT,IAAAQ,GAAAT,YAAAC,IAAAD,YAAAG,aAAAM,KAIAT,YAAAoY,eCRA1X,QAAAK,OAAAsX,SAEA3X,QAAAK,OAAAsX,MAAAC,IAAA,EAGA5X,QAAAK,OAAA,UACAwX,KAAA,WACArT,KAAAnC,UAAArC,QAAAK,OAAAsX,MAAAC,KACApT,KAAAsT,iBAAA,QACAtT,KAAAsT,iBAAA,QACAC,SAAA,QACAC,YAAAhY,QAAAT,IAAAyU,aACAxP,KAAAyT,iBAAA,GACAzT,KAAA0T,WAAA,KAMAlY,QAAAK,OAAA,kBACAwX,KAAA,WACArT,KAAAnC,UAAArC,QAAAK,OAAAsX,MAAAC,KACApT,KAAAsT,iBAAA,QAEAE,YAAAxT,KAAA2T,WAAA,IACAH,YAAA,GAAAhY,SAAAoY,eACApY,QAAAT,IAAAmU,4BACA,QACAsE,YAAAxT,KAAA2T,WAAA,IACAJ,SAAA,QACAC,YAAAhY,QAAAT,IAAAyU,aACAxP,KAAAyT,iBAAA,GACAzT,KAAA0T,WAAA,IAUAC,UAAA,SAAAE,GACA,GAAAA,GAAA7T,KAAA8F,IACA,GAAAgO,GAAA,iYAEA,IAAAA,GAAA,oWAEA,OAAA,IAAAtY,SAAAuY,WAAAD,EAAA,GAAA,GAAA,OAIAtY,QAAAK,OAAA,kBACAwX,KAAA,WACArT,KAAAnC,UAAArC,QAAAK,OAAAsX,MAAAC,KACApT,KAAAsT,iBAAA,QACAE,YAAAhY,QAAAT,IAAA2U,gBACA8D,YAAAxT,KAAA2T,WAAA,IACAH,YAAA,GAAAhY,SAAAoY,eACApY,QAAAT,IAAAmU,4BACA,QACAsE,YAAAxT,KAAA2T,WAAA,IACAJ,SAAA,QACAC,YAAAhY,QAAAT,IAAA4U,aACA3P,KAAAsT,iBAAA,OACAE,YAAAhY,QAAAT,IAAA6U,aACA5P,KAAAyT,iBAAA,GACAzT,KAAAgU,sBAAA,GACAhU,KAAAiU,kBAAA,KAGAzY,QAAAK,OAAA,iBAAA8X,UAAAnY,QAAAK,OAAA,iBAAA8X,UAEAnY,QAAAK,OAAA,WACAwX,KAAA,WACArT,KAAAnC,UAAArC,QAAAK,OAAAsX,MAAAC,KACApT,KAAAsT,iBAAA,QACAC,SAAA,QACAC,YAAAhY,QAAAT,IAAA0U,WACAzP,KAAAyT,iBAAA,GACAzT,KAAA0T,WAAA,EAAA,WAMAlY,QAAAK,OAAA,6BAEAwX,KAAA,WACArT,KAAAnC,UAAArC,QAAAK,OAAAsX,MAAAC,KACApT,KAAAkU,mBACAV,YAAAhY,QAAAT,IAAAgU,uCACA/O,KAAAmU,qBAAA,SACAnU,KAAAoU,WAAA5Y,QAAAT,IAAAiU,qCACAhP,KAAAqU,aAAA,IAIA7Y,QAAAK,OAAA,wBAEAwX,KAAA,WACArT,KAAAnC,UAAArC,QAAAK,OAAAsX,MAAAC,KACApT,KAAAkU,mBACAV,YAAAhY,QAAAT,IAAAqU,8BACApP,KAAAgU,sBAAA,GACAhU,KAAAiU,kBAAA,GACAjU,KAAAoU,WAAA5Y,QAAAT,IAAAsU,gCACArP,KAAAqU,aAAA,IAGA7Y,QAAAK,OAAA,mBAKAwX,KAAA,WACArT,KAAAyT,iBAAA,GACAzT,KAAAnC,UAAArC,QAAAK,OAAAsX,MAAAC,KACApT,KAAAsU,WAAA,EACAtU,KAAAuU,eACAvU,KAAA0T,WAAA,EAAA,QACA1T,KAAAwU,WAAA,GAAAhZ,SAAAiZ,SAAA,4BACAzU,KAAAoU,WAAA5Y,QAAAT,IAAAuU,4BAOAoF,cAAA,SAAA/V,GACA,GAAAgW,GAAA1X,SAAAiR,cAAA,WAEA,OADAyG,GAAAvW,aAAA,QAAA4B,KAAAsU,YACAK,GAOAC,cAAA,SAAAC,GACA7U,KAAAsU,WAAAQ,SAAAD,EAAAE,aAAA,SAAA,IACA/U,KAAAuU,gBAOAA,aAAA,WAEAvU,KAAAgV,SAAA,UACAhV,KAAAiV,YAAA,QAEA,KAAA,GAAAhW,GAAA,EAAAe,KAAAgV,SAAA,QAAA/V,GAAAA,IAEAe,KAAAiV,YAAA,QAAAhW,EAGA,IAAA,GAAAe,KAAAsU,WACAtU,KAAAkU,iBAAA,SACAV,YAAAhY,QAAAT,IAAA+T,8BACA,CACA9O,KAAAkU,iBAAA,SACAV,YAAAhY,QAAAT,IAAAkU,6BACA,KAAA,GAAAhQ,GAAA,EAAAA,EAAAe,KAAAsU,WAAArV,IACAe,KAAAsT,iBAAA,QAAArU,GACAsU,SAAA,MACA2B,SAAA1Z,QAAA2Z,aACA3B,YACA,GAAAhY,SAAAoY,eACApY,QAAAT,IAAAmU,4BACA,MAAAjQ,GACAuU,YAAAhY,QAAAT,IAAAoU,kCAUAiG,UAAA,SAAAzW,GACA,GAAA0W,GACA7Z,QAAA8Z,MAAAC,OAAA5W,EAAA,8BACA0W,GAAAG,SAEA,KAAA,GADAC,GAAAJ,EAAAL,SAAA,SAAAS,WACArH,EAAA,EAAAA,EAAApO,KAAAsU,WAAAlG,IAAA,CACA,GAAAsH,GAAAla,QAAA8Z,MAAAC,OAAA5W,EAAA,yBACA+W,GAAAF,UACAC,EAAAE,QAAAD,EAAAE,oBACAH,EAAAC,EAAAG,eAEA,MAAAR,IAOAS,QAAA,SAAAT,GAKA,IAJA,GAAAK,GAAAL,EAAAU,oBAAA,SAEAC,KACA/W,EAAA,EACAyW,GACAM,EAAA/W,GAAAyW,EAAAO,iBACAP,EAAAA,EAAAG,gBACAH,EAAAG,eAAAK,cACAjX,GAEAe,MAAAsU,WAAArV,EACAe,KAAAuU,cAEA,KAAA,GAAAtV,GAAA,EAAAA,EAAAe,KAAAsU,WAAArV,IACA+W,EAAA/W,IACAe,KAAAgV,SAAA,QAAA/V,GAAAwW,WAAAE,QAAAK,EAAA/W,KASAkX,gBAAA,SAAAd,GAIA,IAFA,GAAAK,GAAAL,EAAAU,oBAAA,SACA3H,EAAA,EACAsH,GAAA,CACA,GAAAU,GAAApW,KAAAgV,SAAA,QAAA5G,EACAsH,GAAAO,iBAAAG,GAAAA,EAAAX,WAAAY,iBACAjI,IACAsH,EAAAA,EAAAG,gBACAH,EAAAG,eAAAK,iBC1OA1a,QAAAK,OAAAya,UAEA9a,QAAAK,OAAAya,OAAAlD,IAAA,IAGA5X,QAAAK,OAAA,WAEAwX,KAAA,WACArT,KAAAnC,UAAArC,QAAAK,OAAAya,OAAAlD,KACApT,KAAAkU,mBACAV,YAAAhY,QAAAT,IAAAgW,WACA/Q,KAAA0T,WAAA,EAAA,UACA1T,KAAAoU,WAAA5Y,QAAAT,IAAAiW,mBACAhR,KAAAuW,gBACAvW,KAAAuW,eAAA/a,QAAAgb,0BAKAhb,QAAAK,OAAA,gBAEAwX,KAAA,WACArT,KAAAnC,UAAArC,QAAAK,OAAAya,OAAAlD,KACApT,KAAAkU,mBACAV,YAAAhY,QAAAT,IAAAoW,gBACAnR,KAAA0T,WAAA,EAAA,UACA1T,KAAAoU,WAAA5Y,QAAAT,IAAAqW,wBACApR,KAAAuW,gBACAvW,KAAAuW,eAAA/a,QAAAgb,0BAKAhb,QAAAK,OAAA,YAEAwX,KAAA,WACArT,KAAAnC,UAAArC,QAAAK,OAAAya,OAAAlD,KACApT,KAAAkU,mBACAV,YAAAhY,QAAAT,IAAAsW,YACArR,KAAA0T,WAAA,EAAA,UACA1T,KAAAoU,WAAA5Y,QAAAT,IAAAuW,oBACAtR,KAAAuW,gBACAvW,KAAAuW,eAAA/a,QAAAgb,0BAKAhb,QAAAK,OAAA,YAEAwX,KAAA,WACArT,KAAAnC,UAAArC,QAAAK,OAAAya,OAAAlD,KACApT,KAAAkU,mBACAV,YAAAhY,QAAAT,IAAAwW,YACAvR,KAAA0T,WAAA,EAAA,UACA1T,KAAAoU,WAAA5Y,QAAAT,IAAAyW,oBACAxR,KAAAuW,gBACAvW,KAAAuW,eAAA/a,QAAAgb,0BAKAhb,QAAAK,OAAA,YAEAwX,KAAA,WACArT,KAAAnC,UAAArC,QAAAK,OAAAya,OAAAlD,KACApT,KAAAkU,mBACAV,YAAAhY,QAAAT,IAAA0W,YACAzR,KAAA0T,WAAA,EAAA,UACA1T,KAAAoU,WAAA5Y,QAAAT,IAAA2W,oBACA1R,KAAAuW,gBACAvW,KAAAuW,eAAA/a,QAAAgb,0BAKAhb,QAAAK,OAAA,gBAEAwX,KAAA,WACArT,KAAAnC,UAAArC,QAAAK,OAAAya,OAAAlD,KACApT,KAAAkU,mBACAV,YAAAhY,QAAAT,IAAAkW,gBACAjR,KAAA0T,WAAA,EAAA,SACA1T,KAAAoU,WAAA5Y,QAAAT,IAAAmW,wBACAlR,KAAAuW,gBACAvW,KAAAuW,eAAA/a,QAAAgb,0BCpFA,mBAAAhb,SAAAK,OAAA4a,QACAjb,QAAAK,OAAA4a,UAGAjb,QAAAK,OAAA4a,MAAArD,IAAA,IAEA5X,QAAAK,OAAA,cAKAwX,KAAA,WACArT,KAAA0W,UACAC,SAAAnb,QAAAT,IAAAkV,iBACA2G,QAEAjN,KAAA,iBACAjG,KAAA,MACAmT,SAAA,UAGAlN,KAAA,cACAjG,KAAA,OACAoT,MAAA,WAGAC,kBAAA,KACAC,cAAA,KACAC,OAAAzb,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAC,QAAA5b,QAAAK,OAAA4a,MAAArD,IACAiE,gBAAA7b,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAG,UAAA,KACAC,eAAA/b,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAK,SAAA,MAGA,IAAAC,GAAAzX,IACAA,MAAAoU,WAAA,WACA,MAAA5Y,SAAAT,IAAAmV,qBAAA7M,QAAA,KACAoU,EAAAC,cAAA,YAMA5c,YAAAE,eAAA,eAAAQ,QAAAK,OAAA,eACAL,QAAAK,OAAA,gBAKAwX,KAAA,WACA,GAAAsE,KACAnc,QAAAT,IAAA6c,oBAAA,QACApc,QAAAT,IAAA4V,uBAAA,UACA3Q,MAAA6X,gBACArc,QAAAT,IAAAsV,2BAAA,eACA7U,QAAAT,IAAAqV,yBAAA,aACA5U,QAAAT,IAAAoV,sBAAA,UACA3U,QAAAT,IAAAyV,qBAAA,SACAhV,QAAAT,IAAA0V,uBAAA,WACAzQ,KAAA8X,WAAAtc,QAAAT,IAAAgd,yBACA/X,KAAAnC,UAAArC,QAAAK,OAAA4a,MAAArD,KACApT,KAAAsT,iBAAA,QACAC,SAAA,SACAC,YAAAhY,QAAAT,IAAAid,+BACAhY,KAAAkU,iBAAA,MACAlU,KAAAkU,iBAAA,aACAV,YAAA,GAAAhY,SAAAyc,cAAAN,GAAA,QACA3X,KAAAsT,iBAAA,MACAtT,KAAAyT,iBAAA,GACAzT,KAAAgU,sBAAA,GACAhU,KAAAiU,kBAAA,GACAjU,KAAAoU,WAAA5Y,QAAAT,IAAAmd,yBACAlY,KAAAmY,WAAA,EAEA,IAAAV,GAAAzX,IACAA,MAAAoU,WAAA,WACA,GAAAgE,GAAAX,EAAAC,cAAA,QACAW,EAAAZ,EAAAC,cAAA,SACAY,EAAA,EACA,QAAAF,EAAA,IAAAC,GACA,IAAA,iBACA,IAAA,eACAC,EAAA9c,QAAAT,IAAAwd,gCACA,MACA,KAAA,YACAD,EAAA9c,QAAAT,IAAAyd,iCACA,MACA,KAAA,WACAF,EAAA9c,QAAAT,IAAA0d,gCACA,MACA,KAAA,aACAH,EAAA9c,QAAAT,IAAA2d,kCACA,MACA,KAAA,oBACA,IAAA,kBACAJ,EAAA9c,QAAAT,IAAA4d,mCACA,MACA,KAAA,eACAL,EAAA9c,QAAAT,IAAA6d,oCACA,MACA,KAAA,cACAN,EAAA9c,QAAAT,IAAA8d,mCACA,MACA,KAAA,gBACAP,EAAA9c,QAAAT,IAAA+d,sCAQA,MALA,cAAAT,GAAA,YAAAA,IACAC,GAAA,KAAA9c,QAAAT,IAAAge,+BACA1V,QAAA,KACAoU,EAAA9Y,UAAA6M,QAAAwN,cAAA,KAAA,OAEAV,KAQA5D,cAAA,WACA,GAAAC,GAAA1X,SAAAiR,cAAA,YACA+K,EAAAjZ,KAAAgV,SAAA,MAAArL,MAAAnO,QAAA0d,WAEA,OADAvE,GAAAvW,aAAA,KAAA6a,GACAtE,GAOAC,cAAA,SAAAC,GAGA,GAAAoE,GAAA,SAAApE,EAAAE,aAAA,KACA/U,MAAAmY,UAAAc,IAQAd,UAAA,SAAAc,GAEAjZ,KAAAiV,YAAA,MACAjV,KAAAiV,YAAA,WAAA,GAEAgE,GACAjZ,KAAAsT,iBAAA,MAAAC,SAAA,UACA/X,QAAAT,IAAAoe,uBACAnZ,KAAAkU,iBAAA,WACAV,YAAAhY,QAAAT,IAAAoe,wBAGAnZ,KAAAkU,iBAAA,KAEA,IAAAkF,GAAA,GAAA5d,SAAAyc,cAAAjY,KAAA6X,cAAA,SAAAlL,GACA,GAAA0M,GAAA,cAAA1M,GAAA,YAAAA,CAEA,IAAA0M,GAAAJ,EAAA,CACA,GAAA1a,GAAAyB,KAAA2C,YAIA,OAHApE,GAAA4Z,UAAAkB,GAEA9a,EAAA+a,cAAA3M,EAAA,SACA,OAIA3M,MAAAuZ,gBAAA,KAAA,aACAvZ,KAAAgV,SAAA,YACAhV,KAAAuZ,gBAAA,UAAA,MAGAvZ,KAAAgV,SAAA,MAAAxB,YAAA4F,EAAA,WAIA5d,QAAAK,OAAA,kBAKAwX,KAAA,WACArT,KAAA0W,UACAC,SAAAnb,QAAAT,IAAA8V,qBACA+F,QAEAjN,KAAA,iBACAjG,KAAA,MACAmT,SAAA,UAGAE,kBAAA,KACAC,cAAA,KACAC,OAAAzb,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAC,QAAA5b,QAAAK,OAAA4a,MAAArD,IACAiE,gBAAA7b,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAG,UAAA,KACAC,eAAA/b,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAK,SAAA,MAGA,IAAAC,GAAAzX,IACAA,MAAAoU,WAAA,WACA,MAAA5Y,SAAAT,IAAA+V,yBAAAzN,QAAA,KACAoU,EAAAC,cAAA,YC1MA5c,YAAAE,eAAA,cAAAQ,QAAAK,OAAA,cAGAL,QAAAK,OAAA,eAKAwX,KAAA,WACA,GAAAmG,KACA,KAAA,OACA,KAAA,QACA,IAAA,OACA,KAAA,QACA,IAAA,OACA,KAAA,QAEAC,IACA,KAAA,OACA,KAAA,QACA,IAAA,OACA,KAAA,QACA,IAAA,OACA,KAAA,QAEAC,EAAA1Z,KAAA8F,IAAA0T,EAAAC,CACAzZ,MAAA8X,WAAAtc,QAAAT,IAAA4e,uBACA3Z,KAAAnC,UAAArC,QAAAK,OAAA+d,MAAAxG,KACApT,KAAA0T,WAAA,EAAA,WACA1T,KAAAsT,iBAAA,KACAtT,KAAAsT,iBAAA,KACAE,YAAA,GAAAhY,SAAAyc,cAAAyB,GAAA,MACA1Z,KAAAyT,iBAAA,EAEA,IAAAgE,GAAAzX,IACAA,MAAAoU,WAAA,WACA,GAAAyF,GAAApC,EAAAC,cAAA,MACAoC,GACAC,GAAAve,QAAAT,IAAAif,yBACAC,IAAAze,QAAAT,IAAAmf,0BACAC,GAAA3e,QAAAT,IAAAqf,yBACAC,IAAA7e,QAAAT,IAAAuf,0BACAC,GAAA/e,QAAAT,IAAAyf,yBACAC,IAAAjf,QAAAT,IAAA2f,0BAEA,OAAAZ,GAAAD,KAEA7Z,KAAA2a,aAAA,KAAA,OAQAC,SAAA,SAAA1T,GACA,GAAA2T,GAAA7a,KAAA+V,oBAAA,KACA+E,EAAA9a,KAAA+V,oBAAA,IAEA,IAAA8E,GAAAC,IACAD,EAAAE,iBAAAC,WAAAF,EAAAC,kBAAA,CAGAvf,QAAAyf,OAAAC,SAAAhU,EAAAiU,MACA,KAAA,GAAAlc,GAAA,EAAAA,EAAAe,KAAA2a,YAAAxb,OAAAF,IAAA,CACA,GAAAV,GAAAyB,KAAA2a,YAAA1b,EACAV,KAAAsc,GAAAtc,IAAAuc,IACAvc,EAAA6c,SACA7c,EAAA8c,mBAGA7f,QAAAyf,OAAAC,UAAA,GAEAlb,KAAA2a,YAAA,GAAAE,EACA7a,KAAA2a,YAAA,GAAAG,Id1EAtf,QAAAK,OAAA,yBACAL,QAAAK,OAAA,uBAAAwX,KAAA,WACA,GAAAvO,GAAA,GAAAtJ,SAAAoY,eAAA,GACApY,QAAAqI,WAAAyX,OACAxW,GAAAyW,eAAA,GACAvb,KAAAkU,mBACAV,YAAAhY,QAAAT,IAAAygB,8BACAhI,YAAA1O,EAAA,QACA0O,YAAA,GAAA,UACAxT,KAAAwU,WAAA,GAAAhZ,SAAAiZ,SAAA,4BACAzU,KAAArB,UAAA6M,QAAAiQ,UACAzb,KAAArB,UAAA6M,QAAAkQ,iBACA1b,KAAArB,UAAA6M,QAAAkQ,gBAAAlQ,QAAAiQ,WACAjgB,QAAAT,IAAA4gB,gCACA3b,KAAA4b,eAAApgB,QAAAT,IAAA4gB,gCAEA3b,KAAAnC,UAAArC,QAAAK,OAAAggB,WAAAzI,KACApT,KAAAoU,WAAA5Y,QAAAT,IAAA+gB,gCACA9b,KAAA8X,WAAAtc,QAAAT,IAAAghB,gCACA/b,KAAAgc,cACAhc,KAAAic,gBAAA,GACAjc,KAAAkc,qBAAA,OAIA1gB,QAAAK,OAAA,uBACAL,QAAAK,OAAA,qBAAAwX,KAAA,WACA,GAAAvO,GAAA,GAAAtJ,SAAAoY,eAAA,GACApY,QAAAqI,WAAAyX,OACAxW,GAAAyW,eAAA,GACAvb,KAAAkU,mBACAV,YAAAhY,QAAAT,IAAAohB,4BACA3I,YAAA1O,EAAA,QACA0O,YAAA,GAAA,UACAxT,KAAAsT,iBAAA,UACA4B,SAAA1Z,QAAA2Z,aACA3B,YAAAhY,QAAAT,IAAAqhB,6BACApc,KAAAwU,WAAA,GAAAhZ,SAAAiZ,SAAA,4BACAzU,KAAArB,UAAA6M,QAAAiQ,UACAzb,KAAArB,UAAA6M,QAAAkQ,iBACA1b,KAAArB,UAAA6M,QAAAkQ,gBAAAlQ,QAAAiQ,WACAjgB,QAAAT,IAAAshB,8BACArc,KAAA4b,eAAApgB,QAAAT,IAAAshB,8BAEArc,KAAAnC,UAAArC,QAAAK,OAAAggB,WAAAzI,KACApT,KAAAoU,WAAA5Y,QAAAT,IAAAuhB,8BACAtc,KAAA8X,WAAAtc,QAAAT,IAAAwhB,8BACAvc,KAAAgc,cACAhc,KAAAic,gBAAA,GACAjc,KAAAkc,qBAAA,OejDA,mBAAA1gB,SAAAK,OAAA2gB,SACAhhB,QAAAK,OAAA2gB,WAGAhhB,QAAAK,OAAA2gB,OAAApJ,IAAA,IAEA5X,QAAAK,OAAA,gBACAwX,KAAA,WACArT,KAAA0W,UACAC,SAAAnb,QAAAT,IAAAqX,eACAwE,QAEAjN,KAAA,iBACAjG,KAAA,MACAmT,SAAArb,QAAAT,IAAAgY,kBAGApJ,KAAA,cACAjG,KAAA,UAGAiG,KAAA,cACAjG,KAAA,SAGAiG,KAAA,cACAjG,KAAA,SAGA+Y,cAAA,EACA1F,kBAAA,KACAC,cAAA,KACAC,OAAAzb,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAC,QAAA5b,QAAAK,OAAA2gB,OAAApJ,IACAiE,gBAAA7b,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAG,UAAA,KACAC,eAAA/b,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAK,SAAA,MAGA,IAAAC,GAAAzX,IACAA,MAAAoU,WAAA,WACA,MAAA5Y,SAAAT,IAAAsX,uBAAAhP,QAAA,KACAoU,EAAAC,cAAA,YAKAlc,QAAAK,OAAA,eACAwX,KAAA,WACArT,KAAA0W,UACAC,SAAAnb,QAAAT,IAAAuX,cACAsE,QAEAjN,KAAA,iBACAjG,KAAA,MACAmT,SAAArb,QAAAT,IAAAgY,kBAGApJ,KAAA,cACAjG,KAAA,SAGAiG,KAAA,cACAjG,KAAA,QAGAiG,KAAA,cACAjG,KAAA,SAGA+Y,cAAA,EACA1F,kBAAA,KACAC,cAAA,KACAC,OAAAzb,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAC,QAAA5b,QAAAK,OAAA2gB,OAAApJ,IACAiE,gBAAA7b,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAG,UAAA,KACAC,eAAA/b,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAK,SAAA,MAGA,IAAAC,GAAAzX,IACAA,MAAAoU,WAAA,WACA,MAAA5Y,SAAAT,IAAA2hB,sBAAArZ,QAAA,KACAoU,EAAAC,cAAA,YAKAlc,QAAAK,OAAA,eACAwX,KAAA,WACArT,KAAA0W,UACAC,SAAAnb,QAAAT,IAAAyX,cACAoE,QAEAjN,KAAA,iBACAjG,KAAA,MACAmT,SAAArb,QAAAT,IAAAgY,kBAGApJ,KAAA,cACAjG,KAAA,SAGAiG,KAAA,cACAjG,KAAA,QAGA+Y,cAAA,EACAE,OAAA,KACAC,YAAAphB,QAAAqhB,mBACA5F,OAAAzb,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAC,QAAA5b,QAAAK,OAAA2gB,OAAApJ,IACAiE,gBAAA7b,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAG,UAAA,KACAC,eAAA/b,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAK,SAAA,MAGA,IAAAC,GAAAzX,IACAA,MAAAoU,WAAA,WACA,MAAA5Y,SAAAT,IAAA0X,sBAAApP,QAAA,KACAoU,EAAAC,cAAA,YAKAlc,QAAAK,OAAA,gBACAwX,KAAA,WACArT,KAAA0W,UACAC,SAAAnb,QAAAT,IAAA2X,eACAkE,QAEAjN,KAAA,iBACAjG,KAAA,MACAmT,SAAArb,QAAAT,IAAAgY,kBAGApJ,KAAA,cACAjG,KAAA,SACAoT,MAAA,WAGAnN,KAAA,cACAjG,KAAA,UAGAiG,KAAA,cACAjG,KAAA,SAGAiG,KAAA,cACAjG,KAAA,SAGA+Y,cAAA,EACA1F,kBAAA,KACAC,cAAA,KACAC,OAAAzb,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAC,QAAA5b,QAAAK,OAAA2gB,OAAApJ,IACAiE,gBAAA7b,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAG,UAAA,KACAC,eAAA/b,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAK,SAAA,MAGA,IAAAC,GAAAzX,IACAA,MAAAoU,WAAA,WACA,MAAA5Y,SAAAT,IAAA4X,uBAAAtP,QAAA,KACAoU,EAAAC,cAAA,YAKAlc,QAAAK,OAAA,eACAwX,KAAA,WACArT,KAAA0W,UACAC,SAAAnb,QAAAT,IAAA6X,cACAgE,QAEAjN,KAAA,iBACAjG,KAAA,MACAmT,SAAArb,QAAAT,IAAAgY,kBAGApJ,KAAA,cACAjG,KAAA,UAGAiG,KAAA,cACAjG,KAAA,SAGAiG,KAAA,cACAjG,KAAA,QAGAiG,KAAA,cACAjG,KAAA,SAGA+Y,cAAA,EACA1F,kBAAA,KACAC,cAAA,KACAC,OAAAzb,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAC,QAAA5b,QAAAK,OAAA2gB,OAAApJ,IACAiE,gBAAA7b,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAG,UAAA,KACAC,eAAA/b,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAK,SAAA,MAGA,IAAAC,GAAAzX,IACAA,MAAAoU,WAAA,WACA,MAAA5Y,SAAAT,IAAAwX,sBAAAlP,QAAA,KACAoU,EAAAC,cAAA,YAKAlc,QAAAK,OAAA,eACAwX,KAAA,WACArT,KAAA0W,UACAC,SAAAnb,QAAAT,IAAA8X,cACA+D,QAEAjN,KAAA,iBACAjG,KAAA,MACAmT,SAAArb,QAAAT,IAAAgY,kBAGApJ,KAAA,cACAjG,KAAA,UAGAiG,KAAA,cACAjG,KAAA,SAGAiG,KAAA,cACAjG,KAAA,QAGA+Y,cAAA,EACAE,OAAA,KACAC,YAAAphB,QAAAqhB,mBACA5F,OAAAzb,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAC,QAAA5b,QAAAK,OAAA2gB,OAAApJ,IACAiE,gBAAA7b,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAG,UAAA,KACAC,eAAA/b,QAAA0b,QAAA1b,QAAA0b,QAAAC,KAAAK,SAAA,MAGA,IAAAC,GAAAzX,IACAA,MAAAoU,WAAA,WACA,MAAA5Y,SAAAT,IAAA+X,sBAAAzP,QAAA,KACAoU,EAAAC,cAAA,YChPAlc,QAAAK,OAAA,kBAKAwX,KAAA,WACArT,KAAA0W,UACAC,SAAAnb,QAAAT,IAAAgV,uBACA6G,QAEAjN,KAAA,cACAjG,KAAA,SAGAqT,kBAAA,KACAC,cAAA,KACAC,OAAAzb,QAAA0b,QAAA1b,QAAA0b,QAAA4F,MAAA1F,QAAA5b,QAAAK,OAAAihB,MAAA1J,IACAiE,gBAAA7b,QAAA0b,QAAA1b,QAAA0b,QAAA4F,MAAAxF,UAAA,KACAC,eAAA/b,QAAA0b,QAAA1b,QAAA0b,QAAA4F,MAAAtF,SAAA,KACAc,QAAA9c,QAAAT,IAAAiV,yBACA+M,QAAAvhB,QAAAT,IAAAiiB,uBAKAxhB,QAAAK,OAAA,WAEAwX,KAAA,WACA7X,QAAA0b,QACAlX,KAAAnC,UAAArC,QAAA0b,QAAA4F,MAAA1F,QAAA5b,QAAA0b,QAAA4F,MAAAxF,UAAA9b,QAAA0b,QAAA4F,MAAAtF,UAEAxX,KAAAnC,UAAArC,QAAAK,OAAAihB,MAAA1J,IAEA,IAAA6J,GAAA,GAAAzhB,SAAAoY,eAAA,IAGA6D,EAAAzX,KACAkd,EAAA,IACAD,GAAAE,UAAA,SAAAza,GACA,GAAA0a,GAAA,IACAthB,MAAAuhB,QAAAC,aAAA9hB,QAAAoY,eAAA2J,WACA,IAAAC,GAAAhiB,QAAAoY,eAAA2J,UACAvd,MAAA2C,eAEAya,EAAA5hB,QAAAgO,mBAAAgU,EAAA7Q,MAAA3M,KAAA2C,aAAAhE,YAEA,OAAAye,GACA5hB,QAAAiiB,UAAAD,EAAA,uBACAN,GAAA3c,aAAA2c,GACAA,EAAA1c,WAAA,WACAiX,EAAAiG,eAAAliB,QAAAT,IAAAoX,kBAAA9O,QAAA,KAAA+Z,IACAH,EAAAU,iBACA,OAEAniB,QAAAoiB,aAAAJ,EAAA,uBACA/F,EAAAiG,eAAA,MACAR,IACA3c,aAAA2c,GACAA,EAAA,QAKAld,KAAAkU,mBACAV,YAAAhY,QAAAT,IAAAkX,iBACAuB,YAAAyJ,EAAA,QACAjd,KAAA0T,WAAA,GACA1T,KAAAoU,WAAA5Y,QAAAT,IAAAmX,qBC/DA1W,QAAAqiB,WAAAxK,KAAA,SAAA1U,GAEAnD,QAAAqiB,WAAAC,aAAAC,OAAAC,OAAA,MAGAxiB,QAAAqiB,WAAAI,eAAAF,OAAAC,OAAA,MAEAxiB,QAAAqiB,WAAAK,YAIA1iB,QAAAqiB,WAAAK,YAAAC,QAHA3iB,QAAAqiB,WAAAK,YACA,GAAA1iB,SAAAgI,MAAAhI,QAAAqiB,WAAAO,kBAaA5iB,QAAAqiB,WAAAQ,OAAA,SAAAtS,GAMA,MAHAA,GAAAA,EAAA1I,QAAA,MAAA,QACAA,QAAA,MAAA,QACAA,QAAA,KAAA,OACA,IAAA0I,EAAA,KAIAvQ,QAAAqiB,WAAA,aAAA,SAAAtf,GAEA,GAAA+f,GAAA9iB,QAAAqiB,WAAAK,YAAAK,QACAhgB,EAAAmZ,cAAA,OAAAlc,QAAA0H,UAAAsb,WACAC,EAAAjjB,QAAAqiB,WAAAa,YAAAngB,EAAA,OACA/C,QAAAqiB,WAAAc,mBAAA,IACAC,EAAApjB,QAAAqiB,WAAAa,YAAAngB,EAAA,KACA/C,QAAAqiB,WAAAc,mBAAA,IACAE,EAAArjB,QAAAqiB,WAAAa,YAAAngB,EAAA,KACA/C,QAAAqiB,WAAAc,mBAAA,IACAG,EAAAtjB,QAAAqiB,WAAAkB,gBAAAxgB,EAAA,KACAugB,GAAAtjB,QAAAqiB,WAAAmB,YAAAF,EAAAvgB,EAAAuP,GACA,IAAAmR,EACA,IAAAzjB,QAAA0jB,SAAAT,IAAAjjB,QAAA0jB,SAAAN,IACApjB,QAAA0jB,SAAAL,GAAA,CAEA,GAAAM,GAAAC,WAAAX,IAAAW,WAAAR,EACAK,GAAA,YAAAX,EAAA,MAAAG,EAAA,KACAH,GAAAa,EAAA,OAAA,QAAAP,EAAA,KACAN,CACA,IAAAe,GAAAtd,KAAAud,IAAAF,WAAAP,GAEAI,IADA,GAAAI,EACAF,EAAA,KAAA,MAEAA,EAAA,OAAA,QAAAE,EAEAJ,GAAA,QAAAH,EAAA,UACA,CACAG,EAAA,EAEA,IAAAM,GAAAd,CACAA,GAAAe,MAAA,UAAAhkB,QAAA0jB,SAAAT,KACAc,EAAA/jB,QAAAqiB,WAAAK,YAAAuB,gBACAnB,EAAA,SAAA9iB,QAAA0H,UAAAsb,WACAS,GAAA,OAAAM,EAAA,MAAAd,EAAA,MAEA,IAAAiB,GAAAd,CACA,KAAAA,EAAAY,MAAA,WAAAhkB,QAAA0jB,SAAAN,GAAA,CACA,GAAAc,GAAAlkB,QAAAqiB,WAAAK,YAAAuB,gBACAnB,EAAA,OAAA9iB,QAAA0H,UAAAsb,UACAS,IAAA,OAAAS,EAAA,MAAAd,EAAA,MAIA,GAAAe,GAAAnkB,QAAAqiB,WAAAK,YAAAuB,gBACAnB,EAAA,OAAA9iB,QAAA0H,UAAAsb,UACAS,IAAA,OAAAU,EAAA,MAEAV,GADAzjB,QAAA0jB,SAAAL,GACA9c,KAAAud,IAAAT,GAAA,MAEA,YAAAA,EAAA,OAEAI,GAAA,OAAAM,EAAA,MAAAG,EAAA,QACAT,GAAAzjB,QAAAqiB,WAAA+B,OAAAD,EAAA,OAAAA,EAAA,MACAV,GAAA,MACAA,GAAA,QAAAX,EAAA,MAAAiB,EAAA,KACAI,EAAA,WACArB,EAAA,OAAAoB,EAAA,MACApB,EAAA,OAAAoB,EAAA,KACApB,EAAA,OAAAqB,EAAA,QACAb,EAAA,MAEA,MAAAG,IAGAzjB,QAAAqiB,WAAA,cAAA,SAAAtf,GAEA,GAAAkgB,GAAAjjB,QAAAqiB,WAAAa,YAAAngB,EAAA,QACA/C,QAAAqiB,WAAAc,mBAAA,IACAkB,EAAArkB,QAAAqiB,WAAAK,YAAAK,QACAhgB,EAAAmZ,cAAA,OAAAlc,QAAA0H,UAAAsb,UACA,OAAA,OAAAqB,EAAA,MAAApB,EAAA,OCvGAjjB,QAAAskB,OAAAzM,KAAA,SAAA1U,GAIAnD,QAAAskB,OAAAC,KAAA/f,KAAA4f,OAAA,SAEApkB,QAAAskB,OAAAhC,aAAAC,OAAAC,OAAA,MAGAxiB,QAAAskB,OAAA7B,eAAAF,OAAAC,OAAA,MAEAxiB,QAAAskB,OAAA5B,YAIA1iB,QAAAskB,OAAA5B,YAAAC,QAHA3iB,QAAAskB,OAAA5B,YACA,GAAA1iB,SAAAgI,MAAAhI,QAAAskB,OAAA1B,kBAYA5iB,QAAAskB,OAAAzB,OAAA,SAAAtS,GAMA,MAJAA,GAAAA,EAAA1I,QAAA,MAAA,QACAA,QAAA,MAAA,QACAA,QAAA,MAAA,OACAA,QAAA,KAAA,OACA,IAAA0I,EAAA,KPnCAvQ,QAAAqiB,WAAA,SAAA,SAAAtf,GACA,GAAAyhB,GAAAxkB,QAAAqiB,WAAAa,YAAAngB,EAAA,OACA/C,QAAAqiB,WAAAoC,eAAA,MACAtT,EAAAnR,QAAAqiB,WAAAa,YAAAngB,EAAA,OACA/C,QAAAqiB,WAAAqC,aAAA,MACAjB,EAAAe,EAAA,IAAArT,CACA,QAAAsS,EAAAzjB,QAAAqiB,WAAAsC,eAIA3kB,QAAAqiB,WAAA,iBAAA,SAAAtf,GACA,GAAAyhB,GAAAxkB,QAAAqiB,WAAAa,YAAAngB,EAAA,OACA/C,QAAAqiB,WAAAoC,eAAA,MACAtT,EAAApO,EAAAmZ,cAAA,QACAuH,EAAAe,EAAA,IAAArT,CACA,QAAAsS,EAAAzjB,QAAAqiB,WAAAsC,eAIA3kB,QAAAqiB,WAAA,iBAAA,SAAAtf,GACA,GAAAyhB,GAAAxkB,QAAAqiB,WAAAa,YAAAngB,EAAA,OACA/C,QAAAqiB,WAAAoC,eAAA,MACAG,EAAA7hB,EAAAmZ,cAAA,QACA/K,EAAAnR,QAAAskB,OAAApB,YAAAngB,EAAA,MACA/C,QAAAskB,OAAAI,aAAA,MACAjB,EAAAe,EAAA,IAAAI,EAAA,MAAAzT,EAAA,KACA,OAAAsS,IAIAzjB,QAAAqiB,WAAA,kBAAA,SAAAtf,GAKA,IAAA,GAFA0gB,IAFAzjB,QAAAqiB,WAAAa,YAAAngB,EAAA,OAAA/C,QAAAqiB,WAAAsC,cAEA,GAAAE,OAAA9hB,EAAA+V,aAEAgM,EAAA,EAAAA,EAAA/hB,EAAA+V,WAAAgM,IAAA,CACA,GAAAF,GAAA7hB,EAAAmZ,cAAA,MAAA4I,GACA3T,EAAAnR,QAAAqiB,WAAAa,YAAAngB,EAAA,QAAA+hB,EACA9kB,QAAAqiB,WAAAqC,aAAA,KACAjB,GAAAqB,GAAAF,EAAA,KAAAzT,EAGA,MADAsS,GAAA,WAAAA,EAAAsB,KAAA,MAAA,MACAtB,EAAAzjB,QAAAqiB,WAAAsC,eAGA3kB,QAAAqiB,WAAA,UAAA,SAAAtf,GACA,GAAAyhB,GAAAxkB,QAAAqiB,WAAAa,YAAAngB,EAAA,OACA/C,QAAAqiB,WAAAoC,eAAA,MACAhB,EAAA,eAAAe,EAAA,GACA,QAAAf,EAAAzjB,QAAAqiB,WAAAsC,eCjDA3kB,QAAAqiB,WAAA,UAAA,SAAAtf,GACA/C,QAAAqiB,WAAAC,aAAA,YAAA,mNAQA,IAAAmB,GAAA,uBACA,QAAAA,EAAAzjB,QAAAqiB,WAAAsC,eAGA3kB,QAAAqiB,WAAA,eAAA,SAAAtf,GACA/C,QAAAqiB,WAAAC,aAAA,YAAA,oNAQAtiB,QAAAqiB,WAAAC,aAAA,WAAA,mTAUA,IAAAmB,GAAA,wBACA,QAAAA,EAAAzjB,QAAAqiB,WAAAsC,eAGA3kB,QAAAqiB,WAAA,WAAA,SAAAtf,GACA/C,QAAAqiB,WAAAC,aAAA,YAAA,oNAQAtiB,QAAAqiB,WAAAC,aAAA,WAAA,uDAKA,IAAAmB,GAAA,cACA,QAAAA,EAAAzjB,QAAAqiB,WAAAsC,eAGA3kB,QAAAqiB,WAAA,WAAA,SAAAtf,GACA/C,QAAAqiB,WAAAC,aAAA,YAAA,oNAQAtiB,QAAAqiB,WAAAC,aAAA,WAAA,mTAUA,IAAAmB,GAAA,cACA,QAAAA,EAAAzjB,QAAAqiB,WAAAsC,eAGA3kB,QAAAqiB,WAAA,WAAA,SAAAtf,GACA/C,QAAAqiB,WAAAC,aAAA,YAAA,mNAQA,IAAAmB,GAAA,aACA,QAAAA,EAAAzjB,QAAAqiB,WAAAsC,eAGA3kB,QAAAqiB,WAAA,eAAA,SAAAtf,GACA/C,QAAAqiB,WAAAC,aAAA,YAAA,oNAQAtiB,QAAAqiB,WAAAC,aAAA,eAAA,wLAOA,IAAAmB,GAAA,kBACA,QAAAA,EAAAzjB,QAAAqiB,WAAAsC,eC3GA3kB,QAAAqiB,WAAA,aAAA,SAAAtf,GAEA,GAAAshB,GAAArkB,QAAAqiB,WAAAK,YAAAK,QAAAhgB,EAAAmZ,cAAA,OACAlc,QAAA0H,UAAAsb,WACA7R,EAAAnR,QAAAqiB,WAAAa,YAAAngB,EAAA,OACA/C,QAAAqiB,WAAAqC,aAAA,KACA,OAAAL,GAAA,SAAAlT,EAAA,QAGAnR,QAAAqiB,WAAA,iBAAA,SAAAtf,GAKA/C,QAAAqiB,WAAAC,aAAA,eAAA,iKAUA,IAAA+B,GAAArkB,QAAAqiB,WAAAK,YAAAK,QAAAhgB,EAAAmZ,cAAA,OACAlc,QAAA0H,UAAAsb,UACA,OAAAqB,GAAA,4BAGArkB,QAAAqiB,WAAA,eAAA,SAAAtf,GAWA,QAAAiiB,KACA,GAAAC,EAAAjB,MAAA,SACA,MAAA,EAEA,IAAAkB,GAAAllB,QAAAqiB,WAAAK,YAAAuB,gBACA,UAAAjkB,QAAA0H,UAAAsb,WACAS,EAAA,OAAAyB,EAAA,MAAAD,EAAA,KAEA,OADAA,GAAAC,EACAzB,EAhBA,GAAAwB,GAAAjlB,QAAAqiB,WAAAa,YAAAngB,EAAA,OACA/C,QAAAqiB,WAAAoC,eAAA,KACA7H,EAAA7Z,EAAAmZ,cAAA,SAAA,MACAW,EAAA9Z,EAAAmZ,cAAA,UAAA,aACA/K,EAAAnR,QAAAqiB,WAAAa,YAAAngB,EAAA,KACA/C,QAAAqiB,WAAAc,mBAAA,MAaA,QAAAtG,GACA,IAAA,QACA,GAAA,OAAAD,EACA,MAAAqI,GAAA,SAAA9T,EAAA,KACA,IAAA,UAAAyL,EACA,MAAAqI,GAAA,YAAA9T,EAAA,MAEA,MACA,KAAA,OACA,GAAA,OAAAyL,EAAA,CACA,GAAA6G,GAAAuB,GAEA,OADAvB,IAAAwB,EAAA,IAAAA,EAAA,kBAAA9T,EAAA,MAEA,GAAA,UAAAyL,EACA,MAAAqI,GAAA,SAAA9T,EAAA,MAEA,MACA,KAAA,aACA,GAAAgU,GAAAnlB,QAAAqiB,WAAA+C,YAAAriB,EAAA,KACA,IAAA,OAAA6Z,EAAA,CACA,GAAA6G,GAAA,MAAA0B,EAAA,iDAEA,OADA1B,IAAAwB,EAAA,IAAAE,EAAA,OAAAhU,EAAA,MAEA,GAAA,UAAAyL,EACA,MAAAqI,GAAA,WAAAE,EAAA,QAAAhU,EAAA,MAEA,MACA,KAAA,WACA,GAAAgU,GAAAnlB,QAAAqiB,WAAA+C,YAAAriB,EAAA,KAAA,GAAA,EACA/C,QAAAqiB,WAAAgD,mBACA5B,EAAAuB,GACA,IAAA,OAAApI,EAGA,MAFA6G,IAAA,MAAAwB,EAAA,aAAAE,EAAA,kDACA1B,GAAAwB,EAAA,IAAAA,EAAA,aAAAE,EAAA,OAAAhU,EAAA,KAEA,IAAA,UAAAyL,EAGA,MAFA6G,IAAAwB,EAAA,WAAAA,EAAA,aAAAE,EAAA,QAAAhU,EACA,MAGA,MACA,KAAA,SACA,GAAAsS,GAAAuB,IACAM,EAAAtlB,QAAAqiB,WAAAK,YAAAuB,gBACA,OAAAjkB,QAAA0H,UAAAsb,UAGA,IAFAS,GAAA,OAAA6B,EAAA,iCAAAL,EACA,cACA,OAAArI,EAEA,MADA6G,IAAAwB,EAAA,IAAAK,EAAA,OAAAnU,EAAA,KAEA,IAAA,UAAAyL,EAEA,MADA6G,IAAAwB,EAAA,WAAAK,EAAA,QAAAnU,EAAA,OAKA,KAAA,2CM1GAnR,QAAAqiB,WAAA,oBAAA,SAAAtf,GAEA,GAAAA,EAAAwiB,SAAA,SAEA,GAAAC,GAAAC,OAAAC,OAAA3iB,EAAAmZ,cAAA,eAGA,IAAAsJ,GAAAxlB,QAAAqiB,WAAAa,YAAAngB,EAAA,QACA/C,QAAAqiB,WAAAc,mBAAA,GAEA,IAAAG,GAAAtjB,QAAAqiB,WAAAkB,gBAAAxgB,EAAA,KACAugB,GAAAtjB,QAAAqiB,WAAAmB,YAAAF,EAAAvgB,EAAAuP,GACA,IAAAmR,GAAA,GACAkC,EAAA3lB,QAAAqiB,WAAAK,YAAAuB,gBACA,OAAAjkB,QAAA0H,UAAAsb,WACAkB,EAAAsB,CACA,KAAAA,EAAAxB,MAAA,WAAAhkB,QAAA0jB,SAAA8B,GAAA,CACA,GAAAtB,GAAAlkB,QAAAqiB,WAAAK,YAAAuB,gBACA,aAAAjkB,QAAA0H,UAAAsb,UACAS,IAAA,OAAAS,EAAA,MAAAsB,EAAA,MAMA,MAJA/B,IAAA,YAAAkC,EAAA,SACAA,EAAA,MAAAzB,EAAA,KACAyB,EAAA,UACArC,EAAA,OAIAtjB,QAAAqiB,WAAA,gBACAriB,QAAAqiB,WAAA,oBC7BAriB,QAAAqiB,WAAA,YAAA,SAAAtf,GAEA,GAAAkgB,GAAAjjB,QAAAqiB,WAAAa,YAAAngB,EAAA,QACA/C,QAAAqiB,WAAAuD,iBAAA,IACAvB,EAAArkB,QAAAqiB,WAAAK,YAAAK,QACAhgB,EAAAmZ,cAAA,OAAAlc,QAAA0H,UAAAsb,WACA6C,EAAAxB,EAAA,cAAAA,EAAA,kBAAAA,EACA,WAAApB,EAAA,MAGA6C,EAAA,qBAAA/iB,EAAAuP,GAAA,MAAA+R,EAAA,MAAAA,EAAA,OAEA,OAAAwB,GAAAC,GLZA9lB,QAAAqiB,WAAA,eAAA,SAAAtf,GACA,GAAAgjB,GAAAhjB,EAAAmZ,cAAA,MACA,IAAA6J,EACA,GAAA1B,GAAArkB,QAAAqiB,WAAAK,YAAAK,QAAAgD,EAAA/lB,QAAA0H,UAAAsb,eAEA,IAAAqB,GAAA,kBAIArkB,SAAAqiB,WAAAC,aAAA,eAAA,gFAEAtiB,QAAAT,IAAAiY,eAAA,+MAYA,IAAAwO,GAAAhmB,QAAAqiB,WAAAa,YAAAngB,EAAA,QAAA/C,QAAAqiB,WAAA4D,cAAA,IACAC,EAAAlmB,QAAAqiB,WAAAa,YAAAngB,EAAA,OAAA/C,QAAAqiB,WAAA4D,cAAA,IACA9U,EAAAnR,QAAAqiB,WAAAa,YAAAngB,EAAA,OACA/C,QAAAqiB,WAAAc,mBAAA,MAEA,OAAA,OAAAkB,EAAA,kBAAA2B,EAAA,KAAAE,EAAA,KAAA/U,EAAA,QAGAnR,QAAAqiB,WAAA,cAAA,SAAAtf,GACA,GAAAgjB,GAAAhjB,EAAAmZ,cAAA,MACA,IAAA6J,EACA,GAAA1B,GAAArkB,QAAAqiB,WAAAK,YAAAK,QAAAgD,EAAA/lB,QAAA0H,UAAAsb,eAEA,IAAAqB,GAAA;AAGA,GAAA2B,GAAAhmB,QAAAqiB,WAAA+C,YAAAriB,EAAA,QACAmjB,EAAAlmB,QAAAqiB,WAAA+C,YAAAriB,EAAA,OACAoO,EAAAnR,QAAAqiB,WAAAa,YAAAngB,EAAA,OACA/C,QAAAqiB,WAAAc,mBAAA,OAEAM,EAAA,aAAAY,EAAA,IAAA2B,EAAA,8BAAA3B,EAAA,IAAA2B,EAAA,KAAAE,EAAA,+BAAAlmB,QAAAT,IAAAkY,qBAAA,QAEA,OADAgM,IAAAY,EAAA,IAAA2B,EAAA,KAAAE,EAAA,OAAA/U,EAAA,OAIAnR,QAAAqiB,WAAA,cAAA,SAAAtf,GACA,GAAAgjB,GAAAhjB,EAAAmZ,cAAA,MACA,IAAA6J,EACA,GAAA1B,GAAArkB,QAAAqiB,WAAAK,YAAAK,QAAAgD,EAAA/lB,QAAA0H,UAAAsb,eAEA,IAAAqB,GAAA,kBAGA,IAAA2B,GAAAhmB,QAAAqiB,WAAA+C,YAAAriB,EAAA,QACAmjB,EAAAlmB,QAAAqiB,WAAA+C,YAAAriB,EAAA,OACA0gB,EAAAY,EAAA,IAAA2B,EAAA,KAAAE,EAAA,GACA,QAAAzC,EAAAzjB,QAAAqiB,WAAAoC,eAGAzkB,QAAAqiB,WAAA,eAAA,SAAAtf,GACA,GAAAgjB,GAAAhjB,EAAAmZ,cAAA,MACA,IAAA6J,EACA,GAAA1B,GAAArkB,QAAAqiB,WAAAK,YAAAK,QAAAgD,EAAA/lB,QAAA0H,UAAAsb,eAEA,IAAAqB,GAAA,kBAIArkB,SAAAqiB,WAAAC,aAAA,eAAA,kGAEAtiB,QAAAT,IAAAiY,eAAA,wTAgBA,IAAAwO,GAAAhmB,QAAAqiB,WAAAa,YAAAngB,EAAA,SAAA/C,QAAAqiB,WAAA4D,cAAA,IACAC,EAAAlmB,QAAAqiB,WAAAa,YAAAngB,EAAA,QAAA/C,QAAAqiB,WAAA4D,cAAA,IACAE,EAAAnmB,QAAAqiB,WAAAa,YAAAngB,EAAA,OAAA/C,QAAAqiB,WAAA4D,cAAA,IACA9U,EAAAnR,QAAAqiB,WAAAa,YAAAngB,EAAA,OACA/C,QAAAqiB,WAAAc,mBAAA,MAEA,OAAA,OAAAkB,EAAA,kBAAA2B,EAAA,KAAAE,EAAA,KAAAC,EAAA,KAAAhV,EAAA,QAGAnR,QAAAqiB,WAAA,cAAA,SAAAtf,GACA,GAAAgjB,GAAAhjB,EAAAmZ,cAAA,MACA,IAAA6J,EACA,GAAA1B,GAAArkB,QAAAqiB,WAAAK,YAAAK,QAAAgD,EAAA/lB,QAAA0H,UAAAsb,eAEA,IAAAqB,GAAA,kBAGA,IAAA2B,GAAAhmB,QAAAqiB,WAAA+C,YAAAriB,EAAA,SACAmjB,EAAAlmB,QAAAqiB,WAAA+C,YAAAriB,EAAA,QACAojB,EAAAnmB,QAAAqiB,WAAA+C,YAAAriB,EAAA,OACAoO,EAAAnR,QAAAqiB,WAAAa,YAAAngB,EAAA,OACA/C,QAAAqiB,WAAAc,mBAAA,OAEAM,EAAA,aAAAY,EAAA,IAAA2B,EAAA,8BAAA3B,EAAA,IAAA2B,EAAA,KAAAE,EAAA,8BAAA7B,EAAA,IAAA2B,EAAA,KAAAE,EAAA,KAAAC,EAAA,+BAAAnmB,QAAAT,IAAAkY,qBAAA,QAEA,OADAgM,IAAAY,EAAA,IAAA2B,EAAA,KAAAE,EAAA,KAAAC,EAAA,OAAAhV,EAAA,OAIAnR,QAAAqiB,WAAA,cAAA,SAAAtf,GACA,GAAAgjB,GAAAhjB,EAAAmZ,cAAA,MACA,IAAA6J,EACA,GAAA1B,GAAArkB,QAAAqiB,WAAAK,YAAAK,QAAAgD,EAAA/lB,QAAA0H,UAAAsb,eAEA,IAAAqB,GAAA,kBAGA,IAAA2B,GAAAhmB,QAAAqiB,WAAA+C,YAAAriB,EAAA,SACAmjB,EAAAlmB,QAAAqiB,WAAA+C,YAAAriB,EAAA,QACAojB,EAAAnmB,QAAAqiB,WAAA+C,YAAAriB,EAAA,OACA0gB,EAAAY,EAAA,IAAA2B,EAAA,KAAAE,EAAA,KAAAC,EAAA,GACA,QAAA1C,EAAAzjB,QAAAqiB,WAAAoC,eClIAzkB,QAAAqiB,WAAA,iBAAAriB,QAAAqiB,WAAA,WAEAriB,QAAAqiB,WAAA,UAAA,SAAAtf,GACA,GAAAqjB,GAAArjB,EAAAmZ,cAAA,QACAmK,EAAArmB,QAAAmP,kBAAAiX,EACA,OAAA,QAAAC,GACA,QAAArmB,QAAAqiB,WAAAsC,eAEA0B,EAAArmB,QAAAqiB,WAAAqC,aZRA1kB,QAAAqiB,WAAA,cAAA,SAAAtf,GAEA,GAAAkgB,GAAAjjB,QAAAqiB,WAAAa,YAAAngB,EAAA,QACA/C,QAAAqiB,WAAAc,mBAAA,IACAkB,EAAArkB,QAAAqiB,WAAAK,YAAAK,QACAhgB,EAAAmZ,cAAA,OAAAlc,QAAA0H,UAAAsb,WACAsD,EAAAjC,EAAA,MAAApB,EAAA,MAGA6C,EAAA,qBAAA/iB,EAAAuP,GAAA,MAAA+R,EAAA,MAAAA,EAAA,OAEA,OAAAiC,GAAAR,GOXA9lB,QAAAskB,OAAA,SAAA,SAAAvhB,GACA,GAAAyhB,GAAAxkB,QAAAskB,OAAApB,YAAAngB,EAAA,OACA/C,QAAAskB,OAAAG,eAAA,MACAtT,EAAAnR,QAAAskB,OAAApB,YAAAngB,EAAA,OACA/C,QAAAskB,OAAAI,aAAA,MACAjB,EAAAe,EAAA,IAAArT,EAAA,GACA,QAAAsS,EAAAzjB,QAAAskB,OAAAK,eAIA3kB,QAAAskB,OAAA,iBAAA,SAAAvhB,GACA,GAAAyhB,GAAAxkB,QAAAskB,OAAApB,YAAAngB,EAAA,OACA/C,QAAAskB,OAAAG,eAAA,MACAtT,EAAAnR,QAAAskB,OAAAzB,OAAA9f,EAAAmZ,cAAA,SACAuH,EAAAe,EAAA,IAAArT,EAAA,GACA,QAAAsS,EAAAzjB,QAAAskB,OAAAK,eAIA3kB,QAAAskB,OAAA,iBAAA,SAAAvhB,GACA,GAAAyhB,GAAAxkB,QAAAskB,OAAApB,YAAAngB,EAAA,OACA/C,QAAAskB,OAAAG,eAAA,MACAG,EAAA5kB,QAAAskB,OAAAzB,OAAA9f,EAAAmZ,cAAA,SACA/K,EAAAnR,QAAAskB,OAAApB,YAAAngB,EAAA,MACA/C,QAAAskB,OAAAI,aAAA,MACAjB,EAAAe,EAAA,IAAAI,EAAA,OAAAzT,EAAA,IACA,OAAAsS,IAIAzjB,QAAAskB,OAAA,kBAAA,SAAAvhB,GAKA,IAAA,GAFA0gB,IAFAzjB,QAAAskB,OAAApB,YAAAngB,EAAA,OAAA/C,QAAAskB,OAAAK,cAEA,GAAAE,OAAA9hB,EAAA+V,aAEAgM,EAAA,EAAAA,EAAA/hB,EAAA+V,WAAAgM,IAAA,CACA,GAAAF,GAAA5kB,QAAAskB,OAAAzB,OAAA9f,EAAAmZ,cAAA,MAAA4I,IACA3T,EAAAnR,QAAAskB,OAAApB,YAAAngB,EAAA,QAAA+hB,EACA9kB,QAAAskB,OAAAI,aAAA,KACAjB,GAAAqB,GAAAF,EAAA,KAAAzT,EAGA,MADAsS,GAAA,IAAAA,EAAAsB,KAAA,MAAA,KACAtB,EAAAzjB,QAAAskB,OAAAK,eAGA3kB,QAAAskB,OAAA,UAAA,SAAAvhB,GACA,GAAAyhB,GAAAxkB,QAAAskB,OAAApB,YAAAngB,EAAA,OACA/C,QAAAskB,OAAAG,eAAA,MACAhB,EAAAe,EAAA,SACA,QAAAf,EAAAzjB,QAAAskB,OAAAK,eCjDA3kB,QAAAskB,OAAA,UAAA,SAAAvhB,GACA,GAAA0gB,GAAA,cACA,QAAAA,EAAAzjB,QAAAskB,OAAAK,eAGA3kB,QAAAskB,OAAA,eAAA,SAAAvhB,GAEA/C,QAAAskB,OAAAhC,aAAA,WAAA,aACAtiB,QAAAskB,OAAAhC,aAAA,8BAAA,gCACAtiB,QAAAskB,OAAAhC,aAAA,WAAA,oPAUA,IAAAmB,GAAA,mBACA,QAAAA,EAAAzjB,QAAAskB,OAAAK,eAGA3kB,QAAAskB,OAAA,WAAA,SAAAvhB,GACA/C,QAAAskB,OAAAhC,aAAA,WAAA,YACA,IAAAmB,GAAA,mBACA,QAAAA,EAAAzjB,QAAAskB,OAAAK,eAGA3kB,QAAAskB,OAAA,WAAA,SAAAvhB,GACA/C,QAAAskB,OAAAhC,aAAA,WAAA,aACAtiB,QAAAskB,OAAAhC,aAAA,8BAAA,gCACAtiB,QAAAskB,OAAAhC,aAAA,WAAA,oPAUA,IAAAmB,GAAA,cACA,QAAAA,EAAAzjB,QAAAskB,OAAAK,eAGA3kB,QAAAskB,OAAA,WAAA,SAAAvhB,GACA/C,QAAAskB,OAAAhC,aAAA,WAAA,YACA,IAAAmB,GAAA,2BACA,QAAAA,EAAAzjB,QAAAskB,OAAAK,eAGA3kB,QAAAskB,OAAA,eAAA,SAAAvhB,GACA,GAAA0gB,GAAA,iCACA,QAAAA,EAAAzjB,QAAAskB,OAAAK,eCtDA3kB,QAAAskB,OAAA,aAAA,SAAAvhB,GAEA,GAAAshB,GAAArkB,QAAAskB,OAAA5B,YAAAK,QAAAhgB,EAAAmZ,cAAA,OACAlc,QAAA0H,UAAAsb,WACA7R,EAAAnR,QAAAskB,OAAApB,YAAAngB,EAAA,OACA/C,QAAAskB,OAAAI,aAAA,KACA,OAAAL,GAAA,WAAAlT,EAAA,OAGAnR,QAAAskB,OAAA,eAAA,SAAAvhB,GAWA,QAAAiiB,KACA,GAAAC,EAAAjB,MAAA,SACA,MAAA,EAEA,IAAAkB,GAAAllB,QAAAskB,OAAA5B,YAAAuB,gBACA,WAAAjkB,QAAA0H,UAAAsb,WACAS,EAAAyB,EAAA,MAAAD,EAAA,IAEA,OADAA,GAAAC,EACAzB,EAcA,QAAA8C,GAAAC,EAAAC,EAAAC,GAGA,MAAAzB,GAAA,IAAAwB,EAAA,OAAAC,EAAA,KAjCA,GAAAzB,GAAAjlB,QAAAskB,OAAApB,YAAAngB,EAAA,OACA/C,QAAAskB,OAAAG,eAAA,KACA7H,EAAA7Z,EAAAmZ,cAAA,SAAA,MACAW,EAAA9Z,EAAAmZ,cAAA,UAAA,aACA/K,EAAAnR,QAAAskB,OAAApB,YAAAngB,EAAA,KACA/C,QAAAskB,OAAAI,aAAA,MA+BA,QAAA7H,GACA,IAAA,QACA,GAAA,OAAAD,EACA,MAAA2J,GAAAtB,EAAA,EAAA9T,EACA,IAAA,UAAAyL,EACA,MAAAqI,GAAA,cAAA9T,EAAA,KAEA,MACA,KAAA,OACA,GAAA,OAAAyL,EACA,MAAA2J,GAAAtB,GAAA,EAAA9T,EACA,IAAA,UAAAyL,EACA,MAAAqI,GAAA,WAAA9T,EAAA,KAEA,MACA,KAAA,aACA,GAAAgU,GAAAnlB,QAAAskB,OAAAqC,eAAA5jB,EAAA,KACA,IAAA,OAAA6Z,EACA,MAAA2J,GAAAtB,EAAAE,EAAAhU,EACA,IAAA,UAAAyL,EACA,MAAAqI,GAAA,WAAAE,EAAA,KAAAhU,EAAA,KAEA,MACA,KAAA,WACA,GAAAgU,GAAAnlB,QAAAskB,OAAAqC,eAAA5jB,EAAA,KAAA,GAAA,EACA,IAAA,OAAA6Z,EACA,MAAA2J,GAAAtB,EAAAE,EAAAhU,EACA,IAAA,UAAAyL,EACA,MAAAqI,GAAA,WAAAE,EAAA,KAAAhU,EAAA,KAEA,MACA,KAAA,SACAnR,QAAAskB,OAAAhC,aAAA,cAAA,eACA,IAAAmB,GAAAuB,IACAM,EAAAtlB,QAAAskB,OAAA5B,YAAAuB,gBACA,QAAAjkB,QAAA0H,UAAAsb,UAEA,IADAS,GAAA6B,EAAA,gCAAAL,EAAA,OACA,OAAArI,EAEA,MADA6G,IAAA8C,EAAAtB,EAAAK,EAAAnU,EAEA,IAAA,UAAAyL,EAEA,MADA6G,IAAAwB,EAAA,WAAAK,EAAA,KAAAnU,EAAA,MAKA,KAAA,2CAGAnR,QAAAskB,OAAA,iBAAA,SAAAvhB,GACA,GAAAshB,GAAArkB,QAAAskB,OAAA5B,YAAAK,QAAAhgB,EAAAmZ,cAAA,OACAlc,QAAA0H,UAAAsb,UACA,OAAAqB,GAAA,aMpGArkB,QAAAskB,OAAA,oBAAA,SAAAvhB,GAEA,GAAAA,EAAAwiB,SAAA,SAEA,GAAAC,GAAAC,OAAAnM,SAAAvW,EAAAmZ,cAAA,SAAA,SAGA,IAAAsJ,GAAAxlB,QAAAskB,OAAApB,YAAAngB,EAAA,QACA/C,QAAAskB,OAAAI,aAAA,GAGAc,GADAxlB,QAAA0jB,SAAA8B,GACAlM,SAAAkM,EAAA,IAEA,OAAAA,EAAA,GAEA,IAAAlC,GAAAtjB,QAAAskB,OAAAf,gBAAAxgB,EAAA,KACAugB,GAAAtjB,QAAAskB,OAAAd,YAAAF,EAAAvgB,EAAAuP,KACAtS,QAAAskB,OAAAC,IACA,IAAAoB,GAAA3lB,QAAAskB,OAAA5B,YAAAuB,gBACA,OAAAjkB,QAAA0H,UAAAsb,WACAS,EAAA,OAAAkC,EAAA,aAAAH,EAAA,OAAAlC,CACA,OAAAG,IAGAzjB,QAAAskB,OAAA,gBAAAtkB,QAAAskB,OAAA,oBJxBAtkB,QAAAskB,OAAA,eAAA,SAAAvhB,GACA,GAAAgjB,GAAAhjB,EAAAmZ,cAAA,MACA,IAAA6J,EACA,GAAA1B,GAAArkB,QAAAskB,OAAA5B,YAAAK,QAAAgD,EAAA/lB,QAAA0H,UAAAsb,eAEA,IAAAqB,GAAA,kBAIArkB,SAAAskB,OAAAhC,aAAA,eAAA,mFAEAtiB,QAAAT,IAAAiY,eAAA,4CAGA,IAAAwO,GAAAhmB,QAAAskB,OAAApB,YAAAngB,EAAA,QAAA/C,QAAAskB,OAAA2B,cAAA,IACAC,EAAAlmB,QAAAskB,OAAApB,YAAAngB,EAAA,OAAA/C,QAAAskB,OAAA2B,cAAA,IACA9U,EAAAnR,QAAAskB,OAAApB,YAAAngB,EAAA,OACA/C,QAAAskB,OAAAnB,mBAAA,MAEA,OAAAkB,GAAA,kBAAA2B,EAAA,KAAAE,EAAA,KAAA/U,EAAA,QAGAnR,QAAAskB,OAAA,cAAA,SAAAvhB,GACA,GAAAgjB,GAAAhjB,EAAAmZ,cAAA,MACA,IAAA6J,EACA,GAAA1B,GAAArkB,QAAAskB,OAAA5B,YAAAK,QAAAgD,EAAA/lB,QAAA0H,UAAAsb,eAEA,IAAAqB,GAAA,kBAGA,IAAA2B,GAAAhmB,QAAAskB,OAAAqC,eAAA5jB,EAAA,QACAmjB,EAAAlmB,QAAAskB,OAAAqC,eAAA5jB,EAAA,OACAoO,EAAAnR,QAAAskB,OAAApB,YAAAngB,EAAA,OACA/C,QAAAskB,OAAAI,aAAA,OAEAjB,EAAA,EAIA,OADAA,IAAAY,EAAA,IAAA2B,EAAA,KAAAE,EAAA,OAAA/U,EAAA,MAIAnR,QAAAskB,OAAA,cAAA,SAAAvhB,GACA,GAAAgjB,GAAAhjB,EAAAmZ,cAAA,MACA,IAAA6J,EACA,GAAA1B,GAAArkB,QAAAskB,OAAA5B,YAAAK,QAAAgD,EAAA/lB,QAAA0H,UAAAsb,eAEA,IAAAqB,GAAA,kBAGA,IAAA2B,GAAAhmB,QAAAskB,OAAAqC,eAAA5jB,EAAA,QACAmjB,EAAAlmB,QAAAskB,OAAAqC,eAAA5jB,EAAA,OACA0gB,EAAAY,EAAA,IAAA2B,EAAA,KAAAE,EAAA,GACA,QAAAzC,EAAAzjB,QAAAskB,OAAAG,eAGAzkB,QAAAskB,OAAA,eAAA,SAAAvhB,GACA,GAAAgjB,GAAAhjB,EAAAmZ,cAAA,MACA,IAAA6J,EACA,GAAA1B,GAAArkB,QAAAskB,OAAA5B,YAAAK,QAAAgD,EAAA/lB,QAAA0H,UAAAsb,eAEA,IAAAqB,GAAA,kBAIArkB,SAAAskB,OAAAhC,aAAA,eAAA,qGAEAtiB,QAAAT,IAAAiY,eAAA,gEAGA,IAAAwO,GAAAhmB,QAAAskB,OAAApB,YAAAngB,EAAA,SAAA/C,QAAAskB,OAAA2B,cAAA,IACAC,EAAAlmB,QAAAskB,OAAApB,YAAAngB,EAAA,QAAA/C,QAAAskB,OAAA2B,cAAA,IACAE,EAAAnmB,QAAAskB,OAAApB,YAAAngB,EAAA,OAAA/C,QAAAskB,OAAA2B,cAAA,IACA9U,EAAAnR,QAAAskB,OAAApB,YAAAngB,EAAA,OACA/C,QAAAskB,OAAAnB,mBAAA,MAEA,OAAAkB,GAAA,kBAAA2B,EAAA,KAAAE,EAAA,KAAAC,EAAA,KAAAhV,EAAA,QAGAnR,QAAAskB,OAAA,cAAA,SAAAvhB,GACA,GAAAgjB,GAAAhjB,EAAAmZ,cAAA,MACA,IAAA6J,EACA,GAAA1B,GAAArkB,QAAAskB,OAAA5B,YAAAK,QAAAgD,EAAA/lB,QAAA0H,UAAAsb,eAEA,IAAAqB,GAAA,kBAGA,IAAA2B,GAAAhmB,QAAAskB,OAAAqC,eAAA5jB,EAAA,SACAmjB,EAAAlmB,QAAAskB,OAAAqC,eAAA5jB,EAAA,QACAojB,EAAAnmB,QAAAskB,OAAAqC,eAAA5jB,EAAA,OACAoO,EAAAnR,QAAAskB,OAAApB,YAAAngB,EAAA,OACA/C,QAAAskB,OAAAI,aAAA,OAEAjB,EAAA,EAIA,OADAA,IAAAY,EAAA,IAAA2B,EAAA,KAAAE,EAAA,KAAAC,EAAA,OAAAhV,EAAA,MAIAnR,QAAAskB,OAAA,cAAA,SAAAvhB,GACA,GAAAgjB,GAAAhjB,EAAAmZ,cAAA,MACA,IAAA6J,EACA,GAAA1B,GAAArkB,QAAAskB,OAAA5B,YAAAK,QAAAgD,EAAA/lB,QAAA0H,UAAAsb,eAEA,IAAAqB,GAAA,kBAGA,IAAA2B,GAAAhmB,QAAAskB,OAAAqC,eAAA5jB,EAAA,SACAmjB,EAAAlmB,QAAAskB,OAAAqC,eAAA5jB,EAAA,QACAojB,EAAAnmB,QAAAskB,OAAAqC,eAAA5jB,EAAA,OACA0gB,EAAAY,EAAA,IAAA2B,EAAA,KAAAE,EAAA,KAAAC,EAAA,GACA,QAAA1C,EAAAzjB,QAAAskB,OAAAG,eChHAzkB,QAAAskB,OAAA,iBAAA,SAAAvhB,GAEA,GAAAsL,GAAArO,QAAAskB,OAAApB,YAAAngB,EAAA,OACA/C,QAAAskB,OAAAI,aAAA,IACA,OAAA,SAAArW,EAAA,eAGArO,QAAAskB,OAAA,UAAA,SAAAvhB,GACA,GAAAqjB,GAAArjB,EAAAmZ,cAAA,QACAmK,EAAArmB,QAAAmP,kBAAAiX,EACA,OAAA,QAAAC,GACA,QAAArmB,QAAAskB,OAAAK,eAEA0B,EAAArmB,QAAAskB,OAAAI","file":"fioi-blockly.min.js","sourcesContent":["FioiBlockly = {};\nFioiBlockly.Msg = {};\nFioiBlockly.OriginalBlocks = {};\n\nFioiBlockly.defaultLang = 'fr';\n\nFioiBlockly.langErrorDisplayed = {};\n\n// Import messages for a language\nFioiBlockly.loadLanguage = function(lang) {\n  if(!FioiBlockly.Msg[lang] && !FioiBlockly.langErrorDisplayed[lang]) {\n    console.error(\"Language \"+lang+\" doesn't exist in fioi-blockly!\");\n    FioiBlockly.langErrorDisplayed[lang] = true; // Avoid spamming console\n    return;\n  }\n\n  for(var msgName in FioiBlockly.Msg[lang]) {\n    Blockly.Msg[msgName] = FioiBlockly.Msg[lang][msgName];\n  }\n};\n\n// Get back original Blockly blocks\nFioiBlockly.reimportOriginalBlocks = function(blockNames) {\n  for(var blockName in FioiBlockly.OriginalBlocks) {\n    if(!blockNames || blockNames.indexOf(blockName) != -1) {\n      Blockly.Blocks[blockName] = FioiBlockly.OriginalBlocks[blockName];\n    }\n  }\n};\n","/**\n * @license\n * Visual Blocks Editor\n *\n * Copyright 2016 Massachusetts Institute of Technology\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview A div that floats on top of the workspace, for drop-down menus.\n * The drop-down can be kept inside the workspace, animate in/out, etc.\n * @author tmickel@mit.edu (Tim Mickel)\n */\n\n'use strict';\n\ngoog.provide('Blockly.DropDownDiv');\n\ngoog.require('goog.dom');\ngoog.require('goog.style');\n\n/**\n * Class for drop-down div.\n * @constructor\n */\nBlockly.DropDownDiv = function() {\n};\n\n/**\n * The div element. Set once by Blockly.DropDownDiv.createDom.\n * @type {Element}\n * @private\n */\nBlockly.DropDownDiv.DIV_ = null;\n\n/**\n * Drop-downs will appear within the bounds of this element if possible.\n * Set in Blockly.DropDownDiv.setBoundsElement.\n * @type {Element}\n * @private\n */\nBlockly.DropDownDiv.boundsElement_ = null;\n\n/**\n * The object currently using the drop-down.\n * @type {Object}\n * @private\n */\nBlockly.DropDownDiv.owner_ = null;\n\n/**\n * Arrow size in px. Should match the value in CSS (need to position pre-render).\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.ARROW_SIZE = 16;\n\n/**\n * Drop-down border size in px. Should match the value in CSS (need to position the arrow).\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.BORDER_SIZE = 1;\n\n/**\n * Amount the arrow must be kept away from the edges of the main drop-down div, in px.\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.ARROW_HORIZONTAL_PADDING = 12;\n\n/**\n * Amount drop-downs should be padded away from the source, in px.\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.PADDING_Y = 20;\n\n/**\n * Length of animations in seconds.\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.ANIMATION_TIME = 0.25;\n\n/**\n * Timer for animation out, to be cleared if we need to immediately hide\n * without disrupting new shows.\n * @type {number}\n */\nBlockly.DropDownDiv.animateOutTimer_ = null;\n\n/**\n * Callback for when the drop-down is hidden.\n * @type {Function}\n */\nBlockly.DropDownDiv.onHide_ = 0;\n\n// Don't hide a DropDownDiv we're showing\nBlockly.DropDownDiv.isInAnimation = false;\nBlockly.DropDownDiv.isInAnimationTimer = null;\n\n// Is the mousedown listener active?\nBlockly.DropDownDiv.listenerActive = false;\n\n/**\n * Create and insert the DOM element for this div.\n * @param {Element} container Element that the div should be contained in.\n */\nBlockly.DropDownDiv.createDom = function() {\n  if (Blockly.DropDownDiv.DIV_) {\n    return;  // Already created.\n  }\n  Blockly.DropDownDiv.DIV_ = goog.dom.createDom('div', 'blocklyDropDownDiv');\n  document.body.appendChild(Blockly.DropDownDiv.DIV_);\n  Blockly.DropDownDiv.content_ = goog.dom.createDom('div', 'blocklyDropDownContent');\n  Blockly.DropDownDiv.DIV_.appendChild(Blockly.DropDownDiv.content_);\n  Blockly.DropDownDiv.arrow_ = goog.dom.createDom('div', 'blocklyDropDownArrow');\n  Blockly.DropDownDiv.DIV_.appendChild(Blockly.DropDownDiv.arrow_);\n\n  // Transition animation for transform: translate() and opacity.\n  Blockly.DropDownDiv.DIV_.style.transition = 'transform ' +\n    Blockly.DropDownDiv.ANIMATION_TIME + 's, ' +\n    'opacity ' + Blockly.DropDownDiv.ANIMATION_TIME + 's';\n};\n\n/**\n * Set an element to maintain bounds within. Drop-downs will appear\n * within the box of this element if possible.\n * @param {Element} boundsElement Element to bound drop-down to.\n */\nBlockly.DropDownDiv.setBoundsElement = function(boundsElement) {\n  Blockly.DropDownDiv.boundsElement_ = boundsElement;\n};\n\n/**\n * Provide the div for inserting content into the drop-down.\n * @return {Element} Div to populate with content\n */\nBlockly.DropDownDiv.getContentDiv = function() {\n  return Blockly.DropDownDiv.content_;\n};\n\n/**\n * Clear the content of the drop-down.\n */\nBlockly.DropDownDiv.clearContent = function() {\n  Blockly.DropDownDiv.content_.innerHTML = '';\n};\n\n/**\n * Set the colour for the drop-down.\n * @param {string} backgroundColour Any CSS color for the background\n * @param {string} borderColour Any CSS color for the border\n */\nBlockly.DropDownDiv.setColour = function(backgroundColour, borderColour) {\n  Blockly.DropDownDiv.DIV_.style.backgroundColor = backgroundColour;\n  Blockly.DropDownDiv.DIV_.style.borderColor = borderColour;\n};\n\n/**\n * Set the category for the drop-down.\n * @param {string} category The new category for the drop-down.\n */\nBlockly.DropDownDiv.setCategory = function(category) {\n  Blockly.DropDownDiv.DIV_.setAttribute('data-category', category);\n};\n\n// Modified: find blocklyPath\nBlockly.DropDownDiv.showPositionedByBlock = function(owner, block,\n      opt_onHide, opt_secondaryYOffset) {\n  var scale = block.workspace.scale;\n  var bBox = {width: block.width, height: block.height};\n  bBox.width *= scale;\n  bBox.height *= scale;\n  var blockSvg = block.getSvgRoot();\n  for(var i=0; i<blockSvg.children.length; i++) {\n     if(blockSvg.children[i].classList[0] == 'blocklyPath') {\n        blockSvg = blockSvg.children[i];\n        break;\n     }\n  }\n  var position = blockSvg.getBoundingClientRect();\n  // If we can fit it, render below the block.\n  var primaryX = position.left + position.width / 2;\n  var primaryY = position.top + position.height;\n  // If we can't fit it, render above the entire parent block.\n  var secondaryX = primaryX;\n  var secondaryY = position.top;\n  if (opt_secondaryYOffset) {\n    secondaryY += opt_secondaryYOffset;\n  }\n  // Set bounds to workspace; show the drop-down.\n  Blockly.DropDownDiv.setBoundsElement(block.workspace.getParentSvg().parentNode);\n  return Blockly.DropDownDiv.show(this, primaryX, primaryY, secondaryX, secondaryY, opt_onHide);\n};\n\n// Remove mousedown listener\nBlockly.DropDownDiv.removeListener = function() {\n  if(Blockly.DropDownDiv.listenerActive) {\n    Blockly.unbindEvent_(Blockly.DropDownDiv.listenerActive);\n    Blockly.DropDownDiv.listenerActive = false;\n  }\n};\n\n// Add mousedown listener\nBlockly.DropDownDiv.addListener = function() {\n  if(!Blockly.DropDownDiv.listenerActive) {\n    Blockly.DropDownDiv.listenerActive = Blockly.bindEventWithChecks_(window, 'mousedown', Blockly.DropDownDiv, Blockly.DropDownDiv.hideIfNotShowing);\n  }\n};\n\n/**\n * Show and place the drop-down.\n * The drop-down is placed with an absolute \"origin point\" (x, y) - i.e.,\n * the arrow will point at this origin and box will positioned below or above it.\n * If we can maintain the container bounds at the primary point, the arrow will\n * point there, and the container will be positioned below it.\n * If we can't maintain the container bounds at the primary point, fall-back to the\n * secondary point and position above.\n * @param {Object} owner The object showing the drop-down\n * @param {number} primaryX Desired origin point x, in absolute px\n * @param {number} primaryY Desired origin point y, in absolute px\n * @param {number} secondaryX Secondary/alternative origin point x, in absolute px\n * @param {number} secondaryY Secondary/alternative origin point y, in absolute px\n * @param {Function=} opt_onHide Optional callback for when the drop-down is hidden\n * @return {boolean} True if the menu rendered at the primary origin point.\n */\nBlockly.DropDownDiv.show = function(owner, primaryX, primaryY, secondaryX, secondaryY, opt_onHide) {\n  // Do not hide the div while we're showing it\n  Blockly.DropDownDiv.isInAnimation = true;\n  if(Blockly.DropDownDiv.animateOutTimer_) {\n    window.clearTimeout(Blockly.DropDownDiv.animateOutTimer_);\n    Blockly.DropDownDiv.animateOutTimer_ = null;\n  }\n  if(Blockly.DropDownDiv.isInAnimationTimer) {\n    window.clearTimeout(Blockly.DropDownDiv.isInAnimationTimer);\n    Blockly.DropDownDiv.isInAnimationTimer = null;\n  }\n  Blockly.DropDownDiv.isInAnimationTimer = window.setTimeout(function () { Blockly.DropDownDiv.isInAnimation = false; }, Blockly.DropDownDiv.ANIMATION_TIME*1000);\n\n  Blockly.DropDownDiv.addListener();\n\n  Blockly.DropDownDiv.owner_ = owner;\n  Blockly.DropDownDiv.onHide_ = opt_onHide;\n  var div = Blockly.DropDownDiv.DIV_;\n  var metrics = Blockly.DropDownDiv.getPositionMetrics(primaryX, primaryY, secondaryX, secondaryY);\n  // Update arrow CSS\n  Blockly.DropDownDiv.arrow_.style.transform = 'translate(' +\n    metrics.arrowX + 'px,' + metrics.arrowY + 'px) rotate(45deg)';\n  Blockly.DropDownDiv.arrow_.setAttribute('class',\n    metrics.arrowAtTop ? 'blocklyDropDownArrow arrowTop' : 'blocklyDropDownArrow arrowBottom');\n\n  // When we change `translate` multiple times in close succession,\n  // Chrome may choose to wait and apply them all at once.\n  // Since we want the translation to initial X, Y to be immediate,\n  // and the translation to final X, Y to be animated,\n  // we saw problems where both would be applied after animation was turned on,\n  // making the dropdown appear to fly in from (0, 0).\n  // Using both `left`, `top` for the initial translation and then `translate`\n  // for the animated transition to final X, Y is a workaround.\n\n  // First apply initial translation.\n  div.style.left = metrics.initialX + 'px';\n  div.style.top = metrics.initialY + 'px';\n  // Show the div.\n  div.style.display = 'block';\n  div.style.opacity = 1;\n  // Add final translate, animated through `transition`.\n  // Coordinates are relative to (initialX, initialY),\n  // where the drop-down is absolutely positioned.\n  var dx = (metrics.finalX - metrics.initialX);\n  var dy = (metrics.finalY - metrics.initialY);\n  div.style.transform = 'translate(' + dx + 'px,' + dy + 'px)';\n  return metrics.arrowAtTop;\n};\n\n/**\n * Helper to position the drop-down and the arrow, maintaining bounds.\n * See explanation of origin points in Blockly.DropDownDiv.show.\n * @param {number} primaryX Desired origin point x, in absolute px\n * @param {number} primaryY Desired origin point y, in absolute px\n * @param {number} secondaryX Secondary/alternative origin point x, in absolute px\n * @param {number} secondaryY Secondary/alternative origin point y, in absolute px\n * @returns {Object} Various final metrics, including rendered positions for drop-down and arrow.\n */\nBlockly.DropDownDiv.getPositionMetrics = function(primaryX, primaryY, secondaryX, secondaryY) {\n  var div = Blockly.DropDownDiv.DIV_;\n  var boundPosition = Blockly.DropDownDiv.boundsElement_.getBoundingClientRect();\n\n  var boundSize = goog.style.getSize(Blockly.DropDownDiv.boundsElement_);\n  var divSize = goog.style.getSize(div);\n\n  // First decide if we will render at primary or secondary position\n  // i.e., above or below\n  // renderX, renderY will eventually be the final rendered position of the box.\n  var renderX, renderY, renderedSecondary;\n  // Can the div fit inside the bounds if we render below the primary point?\n  if (secondaryY - divSize.height < boundPosition.top) {\n    // We can't fit below in terms of y. Can we fit above?\n    if (primaryY + divSize.height > boundPosition.top + boundSize.height) {\n      // We also can't fit above, so just render below anyway.\n      renderX = secondaryX;\n      renderY = secondaryY - divSize.height - Blockly.DropDownDiv.PADDING_Y;\n      renderedSecondary = true;\n    } else {\n      // We can fit above, render secondary\n      renderX = primaryX;\n      renderY = primaryY + Blockly.DropDownDiv.PADDING_Y;\n      renderedSecondary = false;\n    }\n  } else {\n    // We can fit below, render primary\n    renderX = secondaryX;\n    renderY = secondaryY - divSize.height - Blockly.DropDownDiv.PADDING_Y;\n    renderedSecondary = true;\n  }\n  // First calculate the absolute arrow X\n  // This needs to be done before positioning the div, since the arrow\n  // wants to be as close to the origin point as possible.\n  var arrowX = renderX - Blockly.DropDownDiv.ARROW_SIZE / 2;\n  // Keep in overall bounds\n  arrowX = Math.max(boundPosition.left, Math.min(arrowX, boundPosition.left + boundSize.width));\n\n  // Adjust the x-position of the drop-down so that the div is centered and within bounds.\n  var centerX = divSize.width / 2;\n  renderX -= centerX;\n  // Fit horizontally in the bounds.\n  renderX = Math.max(\n    boundPosition.left,\n    Math.min(renderX, boundPosition.left + boundSize.width - divSize.width)\n  );\n  // After we've finished caclulating renderX, adjust the arrow to be relative to it.\n  arrowX -= renderX;\n\n  // Pad the arrow by some pixels, primarily so that it doesn't render on top of a rounded border.\n  arrowX = Math.max(\n    Blockly.DropDownDiv.ARROW_HORIZONTAL_PADDING,\n    Math.min(arrowX, divSize.width - Blockly.DropDownDiv.ARROW_HORIZONTAL_PADDING - Blockly.DropDownDiv.ARROW_SIZE)\n  );\n\n  // Calculate arrow Y. If we rendered secondary, add on bottom.\n  // Extra pixels are added so that it covers the border of the div.\n  var arrowY = (renderedSecondary) ? divSize.height - Blockly.DropDownDiv.BORDER_SIZE : 0;\n  arrowY -= (Blockly.DropDownDiv.ARROW_SIZE / 2) + Blockly.DropDownDiv.BORDER_SIZE;\n\n  // Initial position calculated without any padding to provide an animation point.\n  var initialX = renderX; // X position remains constant during animation.\n  var initialY;\n  if (renderedSecondary) {\n    initialY = secondaryY - divSize.height; // No padding on Y\n  } else {\n    initialY = primaryY; // No padding on Y\n  }\n\n  return {\n    initialX: initialX,\n    initialY : initialY+10,\n    finalX: renderX,\n    finalY: renderY+10,\n    arrowX: arrowX,\n    arrowY: arrowY,\n    arrowAtTop: !renderedSecondary\n  };\n};\n\n/**\n * Is the container visible?\n * @return {boolean} True if visible.\n */\nBlockly.DropDownDiv.isVisible = function() {\n  return !!Blockly.DropDownDiv.owner_;\n};\n\n/**\n * Hide the menu only if it is owned by the provided object.\n * @param {Object} owner Object which must be owning the drop-down to hide\n * @return {Boolean} True if hidden\n */\nBlockly.DropDownDiv.hideIfOwner = function(owner) {\n  if (Blockly.DropDownDiv.owner_ === owner) {\n    Blockly.DropDownDiv.hide();\n    return true;\n  }\n  return false;\n};\n\n/**\n * Hide the menu, triggering animation.\n */\nBlockly.DropDownDiv.hide = function() {\n  Blockly.DropDownDiv.isInAnimation = false;\n  // Start the animation by setting the translation and fading out.\n  var div = Blockly.DropDownDiv.DIV_;\n  // Reset to (initialX, initialY) - i.e., no translation.\n  if(div) {\n    div.style.transform = 'translate(0px, 0px)';\n    div.style.opacity = 0;\n    Blockly.DropDownDiv.animateOutTimer_ = setTimeout(function() {\n      // Finish animation - reset all values to default.\n      Blockly.DropDownDiv.hideWithoutAnimation();\n    }, Blockly.DropDownDiv.ANIMATION_TIME * 1000);\n  }\n  if (Blockly.DropDownDiv.onHide_) {\n    Blockly.DropDownDiv.onHide_();\n    Blockly.DropDownDiv.onHide_ = null;\n  }\n};\n\n// Hide after a timeout\nBlockly.DropDownDiv.hideIfNotShowing = function () {\n  if(!Blockly.DropDownDiv.isInAnimation) {\n    Blockly.DropDownDiv.hide();\n  }\n}\n\n/**\n * Hide the menu, without animation.\n */\nBlockly.DropDownDiv.hideWithoutAnimation = function() {\n  if (!Blockly.DropDownDiv.isVisible()) {\n    return;\n  }\n  var div = Blockly.DropDownDiv.DIV_;\n  Blockly.DropDownDiv.animateOutTimer_ && window.clearTimeout(Blockly.DropDownDiv.animateOutTimer_);\n  div.style.transform = '';\n  div.style.top = '';\n  div.style.left = '';\n  div.style.display = 'none';\n  Blockly.DropDownDiv.clearContent();\n  Blockly.DropDownDiv.removeListener();\n  Blockly.DropDownDiv.owner_ = null;\n  if (Blockly.DropDownDiv.onHide_) {\n    Blockly.DropDownDiv.onHide_();\n    Blockly.DropDownDiv.onHide_ = null;\n  }\n};\n","// Adapt to our custom Blockly.Variables.promptName behavior\nBlockly.FieldVariable.prototype.classValidator = function(text) {\n  var workspace = this.sourceBlock_.workspace;\n  if (text == Blockly.Msg.RENAME_VARIABLE) {\n    var oldVar = this.getText();\n    Blockly.hideChaff();\n    var cb = function(text) {\n      if (text) {\n        workspace.renameVariable(oldVar, text);\n      }\n    };\n    text = Blockly.Variables.promptName(\n        Blockly.Msg.RENAME_VARIABLE_TITLE.replace('%1', oldVar), oldVar, cb);\n    return null;\n  } else if (text == Blockly.Msg.DELETE_VARIABLE.replace('%1',\n      this.getText())) {\n    workspace.deleteVariable(this.getText());\n    return null;\n  }\n  return undefined;\n};\n","// Allow some special characters\nBlockly.Names.prototype.safeName_ = function(name) {\n  if (!name) {\n    return 'unnamed';\n  } else {\n    var newname = '';\n    for(var i=0; i<name.length; i++) {\n      if(i == 0 && '0123456789'.indexOf(name[i]) != -1) {\n      // Most languages don't allow names with leading numbers.\n        newname = 'my_';\n      }\n      if(name[i] == ' ')  {\n        newname += '_';\n      } else if('àâçéèêëïîôùü'.indexOf(name[i]) != -1) {\n        newname += name[i];\n      } else {\n        newname += encodeURI(name[i]).replace(/[^\\w]/g, '_');\n      }\n    }\n    return newname;\n  }\n};\n","if(Blockly.Blocks['procedures_defnoreturn']) {\n  Blockly.Blocks['procedures_defnoreturn'].init = function() {\n    var nameField = new Blockly.FieldTextInput('',\n        Blockly.Procedures.rename);\n    nameField.setSpellcheck(false);\n    this.appendDummyInput()\n        .appendField(Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE)\n        .appendField(nameField, 'NAME')\n        .appendField('', 'PARAMS');\n    this.setMutator(new Blockly.Mutator(['procedures_mutatorarg']));\n    if ((this.workspace.options.comments ||\n         (this.workspace.options.parentWorkspace &&\n          this.workspace.options.parentWorkspace.options.comments)) &&\n        Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT) {\n      this.setCommentText(Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT);\n    }\n    this.setColour(Blockly.Blocks.procedures.HUE);\n    this.setTooltip(Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP);\n    this.setHelpUrl(Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL);\n    this.arguments_ = [];\n    this.setStatements_(true);\n    this.statementConnection_ = null;\n  };\n}\n\nif(Blockly.Blocks['procedures_defreturn']) {\n  Blockly.Blocks['procedures_defreturn'].init = function() {\n    var nameField = new Blockly.FieldTextInput('',\n        Blockly.Procedures.rename);\n    nameField.setSpellcheck(false);\n    this.appendDummyInput()\n        .appendField(Blockly.Msg.PROCEDURES_DEFRETURN_TITLE)\n        .appendField(nameField, 'NAME')\n        .appendField('', 'PARAMS');\n    this.appendValueInput('RETURN')\n        .setAlign(Blockly.ALIGN_RIGHT)\n        .appendField(Blockly.Msg.PROCEDURES_DEFRETURN_RETURN);\n    this.setMutator(new Blockly.Mutator(['procedures_mutatorarg']));\n    if ((this.workspace.options.comments ||\n         (this.workspace.options.parentWorkspace &&\n          this.workspace.options.parentWorkspace.options.comments)) &&\n        Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT) {\n      this.setCommentText(Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT);\n    }\n    this.setColour(Blockly.Blocks.procedures.HUE);\n    this.setTooltip(Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP);\n    this.setHelpUrl(Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL);\n    this.arguments_ = [];\n    this.setStatements_(true);\n    this.statementConnection_ = null;\n  };\n}\n","/**\n * Recalculate a horizontal scrollbar's location on the screen and path length.\n * This should be called when the layout or size of the window has changed.\n * @param {!Object} hostMetrics A data structure describing all the\n *     required dimensions, possibly fetched from the host object.\n */\nBlockly.Scrollbar.prototype.resizeViewHorizontal = function(hostMetrics) {\n  var viewSize = hostMetrics.viewWidth - hostMetrics.flyoutWidth - 1;\n  if (this.pair_) {\n    // Shorten the scrollbar to make room for the corner square.\n    viewSize -= Blockly.Scrollbar.scrollbarThickness;\n  }\n  this.setScrollViewSize_(Math.max(0, viewSize));\n\n  var xCoordinate = hostMetrics.absoluteLeft + hostMetrics.flyoutWidth + 0.5;\n  if (this.pair_ && this.workspace_.RTL) {\n    xCoordinate += Blockly.Scrollbar.scrollbarThickness;\n  }\n\n  // Horizontal toolbar should always be just above the bottom of the workspace.\n  var yCoordinate = hostMetrics.absoluteTop + hostMetrics.viewHeight -\n      Blockly.Scrollbar.scrollbarThickness - 0.5;\n  this.setPosition(xCoordinate, yCoordinate);\n\n  // If the view has been resized, a content resize will also be necessary.  The\n  // reverse is not true.\n  this.resizeContentHorizontal(hostMetrics);\n};\n\n/**\n * Recalculate a horizontal scrollbar's location within its path and length.\n * This should be called when the contents of the workspace have changed.\n * @param {!Object} hostMetrics A data structure describing all the\n *     required dimensions, possibly fetched from the host object.\n */\nBlockly.Scrollbar.prototype.resizeContentHorizontal = function(hostMetrics) {\n  if (!this.pair_) {\n    // Only show the scrollbar if needed.\n    // Ideally this would also apply to scrollbar pairs, but that's a bigger\n    // headache (due to interactions with the corner square).\n    this.setVisible(this.scrollViewSize_ < hostMetrics.contentWidth);\n  }\n\n  this.ratio_ = this.scrollViewSize_ / hostMetrics.contentWidth;\n  if (this.ratio_ == -Infinity || this.ratio_ == Infinity ||\n      isNaN(this.ratio_)) {\n    this.ratio_ = 0;\n  }\n\n  var handleLength = (hostMetrics.viewWidth - hostMetrics.flyoutWidth) * this.ratio_;\n  this.setHandleLength_(Math.max(0, handleLength));\n\n  var handlePosition = (hostMetrics.viewLeft - hostMetrics.contentLeft) *\n      this.ratio_;\n  this.setHandlePosition(this.constrainHandle_(handlePosition));\n};\n\n","// Fix case where there's no workspace (we're probably unloading)\nBlockly.onMouseUp_ = function(e) {\n  var workspace = Blockly.getMainWorkspace();\n  if (!workspace || workspace.dragMode_ == Blockly.DRAG_NONE) {\n    return;\n  }\n  Blockly.Touch.clearTouchIdentifier();\n  Blockly.Css.setCursor(Blockly.Css.Cursor.OPEN);\n  workspace.dragMode_ = Blockly.DRAG_NONE;\n  // Unbind the touch event if it exists.\n  if (Blockly.Touch.onTouchUpWrapper_) {\n    Blockly.unbindEvent_(Blockly.Touch.onTouchUpWrapper_);\n    Blockly.Touch.onTouchUpWrapper_ = null;\n  }\n  if (Blockly.onMouseMoveWrapper_) {\n    Blockly.unbindEvent_(Blockly.onMouseMoveWrapper_);\n    Blockly.onMouseMoveWrapper_ = null;\n  }\n};\n\n","// Remove some characters which make JavaScript.STATEMENT_PREFIX instructions\n// generation go wrong\nBlockly.genUid.soup_ = '!#()*+,-./:;=?@[]_`{|}~' +\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n// Modify to save somewhere all bound events\nif(!Blockly.eventsBound) {\n  Blockly.eventsBound = [];\n}\n\nBlockly.bindEventWithChecks_ = function(node, name, thisObject, func,\n    opt_noCaptureIdentifier) {\n  var handled = false;\n  var wrapFunc = function(e) {\n    var captureIdentifier = !opt_noCaptureIdentifier;\n    // Handle each touch point separately.  If the event was a mouse event, this\n    // will hand back an array with one element, which we're fine handling.\n    var events = Blockly.Touch.splitEventByTouches(e);\n    for (var i = 0, event; event = events[i]; i++) {\n      if (captureIdentifier && !Blockly.Touch.shouldHandleEvent(event)) {\n        continue;\n      }\n      Blockly.Touch.setClientFromTouch(event);\n      if (thisObject) {\n        func.call(thisObject, event);\n      } else {\n        func(event);\n      }\n      handled = true;\n    }\n  };\n\n  node.addEventListener(name, wrapFunc, false);\n  Blockly.eventsBound.push({node: node, name: name, func: wrapFunc});\n  var bindData = [[node, name, wrapFunc]];\n\n  // Add equivalent touch event.\n  if (name in Blockly.Touch.TOUCH_MAP) {\n    var touchWrapFunc = function(e) {\n      wrapFunc(e);\n      // Stop the browser from scrolling/zooming the page.\n      if (handled) {\n        e.preventDefault();\n      }\n    };\n    for (var i = 0, eventName;\n         eventName = Blockly.Touch.TOUCH_MAP[name][i]; i++) {\n      node.addEventListener(eventName, touchWrapFunc, false);\n      Blockly.eventsBound.push({node: node, name: eventName, func: func});\n      bindData.push([node, eventName, touchWrapFunc]);\n    }\n  }\n  return bindData;\n};\n\n\n// Function to remove all bound events\nBlockly.removeEvents = function() {\n  for(var i=0; i<Blockly.eventsBound.length; i++) {\n    var eData = Blockly.eventsBound[i];\n    try {\n      eData.node.removeEventListener(eData.name, eData.func);\n    } catch(e) {}\n  }\n  if(Blockly.documentEventsBound_) {\n    document.removeEventListener('mouseup', Blockly.onMouseUp_);\n    Blockly.documentEventsBound_ = false;\n  }\n  Blockly.eventsBound = [];\n}\n\n// Validate contents of the expression block\n// Returns null if the expression is valid\nBlockly.validateExpression = function(text, workspace) {\n  try {\n    var acorn = window.acorn ? window.acorn : require('acorn');\n    var walk = acorn.walk ? acorn.walk : require('acorn-walk');\n  } catch(e) {\n    console.error(\"Couldn't validate expression as acorn or acorn-walk is missing.\");\n    return null;\n  }\n\n  // acorn parses programs, it won't tell if there's a ';'\n  if(text.indexOf(';') != -1) {\n    // Semi-colon is not allowed\n    return Blockly.Msg.EVAL_ERROR_SEMICOLON;\n  }\n\n  // Parse the expression\n  try {\n    var ast = acorn.parse(text);\n  } catch(e) {\n    // Couldn't parse\n    return Blockly.Msg.EVAL_ERROR_SYNTAX;\n  }\n\n  var msg = null;\n  var variableList = null;\n  var allowedTypes = [\"Literal\", \"Identifier\", \"BinaryExpression\", \"UnaryExpression\", \"ArrayExpression\", \"MemberExpression\", \"ExpressionStatement\", \"Program\"];\n  function checkAst(node, state, type) {\n    if(allowedTypes.indexOf(type) == -1) {\n      // Type is not allowed\n      msg = Blockly.Msg.EVAL_ERROR_TYPE.replace('%1', type);\n      return;\n    }\n\n    if(type == \"MemberExpression\" && (text[node.object.end] != '[' || node.property.end == node.end || text[node.end-1] != ']')) {\n      // This type of MemberExpression is not allowed\n      msg = Blockly.Msg.EVAL_ERROR_TYPE.replace('%1', type);\n      return;\n    }\n\n    if(type == \"Identifier\" && workspace) {\n      // Check if variable is defined\n      if(variableList === null) {\n        variableList = workspace.variableList;\n      }\n      if(variableList && variableList.indexOf(node.name) == -1) {\n        // Variable is not defined\n        msg = Blockly.Msg.EVAL_ERROR_VAR.replace('%1', node.name);\n        return;\n      }\n    }\n  }\n\n  // Walk the AST\n  walk.full(ast, checkAst);\n\n  return msg;\n};\n\n// Reindex 1-based array indexes to 0-based\nBlockly.reindexExpression = function(text, workspace) {\n  if(Blockly.validateExpression(text, workspace) !== null) {\n    // We shouldn't be generating code for an invalid block\n    return null;\n  }\n\n  try {\n    var acorn = window.acorn ? window.acorn : require('acorn');\n    var walk = acorn.walk ? acorn.walk : require('acorn-walk');\n  } catch(e) {\n    console.error(\"Couldn't reindex expression as acorn or acorn-walk is missing.\");\n    return null;\n  }\n\n  // Parsing worked for validate, it will work this time too\n  var ast = acorn.parse(text);\n\n  // This array will contain the pairs of positions for '[' and ']'\n  var reindexes = [];\n  var newText = text;\n  function getReindexes(node, state, type) {\n    if(type == \"MemberExpression\") {\n      reindexes.push([node.object.end, node.end-1]);\n    }\n  }\n\n  // Walk the AST\n  walk.full(ast, getReindexes);\n\n  // Apply reindexing\n  for(var i=0; i < reindexes.length; i++) {\n    var start = reindexes[i][0];\n    var end = reindexes[i][1];\n\n    newText = newText.slice(0, start+1) + '(' + newText.slice(start+1, end) + ')-1' + newText.slice(end);\n\n    // Adjust start and end for next reindexes\n    for(var j=i+1; j < reindexes.length; j++) {\n      if(start < reindexes[j][0]) {\n        reindexes[j][0] += 1;\n      }\n      if(start < reindexes[j][1]) {\n        reindexes[j][1] += 1;\n      }\n      if(end < reindexes[j][0]) {\n        reindexes[j][0] += 3;\n      }\n      if(end < reindexes[j][1]) {\n        reindexes[j][1] += 3;\n      }\n    }\n  }\n\n  return newText;\n};\n","Blockly.JavaScript['variables_set'] = function(block) {\n  // Variable setter.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var assignCode = varName + ' = ' + argument0 + ';\\n';\n\n  // Report value if available\n  var reportCode = \"reportBlockValue('\" + block.id + \"', \"+varName+\", '\"+varName+\"');\\n\";\n\n  return assignCode + reportCode;\n};\n","// reportValue allows to show a popup next to a block\nBlockly.WorkspaceSvg.prototype.reportValue = function(id, value) {\n  var block = this.getBlockById(id);\n  if (!block) {\n    throw 'Tried to report value on block that does not exist.';\n  }\n  Blockly.DropDownDiv.createDom();\n  Blockly.DropDownDiv.hideWithoutAnimation();\n  Blockly.DropDownDiv.clearContent();\n  var contentDiv = Blockly.DropDownDiv.getContentDiv();\n  var valueReportBox = goog.dom.createElement('div');\n  valueReportBox.setAttribute('class', 'valueReportBox');\n  valueReportBox.innerHTML = value;\n  contentDiv.appendChild(valueReportBox);\n  Blockly.DropDownDiv.setColour(\"#FFFFFF\", \"#AAAAAA\");\n  Blockly.DropDownDiv.showPositionedByBlock(this, block);\n};\n\n// Fix issue when unloading\nBlockly.WorkspaceSvg.prototype.translate = function(x, y) {\n  var translation = 'translate(' + x + ',' + y + ') ' +\n      'scale(' + this.scale + ')';\n  if(this.svgBlockCanvas_) {\n    this.svgBlockCanvas_.setAttribute('transform', translation);\n  }\n  if(this.svgBubbleCanvas_) {\n    this.svgBubbleCanvas_.setAttribute('transform', translation);\n  }\n  if(this.dragSurface) {\n    this.dragSurface.translateAndScaleGroup(x, y, this.scale);\n  }\n};\n","FioiBlockly.Msg.en = {};\n\nFioiBlockly.Msg.en.VARIABLES_DEFAULT_NAME = \"element\";\nFioiBlockly.Msg.en.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;\n\nFioiBlockly.Msg.en.DICTS_CREATE_EMPTY_TITLE = \"Leeres Wörterbuch\";\nFioiBlockly.Msg.en.DICTS_CREATE_WITH_CONTAINER_TITLE_ADD = \"Wörterbuch erstellen\";\nFioiBlockly.Msg.en.DICTS_CREATE_WITH_CONTAINER_TOOLTIP = \"\";\nFioiBlockly.Msg.en.DICTS_CREATE_WITH_INPUT_WITH = \"Wörterbuch erstellen aus:\";\nFioiBlockly.Msg.en.DICTS_CREATE_WITH_ITEM_KEY = \"ckey\";\nFioiBlockly.Msg.en.DICTS_CREATE_WITH_ITEM_MAPPING = \":\";\nFioiBlockly.Msg.en.DICTS_CREATE_WITH_ITEM_TITLE = \"key/value\";\nFioiBlockly.Msg.en.DICTS_CREATE_WITH_ITEM_TOOLTIP = \"\";\nFioiBlockly.Msg.en.DICTS_CREATE_WITH_TOOLTIP = \"\";\nFioiBlockly.Msg.en.DICT_GET = \"get the key\";\nFioiBlockly.Msg.en.DICT_GET_TO = \"from\";\nFioiBlockly.Msg.en.DICT_KEYS = \"list of the keys of\";\nFioiBlockly.Msg.en.DICT_SET_TITLE = \"assign to key\";\nFioiBlockly.Msg.en.DICT_SET_OF = \"of dictionary\";\nFioiBlockly.Msg.en.DICT_SET_TO = \"to\";\n\nFioiBlockly.Msg.en.TEXT_PRINT_TITLE = \"gib aus Zeile %1\";\nFioiBlockly.Msg.en.TEXT_PRINT_TOOLTIP = \"Print the text, number or other value, with a newline after.\";\nFioiBlockly.Msg.en.TEXT_PRINT_NOEND_TITLE = \"gib aus %1\";\nFioiBlockly.Msg.en.TEXT_PRINT_NOEND_TOOLTIP = \"Print the text, number or other value, without newline.\";\n\nFioiBlockly.Msg.en.LISTS_APPEND_MSG = \"to the list %1 add the element %2\";\nFioiBlockly.Msg.en.LISTS_APPEND_TOOLTIP = \"Add an element to the list '%1'\";\nFioiBlockly.Msg.en.LISTS_GET_INDEX_FIRST = \"at the beginning\";\nFioiBlockly.Msg.en.LISTS_GET_INDEX_FROM_END = \"at the index from the end\";\nFioiBlockly.Msg.en.LISTS_GET_INDEX_FROM_START = \"at the index\";\nFioiBlockly.Msg.en.LISTS_GET_INDEX_GET = \"get value\";\nFioiBlockly.Msg.en.LISTS_GET_INDEX_GET_REMOVE = \"get and remove value\";\nFioiBlockly.Msg.en.LISTS_GET_INDEX_LAST = \"at the end\";\nFioiBlockly.Msg.en.LISTS_GET_INDEX_RANDOM = \"at a random index\";\nFioiBlockly.Msg.en.LISTS_GET_INDEX_REMOVE = \"remove value\";\nFioiBlockly.Msg.en.LISTS_SET_INDEX_INSERT = \"insert\";\nFioiBlockly.Msg.en.LISTS_SORT_TITLE = \"return the sort %1 %2 of list %3\"\nFioiBlockly.Msg.en.LISTS_SORT_PLACE_MSG = \"sort list %1 in place\";\nFioiBlockly.Msg.en.LISTS_SORT_PLACE_TOOLTIP = \"Sorts list '%1' and modifies it directly.\";\n\nFioiBlockly.Msg.en.INPUT_NUM = \"read a single number on the whole line\";\nFioiBlockly.Msg.en.INPUT_NUM_TOOLTIP = \"Reads a single number on a line, on the program input.\";\nFioiBlockly.Msg.en.INPUT_NUM_LIST = \"read a list of numbers on a line\";\nFioiBlockly.Msg.en.INPUT_NUM_LIST_TOOLTIP = \"Reads a list of numbers on a line, on the program input.\";\nFioiBlockly.Msg.en.INPUT_NUM_NEXT = \"read a number\";\nFioiBlockly.Msg.en.INPUT_NUM_NEXT_TOOLTIP = \"Reads the next number on the program input.\";\nFioiBlockly.Msg.en.INPUT_CHAR = \"read a character\";\nFioiBlockly.Msg.en.INPUT_CHAR_TOOLTIP = \"Reads a character on the program input.\";\nFioiBlockly.Msg.en.INPUT_WORD = \"read a word\";\nFioiBlockly.Msg.en.INPUT_WORD_TOOLTIP = \"Reads a word on the program input.\";\nFioiBlockly.Msg.en.INPUT_LINE = \"read a line\";\nFioiBlockly.Msg.en.INPUT_LINE_TOOLTIP = \"Reads a line on the program input.\";\n\nFioiBlockly.Msg.en.CANNOT_DELETE_VARIABLE_PROCEDURE = \"Variable '%1' kann nicht gelöscht werden weil sie von Funktion '%2' genutzt wird.\";\n\nFioiBlockly.Msg.en.DATA_REPLACEITEMOFLIST_TITLE = \"replace element %1 of list %2 with %3\";\nFioiBlockly.Msg.en.DATA_ITEMOFLIST_TITLE = \"element %1 in %2\";\nFioiBlockly.Msg.en.DATA_LISTREPEAT_TITLE = \"initialize list %1 with %2 repeated %3 times\";\n\nFioiBlockly.Msg.en.INVALID_NAME = \"Ungültiger Name. Erlaubt sind nur Buchstaben, Ziffern (außer als erstes Zeichen) und Unterstriche '_'.\";\n","FioiBlockly.Msg.en = {};\n\nFioiBlockly.Msg.en.VARIABLES_DEFAULT_NAME = \"element\";\nFioiBlockly.Msg.en.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;\n\nFioiBlockly.Msg.en.DICTS_CREATE_EMPTY_TITLE = \"empty dictionary\";\nFioiBlockly.Msg.en.DICTS_CREATE_WITH_CONTAINER_TITLE_ADD = \"Create a dictionary\";\nFioiBlockly.Msg.en.DICTS_CREATE_WITH_CONTAINER_TOOLTIP = \"\";\nFioiBlockly.Msg.en.DICTS_CREATE_WITH_INPUT_WITH = \"create a dictionary :\";\nFioiBlockly.Msg.en.DICTS_CREATE_WITH_ITEM_KEY = \"ckey\";\nFioiBlockly.Msg.en.DICTS_CREATE_WITH_ITEM_MAPPING = \":\";\nFioiBlockly.Msg.en.DICTS_CREATE_WITH_ITEM_TITLE = \"key/value\";\nFioiBlockly.Msg.en.DICTS_CREATE_WITH_ITEM_TOOLTIP = \"\";\nFioiBlockly.Msg.en.DICTS_CREATE_WITH_TOOLTIP = \"\";\nFioiBlockly.Msg.en.DICT_GET = \"get the key\";\nFioiBlockly.Msg.en.DICT_GET_TO = \"from\";\nFioiBlockly.Msg.en.DICT_KEYS = \"list of the keys of\";\nFioiBlockly.Msg.en.DICT_SET_TITLE = \"assign to key\";\nFioiBlockly.Msg.en.DICT_SET_OF = \"of dictionary\";\nFioiBlockly.Msg.en.DICT_SET_TO = \"to\";\n\nFioiBlockly.Msg.en.TEXT_PRINT_TITLE = \"print line %1\";\nFioiBlockly.Msg.en.TEXT_PRINT_TOOLTIP = \"Print the text, number or other value, with a newline after.\";\nFioiBlockly.Msg.en.TEXT_PRINT_NOEND_TITLE = \"print %1\";\nFioiBlockly.Msg.en.TEXT_PRINT_NOEND_TOOLTIP = \"Print the text, number or other value, without newline.\";\n\nFioiBlockly.Msg.en.LISTS_APPEND_MSG = \"to the list %1 add the element %2\";\nFioiBlockly.Msg.en.LISTS_APPEND_TOOLTIP = \"Add an element to the list '%1'\";\nFioiBlockly.Msg.en.LISTS_GET_INDEX_FIRST = \"at the beginning\";\nFioiBlockly.Msg.en.LISTS_GET_INDEX_FROM_END = \"at the index from the end\";\nFioiBlockly.Msg.en.LISTS_GET_INDEX_FROM_START = \"at the index\";\nFioiBlockly.Msg.en.LISTS_GET_INDEX_GET = \"get value\";\nFioiBlockly.Msg.en.LISTS_GET_INDEX_GET_REMOVE = \"get and remove value\";\nFioiBlockly.Msg.en.LISTS_GET_INDEX_LAST = \"at the end\";\nFioiBlockly.Msg.en.LISTS_GET_INDEX_RANDOM = \"at a random index\";\nFioiBlockly.Msg.en.LISTS_GET_INDEX_REMOVE = \"remove value\";\nFioiBlockly.Msg.en.LISTS_SET_INDEX_INSERT = \"insert\";\nFioiBlockly.Msg.en.LISTS_SORT_TITLE = \"return the sort %1 %2 of list %3\"\nFioiBlockly.Msg.en.LISTS_SORT_PLACE_MSG = \"sort list %1 in place\";\nFioiBlockly.Msg.en.LISTS_SORT_PLACE_TOOLTIP = \"Sorts list '%1' and modifies it directly.\";\n\nFioiBlockly.Msg.en.INPUT_NUM = \"read a single number on the whole line\";\nFioiBlockly.Msg.en.INPUT_NUM_TOOLTIP = \"Reads a single number on a line, on the program input.\";\nFioiBlockly.Msg.en.INPUT_NUM_LIST = \"read a list of numbers on a line\";\nFioiBlockly.Msg.en.INPUT_NUM_LIST_TOOLTIP = \"Reads a list of numbers on a line, on the program input.\";\nFioiBlockly.Msg.en.INPUT_NUM_NEXT = \"read a number\";\nFioiBlockly.Msg.en.INPUT_NUM_NEXT_TOOLTIP = \"Reads the next number on the program input.\";\nFioiBlockly.Msg.en.INPUT_CHAR = \"read a character\";\nFioiBlockly.Msg.en.INPUT_CHAR_TOOLTIP = \"Reads a character on the program input.\";\nFioiBlockly.Msg.en.INPUT_WORD = \"read a word\";\nFioiBlockly.Msg.en.INPUT_WORD_TOOLTIP = \"Reads a word on the program input.\";\nFioiBlockly.Msg.en.INPUT_LINE = \"read a line\";\nFioiBlockly.Msg.en.INPUT_LINE_TOOLTIP = \"Reads a line on the program input.\";\n\nFioiBlockly.Msg.en.CANNOT_DELETE_VARIABLE_PROCEDURE = \"Cannot delete variable '%1', used by procedure '%2'.\";\n\nFioiBlockly.Msg.en.DATA_REPLACEITEMOFLIST_TITLE = \"replace element %1 of list %2 with %3\";\nFioiBlockly.Msg.en.DATA_ITEMOFLIST_TITLE = \"element %1 in %2\";\nFioiBlockly.Msg.en.DATA_LISTREPEAT_TITLE = \"initialize list %1 with %2 repeated %3 times\";\n\nFioiBlockly.Msg.en.INVALID_NAME = \"Invalid name, please only use letters, some letters with accents, digits (except as first character), and underscore '_'.\";\n","FioiBlockly.Msg.es = {};\n\nFioiBlockly.Msg.es.VARIABLES_DEFAULT_NAME = \"elemento\";\nFioiBlockly.Msg.es.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;\n\nFioiBlockly.Msg.es.DICTS_CREATE_EMPTY_TITLE = \"diccionario vacío\";\nFioiBlockly.Msg.es.DICTS_CREATE_WITH_CONTAINER_TITLE_ADD = \"Crear un diccionario\";\nFioiBlockly.Msg.es.DICTS_CREATE_WITH_CONTAINER_TOOLTIP = \"\";\nFioiBlockly.Msg.es.DICTS_CREATE_WITH_INPUT_WITH = \"crear un diccionario:\";\nFioiBlockly.Msg.es.DICTS_CREATE_WITH_ITEM_KEY = \"llave\";\nFioiBlockly.Msg.es.DICTS_CREATE_WITH_ITEM_MAPPING = \":\";\nFioiBlockly.Msg.es.DICTS_CREATE_WITH_ITEM_TITLE = \"llave/valor\";\nFioiBlockly.Msg.es.DICTS_CREATE_WITH_ITEM_TOOLTIP = \"\";\nFioiBlockly.Msg.es.DICTS_CREATE_WITH_TOOLTIP = \"\";\nFioiBlockly.Msg.es.DICT_GET = \"recuperar la llave\";\nFioiBlockly.Msg.es.DICT_GET_TO = \"de\";\nFioiBlockly.Msg.es.DICT_KEYS = \"listado de llaves de\";\nFioiBlockly.Msg.es.DICT_SET_TITLE = \"modificar la llave\";\nFioiBlockly.Msg.es.DICT_SET_OF = \"del diccionario\";\nFioiBlockly.Msg.es.DICT_SET_TO = \"a\";\n\nFioiBlockly.Msg.es.TEXT_PRINT_TITLE = \"imprimir línea %1\";\nFioiBlockly.Msg.es.TEXT_PRINT_TOOLTIP = \"Imprimir el texto, número u otro valor, seguido de un retorno de línea.\";\nFioiBlockly.Msg.es.TEXT_PRINT_NOEND_TITLE = \"imprimir %1\";\nFioiBlockly.Msg.es.TEXT_PRINT_NOEND_TOOLTIP = \"Imprimir el texto, número u otro valor, sin retorno de línea.\";\n\nFioiBlockly.Msg.es.LISTS_APPEND_MSG = \"a la lista %1 agregar el elemento %2\";\nFioiBlockly.Msg.es.LISTS_APPEND_TOOLTIP = \"Agregar un elemento a la lista '%1'\";\nFioiBlockly.Msg.es.LISTS_GET_INDEX_FIRST = \"al inicio\";\nFioiBlockly.Msg.es.LISTS_GET_INDEX_FROM_END = \"en el índice a partir del final\";\nFioiBlockly.Msg.es.LISTS_GET_INDEX_FROM_START = \"en el índice\";\nFioiBlockly.Msg.es.LISTS_GET_INDEX_GET = \"obtener valor\";\nFioiBlockly.Msg.es.LISTS_GET_INDEX_GET_REMOVE = \"obtener y remover valor\";\nFioiBlockly.Msg.es.LISTS_GET_INDEX_LAST = \"al final\";\nFioiBlockly.Msg.es.LISTS_GET_INDEX_RANDOM = \"en un índice aleatorio\";\nFioiBlockly.Msg.es.LISTS_GET_INDEX_REMOVE = \"remover el valor\";\nFioiBlockly.Msg.es.LISTS_SET_INDEX_INSERT = \"insertar\";\nFioiBlockly.Msg.es.LISTS_SORT_TITLE = \"retornar el ordenamiento %1 %2 de la lista %3\"\nFioiBlockly.Msg.es.LISTS_SORT_PLACE_MSG = \"ordenar la lista %1 en su lugar\";\nFioiBlockly.Msg.es.LISTS_SORT_PLACE_TOOLTIP = \"Ordena la lista '%1' y la modifica directamente.\";\n\nFioiBlockly.Msg.es.INPUT_NUM = \"leer un sólo número en toda la línea\";\nFioiBlockly.Msg.es.INPUT_NUM_TOOLTIP = \"Lee un sólo número en una lína, en la entrada del programa.\";\nFioiBlockly.Msg.es.INPUT_NUM_LIST = \"leer una lista de números en una línea\";\nFioiBlockly.Msg.es.INPUT_NUM_LIST_TOOLTIP = \"Lee una lista de números en una línea, en la entrada del programa.\";\nFioiBlockly.Msg.es.INPUT_NUM_NEXT = \"leer un número\";\nFioiBlockly.Msg.es.INPUT_NUM_NEXT_TOOLTIP = \"Leer el próximo número en la entrada del programa.\";\nFioiBlockly.Msg.es.INPUT_CHAR = \"leer un caracter\";\nFioiBlockly.Msg.es.INPUT_CHAR_TOOLTIP = \"Lee un caracter desde la entrada del programa.\";\nFioiBlockly.Msg.es.INPUT_WORD = \"leer una palabra\";\nFioiBlockly.Msg.es.INPUT_WORD_TOOLTIP = \"Lee una palabra desde la entrada del programa.\";\nFioiBlockly.Msg.es.INPUT_LINE = \"leer una línea\";\nFioiBlockly.Msg.es.INPUT_LINE_TOOLTIP = \"Lee una línea desde la entrada del programa.\";\n\nFioiBlockly.Msg.es.CANNOT_DELETE_VARIABLE_PROCEDURE = \"No es posible borrar la variable '%1', es utilizada en el procedimiento '%2'.\";\n\nFioiBlockly.Msg.es.DATA_REPLACEITEMOFLIST_TITLE = \"reemplazar el elemento %1 de la lista %2 con %3\";\nFioiBlockly.Msg.es.DATA_ITEMOFLIST_TITLE = \"elemento %1 en %2\";\nFioiBlockly.Msg.es.DATA_LISTREPEAT_TITLE = \"inicializar la lista %1 con %2 repetido %3 veces\";\n\nFioiBlockly.Msg.es.INVALID_NAME = \"Nombre inválido. Favor utilice únicamente letras, algunas letras acentuadas, dígitos (excepto como primer caracter), y guión bajo '_'.\";\n","FioiBlockly.Msg.fr = {};\n\nFioiBlockly.Msg.fr.VARIABLES_DEFAULT_NAME = \"element\";\nFioiBlockly.Msg.fr.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;\n\nFioiBlockly.Msg.fr.DICTS_CREATE_EMPTY_TITLE = \"dictionnaire vide\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_CONTAINER_TITLE_ADD = \"Créer un dictionnaire\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_CONTAINER_TOOLTIP = \"\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_INPUT_WITH = \"créer un dictionnaire :\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_ITEM_KEY = \"cle\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_ITEM_MAPPING = \":\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_ITEM_TITLE = \"clé/valeur\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_ITEM_TOOLTIP = \"\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_TOOLTIP = \"\";\nFioiBlockly.Msg.fr.DICT_GET = \"récupérer la clé\";\nFioiBlockly.Msg.fr.DICT_GET_TO = \"de\";\nFioiBlockly.Msg.fr.DICT_KEYS = \"liste des clés de\";\nFioiBlockly.Msg.fr.DICT_SET_TITLE = \"affecter la clé\";\nFioiBlockly.Msg.fr.DICT_SET_OF = \"du dictionnaire\";\nFioiBlockly.Msg.fr.DICT_SET_TO = \"à\";\n\nFioiBlockly.Msg.fr.TEXT_PRINT_TITLE = \"afficher la ligne %1\";\nFioiBlockly.Msg.fr.TEXT_PRINT_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, avec retour à la ligne après.\";\nFioiBlockly.Msg.fr.TEXT_PRINT_NOEND_TITLE = \"afficher %1\";\nFioiBlockly.Msg.fr.TEXT_PRINT_NOEND_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, sans retour à la ligne.\";\n\nFioiBlockly.Msg.fr.TEXT_EVAL_TITLE = \"évaluer\";\nFioiBlockly.Msg.fr.TEXT_EVAL_TOOLTIP = \"Évalue l'expression arithmétique spécifiée.\";\nFioiBlockly.Msg.fr.TEXT_EVAL_INVALID = \"Attention : %1 ; ce bloc retournera 'faux' !\";\n\nFioiBlockly.Msg.fr.EVAL_ERROR_SEMICOLON = \"le point-virgule ';' n'est pas autorisé\";\nFioiBlockly.Msg.fr.EVAL_ERROR_SYNTAX = \"l'expression n'est pas syntaxiquement valide\";\nFioiBlockly.Msg.fr.EVAL_ERROR_TYPE = \"ce type d'expression (%1) n'est pas autorisé\";\nFioiBlockly.Msg.fr.EVAL_ERROR_VAR = \"cette expression utilise une variable '%1' non définie\";\n\nFioiBlockly.Msg.fr.LISTS_APPEND_MSG = \"à la liste %1 ajouter l'élément %2\";\nFioiBlockly.Msg.fr.LISTS_APPEND_TOOLTIP = \"Ajouter un élément à la liste '%1'\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_FIRST = \"au début\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_FROM_END = \"à l'indice depuis la fin\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_FROM_START = \"à l'indice\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_GET = \"obtenir la valeur\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_GET_REMOVE = \"obtenir et supprimer la valeur\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_LAST = \"à la fin\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_RANDOM = \"à un indice aléatoire\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_REMOVE = \"supprimer la valeur\";\nFioiBlockly.Msg.fr.LISTS_SET_INDEX_INSERT = \"insérer\";\nFioiBlockly.Msg.fr.LISTS_SORT_TITLE = \"renvoyer le tri %1 %2 de la liste %3\"\nFioiBlockly.Msg.fr.LISTS_SORT_PLACE_MSG = \"trier la liste %1 sur place\";\nFioiBlockly.Msg.fr.LISTS_SORT_PLACE_TOOLTIP = \"Trie la liste '%1' et la modifie directement.\";\n\nFioiBlockly.Msg.fr.INPUT_NUM = \"lire un nombre seul sur une ligne\";\nFioiBlockly.Msg.fr.INPUT_NUM_TOOLTIP = \"Lit un nombre seul sur une ligne, sur l'entrée du programme.\";\nFioiBlockly.Msg.fr.INPUT_NUM_LIST = \"lire une liste de nombres sur une ligne\";\nFioiBlockly.Msg.fr.INPUT_NUM_LIST_TOOLTIP = \"Lit une liste de nombres sur une ligne, sur l'entrée du programme.\";\nFioiBlockly.Msg.fr.INPUT_NUM_NEXT = \"lire un nombre\";\nFioiBlockly.Msg.fr.INPUT_NUM_NEXT_TOOLTIP = \"Lit le prochain nombre sur l'entrée du programme.\";\nFioiBlockly.Msg.fr.INPUT_CHAR = \"lire un caractère\";\nFioiBlockly.Msg.fr.INPUT_CHAR_TOOLTIP = \"Lit un caractère sur l'entrée du programme.\";\nFioiBlockly.Msg.fr.INPUT_WORD = \"lire un mot\";\nFioiBlockly.Msg.fr.INPUT_WORD_TOOLTIP = \"Lit un mot sur l'entrée du programme.\";\nFioiBlockly.Msg.fr.INPUT_LINE = \"lire une ligne\";\nFioiBlockly.Msg.fr.INPUT_LINE_TOOLTIP = \"Lit une ligne sur l'entrée du programme.\";\n\nFioiBlockly.Msg.fr.CANNOT_DELETE_VARIABLE_PROCEDURE = \"Impossible de supprimer la variable '%1', utilisée par la procédure '%2'.\";\n\nFioiBlockly.Msg.fr.DATA_REPLACEITEMOFLIST_TITLE = \"remplacer l'élément %1 de la liste %2 par %3\";\nFioiBlockly.Msg.fr.DATA_ITEMOFLIST_TITLE = \"élément %1 dans %2\";\nFioiBlockly.Msg.fr.DATA_LISTREPEAT_TITLE = \"initialiser la liste %1 avec %2 répété %3 fois\";\n\nFioiBlockly.Msg.fr.INVALID_NAME = \"Nom invalide, veuillez n'utiliser que des lettres, lettres accentuées françaises, chiffres (sauf comme premier caractère) et tiret bas '_'.\";\n\nFioiBlockly.Msg.fr.TABLES_2D_INIT = \"initialiser le tableau 2D %1 avec %2 lignes et %3 colonnes contenant %4\";\nFioiBlockly.Msg.fr.TABLES_2D_INIT_TOOLTIP = \"Crée un tableau avec le nombre spécifié de lignes et de colonnes, et initialise chaque case à la valeur donnée.\";\nFioiBlockly.Msg.fr.TABLES_2D_SET = \"dans %1[%2] [%3] mettre %4\";\nFioiBlockly.Msg.fr.TABLES_3D_SET_TOOLTIP = \"Met la valeur dans la case [ligne] [colonne] du tableau %1.\";\nFioiBlockly.Msg.fr.TABLES_2D_GET = \"%1[%2] [%3]\";\nFioiBlockly.Msg.fr.TABLES_2D_GET_TOOLTIP = \"Récupère la valeur dans la case [ligne] [colonne] du tableau %1.\";\n\nFioiBlockly.Msg.fr.TABLES_3D_INIT = \"initialiser le tableau 3D %1 avec %2 couches, %3 lignes, %4 colonnes contenant %5\";\nFioiBlockly.Msg.fr.TABLES_3D_INIT_TOOLTIP = \"Crée un tableau avec le nombre spécifié de lignes, de colonnes et de niveaux, et initialise chaque case à la valeur donnée.\";\nFioiBlockly.Msg.fr.TABLES_3D_SET = \"dans %1[%2] [%3] [%4] mettre %5\";\nFioiBlockly.Msg.fr.TABLES_3D_SET_TOOLTIP = \"Met la valeur dans la case [couche] [ligne] [colonne] du tableau %1.\";\nFioiBlockly.Msg.fr.TABLES_3D_GET = \"%1[%2] [%3] [%4]\";\nFioiBlockly.Msg.fr.TABLES_3D_GET_TOOLTIP = \"Récupère la valeur dans la case [couche] [ligne] [colonne] du tableau %1.\";\n\nFioiBlockly.Msg.fr.TABLES_VAR_NAME = \"tableau\";\nFioiBlockly.Msg.fr.TABLES_TOO_BIG = \"Dimensions du tableau trop grandes !\";\nFioiBlockly.Msg.fr.TABLES_OUT_OF_BOUNDS = \"Tentative d'accès à une case hors du tableau !\";\n","// Fill undefined Blockly.Msg messages with messages from the default language\nFioiBlockly.fillLanguage = function() {\n  for(var msgName in FioiBlockly.Msg[FioiBlockly.defaultLang]) {\n    if(typeof Blockly.Msg[msgName] == 'undefined') {\n      Blockly.Msg[msgName] = FioiBlockly.Msg[FioiBlockly.defaultLang][msgName];\n    }\n  }\n}\nFioiBlockly.fillLanguage();\n","Blockly.Python['dict_get'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dict_get_literal'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.quote_(block.getFieldValue('ITEM'));\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dict_set_literal'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var key = Blockly.Python.quote_(block.getFieldValue('ITEM'));\n  var value = Blockly.Python.valueToCode(block, 'VAL',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = dict + '[' + key + '] = ' + value + '\\n';\n  return code;\n};\n\n\nBlockly.Python['dicts_create_with'] = function(block) {\n    var value_keys = Blockly.Python.valueToCode(block, 'keys', Blockly.   Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = new Array(block.itemCount_);\n  \n    for (var n = 0; n < block.itemCount_; n++) {\n        var key = Blockly.Python.quote_(block.getFieldValue('KEY' + n));\n        var value = Blockly.Python.valueToCode(block, 'VALUE' + n,\n                Blockly.Python.ORDER_NONE) || '___';\n        code[n] = key +\": \"+ value;\n    }\n    code = '{' + code.join(', ') + '}';\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['dict_keys'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var code = dict + '.keys()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n","Blockly.Python['input_num'] = function(block) {\n  var code = 'int(input())';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_num_next'] = function(block) {\n  // TODO :: make a more optimized version of this\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'int(input_word())';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_char'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.read(1)';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_word'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'input_word()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_line'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.readline()[:-1]';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_num_list'] = function(block) {\n  var code = 'list(map(int, input().split()))';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n","Blockly.Python['lists_append'] = function(block) {\n  // Append\n  var varName = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.Variables.NAME_TYPE);\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  return varName + '.append(' + value + ')\\n';\n};\n\nBlockly.Python['lists_setIndex'] = function(block) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  var list = Blockly.Python.valueToCode(block, 'LIST',\n      Blockly.Python.ORDER_MEMBER) || '[]';\n  var mode = block.getFieldValue('MODE') || 'GET';\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\n  var value = Blockly.Python.valueToCode(block, 'TO',\n      Blockly.Python.ORDER_NONE) || 'None';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    }\n    var listVar = Blockly.Python.variableDB_.getDistinctName(\n        'tmp_list', Blockly.Variables.NAME_TYPE);\n    var code = listVar + ' = ' + list + '\\n';\n    list = listVar;\n    return code;\n  }\n\n  if(mode == 'SET') {\n    // TODO :: set this as an option\n/*    Blockly.Python.definitions_['lists_assignIndex'] = '' +\n      'def assignIndex(l, i, x):\\n' +\n      '    if i > 1000000:\\n' +\n      '        raise IndexError(\"list index > 1000000\")\\n' +\n      '    n = len(l)\\n' +\n      '    if i >= n:\\n' +\n      '        l.extend([None]*(i-n+1))\\n' +\n      '    l[i] = x\\n';*/\n  }\n  function makeAssignIndex(l, a, v) {\n    // TODO :: set this as an option\n//    return 'assignIndex(' + l + ', ' + a + ', ' + v + ')\\n';\n    return list + '[' + a + '] = ' + v + '\\n';\n  }\n\n  switch (where) {\n    case 'FIRST':\n      if (mode == 'SET') {\n        return makeAssignIndex(list, 0, value);\n      } else if (mode == 'INSERT') {\n        return list + '.insert(0, ' + value + ')\\n';\n      }\n      break;\n    case 'LAST':\n        if (mode == 'SET') {\n          return makeAssignIndex(list, -1, value);\n        } else if (mode == 'INSERT') {\n          return list + '.append(' + value + ')\\n';\n        }\n      break;\n    case 'FROM_START':\n      var at = Blockly.Python.getAdjustedInt(block, 'AT');\n        if (mode == 'SET') {\n          return makeAssignIndex(list, at, value);\n        } else if (mode == 'INSERT') {\n          return list + '.insert(' + at + ', ' + value + ')\\n';\n        }\n      break;\n    case 'FROM_END':\n      var at = Blockly.Python.getAdjustedInt(block, 'AT', 1, true);\n        if (mode == 'SET') {\n          return makeAssignIndex(list, at, value);\n        } else if (mode == 'INSERT') {\n          return list + '.insert(' + at + ', ' + value + ')\\n';\n        }\n      break;\n    case 'RANDOM':\n        Blockly.Python.definitions_['import_random'] = 'import random';\n        var code = cacheList();\n        var xVar = Blockly.Python.variableDB_.getDistinctName(\n            'tmp_x', Blockly.Variables.NAME_TYPE);\n        code += xVar + ' = int(random.random() * len(' + list + '))\\n';\n        if (mode == 'SET') {\n          code += makeAssignIndex(list, xVar, value);\n          return code;\n        } else if (mode == 'INSERT') {\n          code += list + '.insert(' + xVar + ', ' + value + ')\\n';\n          return code;\n        }\n      break;\n  }\n  throw 'Unhandled combination (lists_setIndex).';\n};\n\nBlockly.Python['lists_sort_place'] = function(block) {\n  var varName = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.Variables.NAME_TYPE);\n  return varName + '.sort()\\n';\n};\n\n","FioiBlockly.OriginalBlocks['logic_compare'] = Blockly.Blocks['logic_compare'];\n\n// Use standard operator names (for instance '!=' instead of '≠')\nBlockly.Blocks['logic_compare'] = {\n  /**\n   * Block for comparison operator.\n   * @this Blockly.Block\n   */\n  init: function() {\n    var rtlOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['>', 'LT'],\n      ['>=', 'LTE'],\n      ['<', 'GT'],\n      ['<=', 'GTE']\n    ];\n    var ltrOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['<', 'LT'],\n      ['<=', 'LTE'],\n      ['>', 'GT'],\n      ['>=', 'GTE']\n    ];\n    var OPERATORS = this.RTL ? rtlOperators : ltrOperators;\n    this.setHelpUrl(Blockly.Msg.LOGIC_COMPARE_HELPURL);\n    this.setColour(Blockly.Blocks.logic.HUE);\n    this.setOutput(true, 'Boolean');\n    this.appendValueInput('A');\n    this.appendValueInput('B')\n        .appendField(new Blockly.FieldDropdown(OPERATORS), 'OP');\n    this.setInputsInline(true);\n    // Assign 'this' to a variable for use in the tooltip closure below.\n    var thisBlock = this;\n    this.setTooltip(function() {\n      var op = thisBlock.getFieldValue('OP');\n      var TOOLTIPS = {\n        'EQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ,\n        'NEQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ,\n        'LT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT,\n        'LTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE,\n        'GT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT,\n        'GTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE\n      };\n      return TOOLTIPS[op];\n    });\n    this.prevBlocks_ = [null, null];\n  },\n  /**\n   * Called whenever anything on the workspace changes.\n   * Prevent mismatched types from being compared.\n   * @param {!Blockly.Events.Abstract} e Change event.\n   * @this Blockly.Block\n   */\n  onchange: function(e) {\n    var blockA = this.getInputTargetBlock('A');\n    var blockB = this.getInputTargetBlock('B');\n    // Disconnect blocks that existed prior to this change if they don't match.\n    if (blockA && blockB &&\n        !blockA.outputConnection.checkType_(blockB.outputConnection)) {\n      // Mismatch between two inputs.  Disconnect previous and bump it away.\n      // Ensure that any disconnections are grouped with the causing event.\n      Blockly.Events.setGroup(e.group);\n      for (var i = 0; i < this.prevBlocks_.length; i++) {\n        var block = this.prevBlocks_[i];\n        if (block === blockA || block === blockB) {\n          block.unplug();\n          block.bumpNeighbours_();\n        }\n      }\n      Blockly.Events.setGroup(false);\n    }\n    this.prevBlocks_[0] = blockA;\n    this.prevBlocks_[1] = blockB;\n  }\n};\n\n","Blockly.Python['tables_2d_init'] = function(block) {\n  var blockVarName = block.getFieldValue('VAR');\n  if(blockVarName) {\n    var varName = Blockly.Python.variableDB_.getName(blockVarName, Blockly.Variables.NAME_TYPE);\n  } else {\n    var varName = 'unnamed_variable'; // Block is still loading\n  }\n\n  // Use a function to keep scope contained\n  Blockly.Python.definitions_['tables_2d_init'] = '' +\n    'def table2dInit(x, y, a):\\n' +\n    '    if x > 1000000 or y > 1000000: raise IndexError(\"' + Blockly.Msg.TABLES_TOO_BIG +'\")\\n' +\n    '    return [[a] * y for i in range(x)]';\n\n  var at1 = Blockly.Python.valueToCode(block, 'LINES', Blockly.Python.ORDER_COMMA) || '0';\n  var at2 = Blockly.Python.valueToCode(block, 'COLS', Blockly.Python.ORDER_COMMA) || '0';\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_ASSIGNMENT) || 'null';\n\n  return varName + ' = table2dInit(' + at1 + ', ' + at2 + ', ' + value + ');\\n';\n}\n\nBlockly.Python['tables_2d_set'] = function(block) {\n  var blockVarName = block.getFieldValue('VAR');\n  if(blockVarName) {\n    var varName = Blockly.Python.variableDB_.getName(blockVarName, Blockly.Variables.NAME_TYPE);\n  } else {\n    var varName = 'unnamed_variable'; // Block is still loading\n  }\n\n  var at1 = Blockly.Python.getAdjustedInt(block, 'LINE');\n  var at2 = Blockly.Python.getAdjustedInt(block, 'COL');\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || 'None';\n\n  var code = '';\n  // TODO :: set this as an option\n//  code += 'if ' + at1 + ' >= len(' + varName + ') or ' + at2 + ' >= len(' + varName + '[' + at1 + ']): raise IndexError(\"' + Blockly.Msg.TABLES_OUT_OF_BOUNDS + '\")\\n';\n  code += varName + '[' + at1 + '][' + at2 + '] = ' + value + \"\\n\";\n  return code;\n}\n\nBlockly.Python['tables_2d_get'] = function(block) {\n  var blockVarName = block.getFieldValue('VAR');\n  if(blockVarName) {\n    var varName = Blockly.Python.variableDB_.getName(blockVarName, Blockly.Variables.NAME_TYPE);\n  } else {\n    var varName = 'unnamed_variable'; // Block is still loading\n  }\n\n  var at1 = Blockly.Python.getAdjustedInt(block, 'LINE');\n  var at2 = Blockly.Python.getAdjustedInt(block, 'COL');\n  var code = varName + '[' + at1 + '][' + at2 + ']';\n  return [code, Blockly.Python.ORDER_MEMBER];\n}\n\nBlockly.Python['tables_3d_init'] = function(block) {\n  var blockVarName = block.getFieldValue('VAR');\n  if(blockVarName) {\n    var varName = Blockly.Python.variableDB_.getName(blockVarName, Blockly.Variables.NAME_TYPE);\n  } else {\n    var varName = 'unnamed_variable'; // Block is still loading\n  }\n\n  // Use a function to keep scope contained\n  Blockly.Python.definitions_['tables_3d_init'] = '' +\n    'def table3dInit(x, y, z, a):\\n' +\n    '    if x > 1000000 or y > 1000000 or z > 1000000: raise IndexError(\"' + Blockly.Msg.TABLES_TOO_BIG +'\")\\n' +\n    '    return [[[a] * z for i in range(y)] for j in range(x)]';\n\n  var at1 = Blockly.Python.valueToCode(block, 'LAYERS', Blockly.Python.ORDER_COMMA) || '0';\n  var at2 = Blockly.Python.valueToCode(block, 'LINES', Blockly.Python.ORDER_COMMA) || '0';\n  var at3 = Blockly.Python.valueToCode(block, 'COLS', Blockly.Python.ORDER_COMMA) || '0';\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_ASSIGNMENT) || 'null';\n\n  return varName + ' = table3dInit(' + at1 + ', ' + at2 + ', ' + at3 + ', ' + value + ');\\n';\n}\n\nBlockly.Python['tables_3d_set'] = function(block) {\n  var blockVarName = block.getFieldValue('VAR');\n  if(blockVarName) {\n    var varName = Blockly.Python.variableDB_.getName(blockVarName, Blockly.Variables.NAME_TYPE);\n  } else {\n    var varName = 'unnamed_variable'; // Block is still loading\n  }\n\n  var at1 = Blockly.Python.getAdjustedInt(block, 'LAYER');\n  var at2 = Blockly.Python.getAdjustedInt(block, 'LINE');\n  var at3 = Blockly.Python.getAdjustedInt(block, 'COL');\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || 'None';\n\n  var code = '';\n  // TODO :: set this as an option\n//  code += 'if ' + at1 + ' >= len(' + varName + ') or ' + at2 + ' >= len(' + varName + '[' + at1 + ']) or ' + at3 + ' >= len(' + varName + '[' + at1 + '][' + at2 + ']): raise IndexError(\"' + Blockly.Msg.TABLES_OUT_OF_BOUNDS + '\")\\n';\n  code += varName + '[' + at1 + '][' + at2 + '][' + at3 + '] = ' + value + \"\\n\";\n  return code;\n}\n\nBlockly.Python['tables_3d_get'] = function(block) {\n  var blockVarName = block.getFieldValue('VAR');\n  if(blockVarName) {\n    var varName = Blockly.Python.variableDB_.getName(blockVarName, Blockly.Variables.NAME_TYPE);\n  } else {\n    var varName = 'unnamed_variable'; // Block is still loading\n  }\n\n  var at1 = Blockly.Python.getAdjustedInt(block, 'LAYER');\n  var at2 = Blockly.Python.getAdjustedInt(block, 'LINE');\n  var at3 = Blockly.Python.getAdjustedInt(block, 'COL');\n  var code = varName + '[' + at1 + '][' + at2 + '][' + at3 + ']';\n  return [code, Blockly.Python.ORDER_MEMBER];\n}\n\n","Blockly.Python['text_print_noend'] = function(block) {\n  // Print statement.\n  var msg = Blockly.Python.valueToCode(block, 'TEXT',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  return 'print(' + msg + ', end=\"\")\\n';\n};\n\nBlockly.Python['text_eval'] = function(block) {\n  var expr = block.getFieldValue('EXPR');\n  var reindexExpr = Blockly.reindexExpression(expr);\n  if(reindexExpr === null) {\n    return ['false', Blockly.Python.ORDER_ATOMIC];\n  } else {\n    return [reindexExpr, Blockly.Python.ORDER_NONE];\n  }\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.JavaScript.init = function(workspace) {\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.JavaScript.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.JavaScript.functionNames_ = Object.create(null);\n\n  if (!Blockly.JavaScript.variableDB_) {\n    Blockly.JavaScript.variableDB_ =\n        new Blockly.Names(Blockly.JavaScript.RESERVED_WORDS_);\n  } else {\n    Blockly.JavaScript.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped JavaScript string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @private\n */\nBlockly.JavaScript.quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n\n\nBlockly.JavaScript['controls_for'] = function(block) {\n  // For loop.\n  var variable0 = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'TO',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var increment = Blockly.JavaScript.valueToCode(block, 'BY',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\n  var code;\n  if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\n      Blockly.isNumber(increment)) {\n    // All arguments are simple numbers.\n    var up = parseFloat(argument0) <= parseFloat(argument1);\n    code = 'for (var ' + variable0 + ' = ' + argument0 + '; ' +\n        variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\n        variable0;\n    var step = Math.abs(parseFloat(increment));\n    if (step == 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    var startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\n      startVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_start', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    var endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\n      var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_end', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    var incVar = Blockly.JavaScript.variableDB_.getDistinctName(\n        variable0 + '_inc', Blockly.Variables.NAME_TYPE);\n    code += 'var ' + incVar + ' = ';\n    if (Blockly.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += Blockly.JavaScript.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' +\n        incVar + ' >= 0 ? ' +\n        variable0 + ' <= ' + endVar + ' : ' +\n        variable0 + ' >= ' + endVar + '; ' +\n        variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nBlockly.JavaScript['variables_set'] = function(block) {\n  // Variable setter.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  return 'var ' + varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.Python.init = function(workspace) {\n  /**\n   * Empty loops or conditionals are not allowed in Python.\n   */\n  Blockly.Python.PASS = this.INDENT + 'pass\\n';\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.Python.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.Python.functionNames_ = Object.create(null);\n\n  if (!Blockly.Python.variableDB_) {\n    Blockly.Python.variableDB_ =\n        new Blockly.Names(Blockly.Python.RESERVED_WORDS_);\n  } else {\n    Blockly.Python.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped Python string, complete with quotes.\n * @param {string} string Text to encode.\n * @return {string} Python string.\n * @private\n */\nBlockly.Python.quote_ = function(string) {\n  // Can't use goog.string.quote since % must also be escaped.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\\%/g, '\\\\%')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n","Blockly.Python['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  if (block.getField('TIMES')) {\n    // Internal number.\n    var repeats = String(parseInt(block.getFieldValue('TIMES'), 10));\n  } else {\n    // External number.\n    var repeats = Blockly.Python.valueToCode(block, 'TIMES',\n        Blockly.Python.ORDER_NONE) || '0';\n  }\n  if (Blockly.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'int(' + repeats + ')';\n  }\n  var branch = Blockly.Python.statementToCode(block, 'DO');\n  branch = Blockly.Python.addLoopTrap(branch, block.id) ||\n      Blockly.Python.PASS;\n  var loopVar = Blockly.Python.variableDB_.getDistinctName(\n      'loop', Blockly.Variables.NAME_TYPE);\n  var code = 'for ' + loopVar + ' in range(' + repeats + '):\\n' + branch;\n  return code;\n};\n\nBlockly.Python['controls_repeat'] = Blockly.Python['controls_repeat_ext'];\n","Blockly.JavaScript['math_change'] = function(block) {\n  // Add to a variable in place.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'DELTA',\n      Blockly.JavaScript.ORDER_ADDITION) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var incrCode = varName + ' = (typeof ' + varName + ' == \\'number\\' ? ' + varName +\n      ' : 0) + ' + argument0 + ';\\n';\n\n  // Report value if available\n  var reportCode = \"reportBlockValue('\" + block.id + \"', \"+varName+\", '\"+varName+\"');\\n\";\n\n  return incrCode + reportCode;\n};\n"]}