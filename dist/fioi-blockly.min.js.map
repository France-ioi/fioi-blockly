{"version":3,"sources":["field_variable.js","scrollbar.js","variables.js","msg_fr.js","dicts.js","inputs.js","lists.js","logic.js","text.js","javascript.js","python.js","loops.js","python_procedures.js"],"names":["Blockly","FieldVariable","prototype","classValidator","text","promptName","promptText","defaultText","hideChaff","newVar","window","prompt","replace","Msg","RENAME_VARIABLE","NEW_VARIABLE","test","workspace","this","sourceBlock_","oldVar","getText","RENAME_VARIABLE_TITLE","Variables","renameVariable","NEW_VARIABLE_TITLE","Scrollbar","resizeViewHorizontal","hostMetrics","viewSize","viewWidth","flyoutWidth","pair_","scrollbarThickness","setScrollViewSize_","Math","max","xCoordinate","absoluteLeft","workspace_","RTL","yCoordinate","absoluteTop","viewHeight","setPosition","resizeContentHorizontal","setVisible","scrollViewSize_","contentWidth","ratio_","Infinity","isNaN","handleLength","setHandleLength_","handlePosition","viewLeft","contentLeft","setHandlePosition","constrainHandle_","flyoutOptions","any","anyButton","fixed","includedBlocks","get","set","incr","shortList","flyoutCategory","xmlList","options","scratchMode","fullVariableList","variableList","indexOf","newVarIdx","i","length","idx","splice","sort","goog","string","caseInsensitiveCompare","button","dom","createDom","setAttribute","registerButtonCallback","createVariable","getTargetWorkspace","push","concat","blockNames","Blocks","block","field","createVariableDom_","appendChild","createTextDom_","createMathNumberDom_","value","shadowBlock","numberField","VARIABLES_DEFAULT_NAME","TEXT_APPEND_VARIABLE","DICTS_CREATE_EMPTY_TITLE","DICTS_CREATE_WITH_CONTAINER_TITLE_ADD","DICTS_CREATE_WITH_CONTAINER_TOOLTIP","DICTS_CREATE_WITH_INPUT_WITH","DICTS_CREATE_WITH_ITEM_KEY","DICTS_CREATE_WITH_ITEM_MAPPING","DICTS_CREATE_WITH_ITEM_TITLE","DICTS_CREATE_WITH_ITEM_TOOLTIP","DICTS_CREATE_WITH_TOOLTIP","DICT_GET","DICT_GET_TO","DICT_KEYS","LISTS_APPEND_MSG","LISTS_APPEND_TOOLTIP","TEXT_PRINT_TITLE","TEXT_PRINT_TOOLTIP","TEXT_PRINT_NOEND_TITLE","TEXT_PRINT_NOEND_TOOLTIP","INPUT_NUM","INPUT_NUM_TOOLTIP","INPUT_CHAR","INPUT_CHAR_TOOLTIP","INPUT_WORD","INPUT_WORD_TOOLTIP","INPUT_LINE","INPUT_LINE_TOOLTIP","dicts","HUE","init","setColour","appendValueInput","setCheck","appendField","setInputsInline","setOutput","newQuote_","FieldTextInput","open","file","FieldImage","appendDummyInput","appendStatementInput","setTooltip","contextMenu","setPreviousStatement","setNextStatement","itemCount_","updateShape_","setMutator","Mutator","mutationToDom","container","document","createElement","domToMutation","xmlElement","parseInt","getAttribute","getInput","removeInput","setAlign","ALIGN_RIGHT","decompose","containerBlock","Block","obtain","initSvg","connection","x","itemBlock","connect","previousConnection","nextConnection","compose","getInputTargetBlock","connections","valueConnection_","targetBlock","saveConnections","value_input","targetConnection","inputs","lists","jsonInit","message0","args0","type","name","variable","check","previousStatement","nextStatement","colour","thisBlock","getFieldValue","rtlOperators","ltrOperators","OPERATORS","setHelpUrl","LOGIC_COMPARE_HELPURL","logic","FieldDropdown","op","TOOLTIPS","EQ","LOGIC_COMPARE_TOOLTIP_EQ","NEQ","LOGIC_COMPARE_TOOLTIP_NEQ","LT","LOGIC_COMPARE_TOOLTIP_LT","LTE","LOGIC_COMPARE_TOOLTIP_LTE","GT","LOGIC_COMPARE_TOOLTIP_GT","GTE","LOGIC_COMPARE_TOOLTIP_GTE","prevBlocks_","onchange","e","blockA","blockB","outputConnection","checkType_","Events","setGroup","group","unplug","bumpNeighbours_","texts","tooltip","helpUrl","TEXT_PRINT_HELPURL","JavaScript","definitions_","Object","create","functionNames_","variableDB_","reset","Names","RESERVED_WORDS_","quote_","variable0","getName","NAME_TYPE","argument0","valueToCode","ORDER_ASSIGNMENT","argument1","increment","branch","statementToCode","addLoopTrap","id","code","isNumber","up","parseFloat","step","abs","startVar","match","getDistinctName","endVar","incVar","INDENT","varName","Python","PASS","dict","ORDER_MEMBER","ORDER_NONE","ORDER_ATOMIC","Array","n","key","join","getField","repeats","String","Number","loopVar","globals","arguments_","funcName","Procedures","STATEMENT_PREFIX","prefixLines","INFINITE_LOOP_TRAP","returnValue","args","ORDER_FUNCTION_CALL","condition","hasReturnValue_","msg"],"mappings":"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","file":"fioi-blockly.min.js","sourcesContent":["Blockly.FieldVariable.prototype.classValidator = function(text) {\n  function promptName(promptText, defaultText) {\n    Blockly.hideChaff();\n    var newVar = window.prompt(promptText, defaultText);\n    // Merge runs of whitespace.  Strip leading and trailing whitespace.\n    if (newVar) {\n      newVar = newVar.replace(/[\\s\\xa0]+/g, ' ').replace(/^ | $/g, '');\n      // Allow only\n      if (newVar == Blockly.Msg.RENAME_VARIABLE ||\n          newVar == Blockly.Msg.NEW_VARIABLE ||\n          !(/^[a-zA-Z_]\\w*$/.test(newVar))) {\n        newVar = null;\n      }\n    }\n    return newVar;\n  }\n  var workspace = this.sourceBlock_.workspace;\n  if (text == Blockly.Msg.RENAME_VARIABLE) {\n    var oldVar = this.getText();\n    text = promptName(Blockly.Msg.RENAME_VARIABLE_TITLE.replace('%1', oldVar),\n                      oldVar);\n    if (text) {\n      Blockly.Variables.renameVariable(oldVar, text, workspace);\n    }\n    return null;\n  } else if (text == Blockly.Msg.NEW_VARIABLE) {\n    text = promptName(Blockly.Msg.NEW_VARIABLE_TITLE, '');\n    // Since variables are case-insensitive, ensure that if the new variable\n    // matches with an existing variable, the new case prevails throughout.\n    if (text) {\n      Blockly.Variables.renameVariable(text, text, workspace);\n      return text;\n    }\n    return null;\n  }\n  return undefined;\n};\n","/**\n * Recalculate a horizontal scrollbar's location on the screen and path length.\n * This should be called when the layout or size of the window has changed.\n * @param {!Object} hostMetrics A data structure describing all the\n *     required dimensions, possibly fetched from the host object.\n */\nBlockly.Scrollbar.prototype.resizeViewHorizontal = function(hostMetrics) {\n  var viewSize = hostMetrics.viewWidth - hostMetrics.flyoutWidth - 1;\n  if (this.pair_) {\n    // Shorten the scrollbar to make room for the corner square.\n    viewSize -= Blockly.Scrollbar.scrollbarThickness;\n  }\n  this.setScrollViewSize_(Math.max(0, viewSize));\n\n  var xCoordinate = hostMetrics.absoluteLeft + hostMetrics.flyoutWidth + 0.5;\n  if (this.pair_ && this.workspace_.RTL) {\n    xCoordinate += Blockly.Scrollbar.scrollbarThickness;\n  }\n\n  // Horizontal toolbar should always be just above the bottom of the workspace.\n  var yCoordinate = hostMetrics.absoluteTop + hostMetrics.viewHeight -\n      Blockly.Scrollbar.scrollbarThickness - 0.5;\n  this.setPosition(xCoordinate, yCoordinate);\n\n  // If the view has been resized, a content resize will also be necessary.  The\n  // reverse is not true.\n  this.resizeContentHorizontal(hostMetrics);\n};\n\n/**\n * Recalculate a horizontal scrollbar's location within its path and length.\n * This should be called when the contents of the workspace have changed.\n * @param {!Object} hostMetrics A data structure describing all the\n *     required dimensions, possibly fetched from the host object.\n */\nBlockly.Scrollbar.prototype.resizeContentHorizontal = function(hostMetrics) {\n  if (!this.pair_) {\n    // Only show the scrollbar if needed.\n    // Ideally this would also apply to scrollbar pairs, but that's a bigger\n    // headache (due to interactions with the corner square).\n    this.setVisible(this.scrollViewSize_ < hostMetrics.contentWidth);\n  }\n\n  this.ratio_ = this.scrollViewSize_ / hostMetrics.contentWidth;\n  if (this.ratio_ == -Infinity || this.ratio_ == Infinity ||\n      isNaN(this.ratio_)) {\n    this.ratio_ = 0;\n  }\n\n  var handleLength = (hostMetrics.viewWidth - hostMetrics.flyoutWidth) * this.ratio_;\n  this.setHandleLength_(Math.max(0, handleLength));\n\n  var handlePosition = (hostMetrics.viewLeft - hostMetrics.contentLeft) *\n      this.ratio_;\n  this.setHandlePosition(this.constrainHandle_(handlePosition));\n};\n\n","// Options for the variables flyout\nBlockly.Variables.flyoutOptions = {\n  any: true, // Allow to create any variable\n  anyButton: true, // Add the button to add variables (needs any=true)\n  fixed: [], // List of fixed variables (will create blocks for each of them)\n  includedBlocks: {get: true, set: true, incr: true}, // Blocks to add to the list\n  shortList: true, // Generate set/incr blocks only for the first (non-fixed) variable\n  };\n\n// Construct the blocks required by the flyout for the variable category.\nBlockly.Variables.flyoutCategory = function(workspace) {\n  var xmlList = [];\n  var options = Blockly.Variables.flyoutOptions;\n\n  // Detect if we're in Blockly or Scratch\n  var scratchMode = !!(Blockly.registerButtonCallback);\n  if(options.any) {\n    if(workspace) {\n      var fullVariableList = workspace.variableList;\n    } else {\n      if(options.fixed.indexOf('newvar') > -1) {\n        var newVarIdx = 0;\n        while(options.fixed.indexOf('newvar'+newVarIdx) > -1) {\n          newVarIdx++;\n        }\n        var fullVariableList = ['newvar'+newVarIdx];\n      } else {\n        var fullVariableList = ['newvar'];\n      }\n    }\n    for(var i=0; i<options.fixed.length; i++) {\n      var idx = fullVariableList.indexOf(options.fixed[i]);\n      if(idx > -1) {\n        fullVariableList.splice(idx, 1);\n      }\n    }\n    fullVariableList.sort(goog.string.caseInsensitiveCompare);\n\n    if(options.anyButton) {\n      var button = goog.dom.createDom('button');\n      button.setAttribute('text', Blockly.Msg.NEW_VARIABLE);\n      if(scratchMode) {\n        // Scratch\n        button.setAttribute('callbackKey', 'CREATE_VARIABLE');\n        Blockly.registerButtonCallback('CREATE_VARIABLE', function(button) {\n          Blockly.Variables.createVariable(button.getTargetWorkspace());\n        });\n      }\n      xmlList.push(button);\n    }\n  } else {\n    var fullVariableList = [];\n  }\n\n  var variableList = options.fixed.concat(fullVariableList);\n\n  if (variableList.length > 0) {\n    if(scratchMode) {\n      var blockNames = {\n        get: 'data_variable',\n        set: 'data_setvariableto',\n        incr: 'data_changevariableby'\n        };\n    } else {\n      var blockNames = {\n        get: 'variables_get',\n        set: 'variables_set',\n        incr: 'math_change'\n        };\n    }\n\n    if (options.includedBlocks.get && Blockly.Blocks[blockNames.get]) {\n      for(var i=0; i<variableList.length; i++) {\n        // <block type=\"variables_get\" gap=\"8\">\n        //   <field name=\"VAR\">item</field>\n        // </block>\n        var block = goog.dom.createDom('block');\n        block.setAttribute('type', blockNames.get);\n        if (i < options.fixed.length) {\n          block.setAttribute('editable', 'false');\n        }\n        if (i == variableList.length - 1) {\n          block.setAttribute('gap', 24);\n        } else {\n          block.setAttribute('gap', 8);\n        }\n\n        if(scratchMode) {\n          var field = Blockly.Variables.createVariableDom_(variableList[i]);\n        } else {\n          var field = goog.dom.createDom('field', null, variableList[i]);\n          field.setAttribute('name', 'VAR');\n        }\n\n        block.appendChild(field);\n        xmlList.push(block);\n      }\n    }\n\n    if (options.includedBlocks.set && Blockly.Blocks[blockNames.set]) {\n      for(var i=0; i<variableList.length; i++) {\n        // <block type=\"variables_set\" gap=\"20\">\n        //   <field name=\"VAR\">item</field>\n        // </block>\n        if(options.shortList && i > options.fixed.length) {\n          break;\n        }\n\n        var block = goog.dom.createDom('block');\n        block.setAttribute('type', blockNames.set);\n        if (i < options.fixed.length) {\n          block.setAttribute('editable', 'false');\n        }\n        if (i == variableList.length - 1) {\n          block.setAttribute('gap', 24);\n        } else {\n          block.setAttribute('gap', 8);\n        }\n\n        if(scratchMode) {\n          var field = Blockly.Variables.createVariableDom_(variableList[i]);\n          block.appendChild(field);\n          block.appendChild(Blockly.Variables.createTextDom_());\n        } else {\n          var field = goog.dom.createDom('field', null, variableList[i]);\n          field.setAttribute('name', 'VAR');\n          block.appendChild(field);\n        }\n\n        xmlList.push(block);\n      }\n    }\n    if (options.includedBlocks.incr && Blockly.Blocks[blockNames.incr]) {\n      for(var i=0; i<variableList.length; i++) {\n        // <block type=\"math_change\">\n        //   <value name=\"DELTA\">\n        //     <shadow type=\"math_number\">\n        //       <field name=\"NUM\">1</field>\n        //     </shadow>\n        //   </value>\n        // </block>\n        if(options.shortList && i > options.fixed.length) {\n          break;\n        }\n\n        var block = goog.dom.createDom('block');\n        block.setAttribute('type', blockNames.incr);\n        if (i < options.fixed.length) {\n          block.setAttribute('editable', 'false');\n        }\n        if (i == variableList.length - 1) {\n          block.setAttribute('gap', 24);\n        } else {\n          block.setAttribute('gap', 8);\n        }\n        if(scratchMode) {\n          var field = Blockly.Variables.createVariableDom_(variableList[i]);\n          block.appendChild(field);\n          block.appendChild(Blockly.Variables.createMathNumberDom_())\n        } else {\n          var value = goog.dom.createDom('value');\n          value.setAttribute('name', 'DELTA');\n          block.appendChild(value);\n\n          var shadowBlock = goog.dom.createDom('shadow');\n          shadowBlock.setAttribute('type', 'math_number');\n          value.appendChild(shadowBlock);\n\n          var numberField = goog.dom.createDom('field', null, '1');\n          numberField.setAttribute('name', 'NUM');\n          shadowBlock.appendChild(numberField);\n\n          var field = goog.dom.createDom('field', null, variableList[i]);\n          field.setAttribute('name', 'VAR');\n          block.appendChild(field);\n        }\n\n        xmlList.push(block);\n      }\n    }\n\n  }\n  return xmlList;\n};\n\n","Blockly.Msg.VARIABLES_DEFAULT_NAME = \"element\";\nBlockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;\n\nBlockly.Msg.DICTS_CREATE_EMPTY_TITLE = \"dictionnaire vide\";\nBlockly.Msg.DICTS_CREATE_WITH_CONTAINER_TITLE_ADD = \"Créer un dictionnaire\";\nBlockly.Msg.DICTS_CREATE_WITH_CONTAINER_TOOLTIP = \"\";\nBlockly.Msg.DICTS_CREATE_WITH_INPUT_WITH = \"créer un dictionnaire :\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_KEY = \"cle\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_MAPPING = \":\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_TITLE = \"clé/valeur\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_TOOLTIP = \"\";\nBlockly.Msg.DICTS_CREATE_WITH_TOOLTIP = \"\";\nBlockly.Msg.DICT_GET = \"récupérer la clé\";\nBlockly.Msg.DICT_GET_TO = \"de\";\nBlockly.Msg.DICT_KEYS = \"liste des clés de\";\nBlockly.Msg.LISTS_APPEND_MSG = \"à la liste %1 ajouter l'élément %2\";\nBlockly.Msg.LISTS_APPEND_TOOLTIP = \"Ajouter un élément à la liste '%1'\";\nBlockly.Msg.TEXT_PRINT_TITLE = \"afficher la ligne %1\";\nBlockly.Msg.TEXT_PRINT_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, avec retour à la ligne après.\";\nBlockly.Msg.TEXT_PRINT_NOEND_TITLE = \"afficher %1\";\nBlockly.Msg.TEXT_PRINT_NOEND_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, sans retour à la ligne.\";\n\nBlockly.Msg.INPUT_NUM = \"lire un nombre\";\nBlockly.Msg.INPUT_NUM_TOOLTIP = \"Lit un nombre sur l'entrée du programme.\";\nBlockly.Msg.INPUT_CHAR = \"lire un caractère\";\nBlockly.Msg.INPUT_CHAR_TOOLTIP = \"Lit un caractère sur l'entrée du programme.\";\nBlockly.Msg.INPUT_WORD = \"lire un mot\";\nBlockly.Msg.INPUT_WORD_TOOLTIP = \"Lit un mot sur l'entrée du programme.\";\nBlockly.Msg.INPUT_LINE = \"lire une ligne\";\nBlockly.Msg.INPUT_LINE_TOOLTIP = \"Lit une ligne sur l'entrée du programme.\";\n","Blockly.Python['dict_get'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dict_get_literal'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.quote_(block.getFieldValue('ITEM'));\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dicts_create_with'] = function(block) {\n    var value_keys = Blockly.Python.valueToCode(block, 'keys', Blockly.   Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = new Array(block.itemCount_);\n  \n    for (var n = 0; n < block.itemCount_; n++) {\n        var key = Blockly.Python.quote_(block.getFieldValue('KEY' + n));\n        var value = Blockly.Python.valueToCode(block, 'VALUE' + n,\n                Blockly.Python.ORDER_NONE) || '___';\n        code[n] = key +\": \"+ value;\n    }\n    code = '{' + code.join(', ') + '}';\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['dict_keys'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var code = dict + '.keys()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n","Blockly.Python['input_num'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'int(input_word())';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_char'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.read(1)';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_word'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'input_word()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_line'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.readline()[:-1]';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n","Blockly.Python['lists_append'] = function(block) {\n  // Append\n  var varName = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.Variables.NAME_TYPE);\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  return varName + '.append(' + value + ')\\n';\n};\n","Blockly.Blocks['logic_compare'] = {\n  /**\n   * Block for comparison operator.\n   * @this Blockly.Block\n   */\n  init: function() {\n    var rtlOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['>', 'LT'],\n      ['>=', 'LTE'],\n      ['<', 'GT'],\n      ['<=', 'GTE']\n    ];\n    var ltrOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['<', 'LT'],\n      ['<=', 'LTE'],\n      ['>', 'GT'],\n      ['>=', 'GTE']\n    ];\n    var OPERATORS = this.RTL ? rtlOperators : ltrOperators;\n    this.setHelpUrl(Blockly.Msg.LOGIC_COMPARE_HELPURL);\n    this.setColour(Blockly.Blocks.logic.HUE);\n    this.setOutput(true, 'Boolean');\n    this.appendValueInput('A');\n    this.appendValueInput('B')\n        .appendField(new Blockly.FieldDropdown(OPERATORS), 'OP');\n    this.setInputsInline(true);\n    // Assign 'this' to a variable for use in the tooltip closure below.\n    var thisBlock = this;\n    this.setTooltip(function() {\n      var op = thisBlock.getFieldValue('OP');\n      var TOOLTIPS = {\n        'EQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ,\n        'NEQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ,\n        'LT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT,\n        'LTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE,\n        'GT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT,\n        'GTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE\n      };\n      return TOOLTIPS[op];\n    });\n    this.prevBlocks_ = [null, null];\n  },\n  /**\n   * Called whenever anything on the workspace changes.\n   * Prevent mismatched types from being compared.\n   * @param {!Blockly.Events.Abstract} e Change event.\n   * @this Blockly.Block\n   */\n  onchange: function(e) {\n    var blockA = this.getInputTargetBlock('A');\n    var blockB = this.getInputTargetBlock('B');\n    // Disconnect blocks that existed prior to this change if they don't match.\n    if (blockA && blockB &&\n        !blockA.outputConnection.checkType_(blockB.outputConnection)) {\n      // Mismatch between two inputs.  Disconnect previous and bump it away.\n      // Ensure that any disconnections are grouped with the causing event.\n      Blockly.Events.setGroup(e.group);\n      for (var i = 0; i < this.prevBlocks_.length; i++) {\n        var block = this.prevBlocks_[i];\n        if (block === blockA || block === blockB) {\n          block.unplug();\n          block.bumpNeighbours_();\n        }\n      }\n      Blockly.Events.setGroup(false);\n    }\n    this.prevBlocks_[0] = blockA;\n    this.prevBlocks_[1] = blockB;\n  }\n};\n\n","Blockly.Python['text_print_noend'] = function(block) {\n  // Print statement.\n  var msg = Blockly.Python.valueToCode(block, 'TEXT',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  return 'print(' + msg + ', end=\"\")\\n';\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.JavaScript.init = function(workspace) {\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.JavaScript.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.JavaScript.functionNames_ = Object.create(null);\n\n  if (!Blockly.JavaScript.variableDB_) {\n    Blockly.JavaScript.variableDB_ =\n        new Blockly.Names(Blockly.JavaScript.RESERVED_WORDS_);\n  } else {\n    Blockly.JavaScript.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped JavaScript string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @private\n */\nBlockly.JavaScript.quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n\n\nBlockly.JavaScript['controls_for'] = function(block) {\n  // For loop.\n  var variable0 = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'TO',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var increment = Blockly.JavaScript.valueToCode(block, 'BY',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\n  var code;\n  if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\n      Blockly.isNumber(increment)) {\n    // All arguments are simple numbers.\n    var up = parseFloat(argument0) <= parseFloat(argument1);\n    code = 'for (var ' + variable0 + ' = ' + argument0 + '; ' +\n        variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\n        variable0;\n    var step = Math.abs(parseFloat(increment));\n    if (step == 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    var startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\n      startVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_start', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    var endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\n      var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_end', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    var incVar = Blockly.JavaScript.variableDB_.getDistinctName(\n        variable0 + '_inc', Blockly.Variables.NAME_TYPE);\n    code += 'var ' + incVar + ' = ';\n    if (Blockly.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += Blockly.JavaScript.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' +\n        incVar + ' >= 0 ? ' +\n        variable0 + ' <= ' + endVar + ' : ' +\n        variable0 + ' >= ' + endVar + '; ' +\n        variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nBlockly.JavaScript['variables_set'] = function(block) {\n  // Variable setter.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  return 'var ' + varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.Python.init = function(workspace) {\n  /**\n   * Empty loops or conditionals are not allowed in Python.\n   */\n  Blockly.Python.PASS = this.INDENT + 'pass\\n';\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.Python.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.Python.functionNames_ = Object.create(null);\n\n  if (!Blockly.Python.variableDB_) {\n    Blockly.Python.variableDB_ =\n        new Blockly.Names(Blockly.Python.RESERVED_WORDS_);\n  } else {\n    Blockly.Python.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped Python string, complete with quotes.\n * @param {string} string Text to encode.\n * @return {string} Python string.\n * @private\n */\nBlockly.Python.quote_ = function(string) {\n  // Can't use goog.string.quote since % must also be escaped.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\\%/g, '\\\\%')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n","Blockly.Python['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  if (block.getField('TIMES')) {\n    // Internal number.\n    var repeats = String(parseInt(block.getFieldValue('TIMES'), 10));\n  } else {\n    // External number.\n    var repeats = Blockly.Python.valueToCode(block, 'TIMES',\n        Blockly.Python.ORDER_NONE) || '0';\n  }\n  if (Blockly.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'int(' + repeats + ')';\n  }\n  var branch = Blockly.Python.statementToCode(block, 'DO');\n  branch = Blockly.Python.addLoopTrap(branch, block.id) ||\n      Blockly.Python.PASS;\n  var loopVar = Blockly.Python.variableDB_.getDistinctName(\n      'loop', Blockly.Variables.NAME_TYPE);\n  var code = 'for ' + loopVar + ' in range(' + repeats + '):\\n' + branch;\n  return code;\n};\n\nBlockly.Python['controls_repeat'] = Blockly.Python['controls_repeat_ext'];\n","Blockly.Python['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  // First, add a 'global' statement for every variable that is assigned.\n  // acbart: Actually, skip that, globals are bad news!\n  var globals = []; //Blockly.Variables.allVariables(block);\n  for (var i = globals.length - 1; i >= 0; i--) {\n    var varName = globals[i];\n    if (block.arguments_.indexOf(varName) == -1) {\n      globals[i] = Blockly.Python.variableDB_.getName(varName,\n          Blockly.Variables.NAME_TYPE);\n    } else {\n      // This variable is actually a parameter name.  Do not include it in\n      // the list of globals, thus allowing it be of local scope.\n      globals.splice(i, 1);\n    }\n  }\n  globals = globals.length ? '  global ' + globals.join(', ') + '\\n' : '';\n  // Get the function's name\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  // Get the stack of code\n  var branch = Blockly.Python.statementToCode(block, 'STACK');\n  // Handle prefixing\n  if (Blockly.Python.STATEMENT_PREFIX) {\n    branch = Blockly.Python.prefixLines(\n        Blockly.Python.STATEMENT_PREFIX.replace(/%1/g,\n        '\\'' + block.id + '\\''), Blockly.Python.INDENT) + branch;\n  }\n  // Handle infinite loop trapping\n  if (Blockly.Python.INFINITE_LOOP_TRAP) {\n    branch = Blockly.Python.INFINITE_LOOP_TRAP.replace(/%1/g,\n        '\"' + block.id + '\"') + branch;\n  }\n  // Handle return value\n  var returnValue = Blockly.Python.valueToCode(block, 'RETURN',\n      Blockly.Python.ORDER_NONE) || '';\n  if (returnValue) {\n    returnValue = '  return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = Blockly.Python.PASS;\n  }\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.variableDB_.getName(block.arguments_[x],\n        Blockly.Variables.NAME_TYPE);\n  }\n  var code = 'def ' + funcName + '(' + args.join(', ') + '):\\n' +\n      globals + branch + returnValue;\n  //acbart: I'm not sure why this is used here. It was fine before when\n  //        functions didn't have anything after them, but now it's deadly.\n  //code = Blockly.Python.scrub_(block, code);\n  //Blockly.Python.definitions_[funcName] = code;\n  return code;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nBlockly.Python['procedures_defnoreturn'] =\n    Blockly.Python['procedures_defreturn'];\n\nBlockly.Python['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.valueToCode(block, 'ARG' + x,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = funcName + '(' + args.join(', ') + ')';\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.valueToCode(block, 'ARG' + x,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = funcName + '(' + args.join(', ') + ')\\n';\n  return code;\n};\n\nBlockly.Python['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  var condition = Blockly.Python.valueToCode(block, 'CONDITION',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = 'if ' + condition + ':\\n';\n  if (block.hasReturnValue_) {\n    var value = Blockly.Python.valueToCode(block, 'VALUE',\n        Blockly.Python.ORDER_NONE) || '___';\n    code += '  return ' + value + '\\n';\n  } else {\n    code += '  return\\n';\n  }\n  return code;\n};\n\nBlockly.Python['procedures_return'] = function(block) {\n  // return value from a procedure.\n  var code = \"return\";\n  if (block.hasReturnValue_) {\n    var value = Blockly.Python.valueToCode(block, 'VALUE',\n        Blockly.Python.ORDER_NONE) || '___';\n    code += ' ' + value + '\\n';\n  } else {\n    code += '\\n';\n  }\n  return code;\n};\n"]}