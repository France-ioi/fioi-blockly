{"version":3,"sources":["dropdowndiv.js","field_variable.js","procedures.js","scrollbar.js","variables.js","workspace_svg.js","msg_fr.js","dicts.js","inputs.js","lists.js","logic.js","text.js","javascript.js","python.js","loops.js","math.js","python_procedures.js"],"names":["goog","provide","require","Blockly","DropDownDiv","DIV_","boundsElement_","owner_","ARROW_SIZE","BORDER_SIZE","ARROW_HORIZONTAL_PADDING","PADDING_Y","ANIMATION_TIME","animateOutTimer_","onHide_","isInAnimation","isInAnimationTimer","createDom","dom","document","body","appendChild","content_","arrow_","style","transition","window","addEventListener","hideIfNotShowing","setBoundsElement","boundsElement","getContentDiv","clearContent","innerHTML","setColour","backgroundColour","borderColour","backgroundColor","borderColor","setCategory","category","setAttribute","showPositionedByBlock","owner","block","opt_onHide","opt_secondaryYOffset","scale","workspace","bBox","width","height","blockSvg","getSvgRoot","i","children","length","classList","position","getBoundingClientRect","primaryX","left","primaryY","top","secondaryX","secondaryY","getParentSvg","parentNode","show","this","clearTimeout","setTimeout","div","metrics","getPositionMetrics","transform","arrowX","arrowY","arrowAtTop","initialX","initialY","display","opacity","dx","finalX","dy","finalY","renderX","renderY","renderedSecondary","boundPosition","boundSize","getSize","divSize","Math","max","min","centerX","isVisible","hideIfOwner","hide","hideWithoutAnimation","FieldVariable","prototype","classValidator","text","sourceBlock_","Msg","RENAME_VARIABLE","oldVar","getText","hideChaff","cb","renameVariable","Variables","promptName","RENAME_VARIABLE_TITLE","replace","DELETE_VARIABLE","deleteVariable","Procedures","flyoutOptions","includedBlocks","noret","ret","ifret","flyoutCategory","populateProcedures","procedureList","templateName","name","args","mutation","j","arg","xmlList","push","incl","Blocks","tuple","allProcedures","Scrollbar","resizeViewHorizontal","hostMetrics","viewSize","viewWidth","flyoutWidth","pair_","scrollbarThickness","setScrollViewSize_","xCoordinate","absoluteLeft","workspace_","RTL","yCoordinate","absoluteTop","viewHeight","setPosition","resizeContentHorizontal","setVisible","scrollViewSize_","contentWidth","ratio_","Infinity","isNaN","handleLength","setHandleLength_","handlePosition","viewLeft","contentLeft","setHandlePosition","constrainHandle_","any","anyButton","fixed","get","set","incr","shortList","options","scratchMode","fullVariableList","variableList","indexOf","newVarIdx","idx","splice","sort","string","caseInsensitiveCompare","button","NEW_VARIABLE","registerButtonCallback","createVariable","getTargetWorkspace","concat","blockNames","field","createVariableDom_","createTextDom_","createMathNumberDom_","value","shadowBlock","numberField","variableIndexOf","displayHelper","showPopupMessage","VARIABLE_ALREADY_EXISTS","toLowerCase","NEW_VARIABLE_TITLE","promptText","defaultText","callback","newVar","WorkspaceSvg","reportValue","id","getBlockById","contentDiv","valueReportBox","createElement","VARIABLES_DEFAULT_NAME","TEXT_APPEND_VARIABLE","DICTS_CREATE_EMPTY_TITLE","DICTS_CREATE_WITH_CONTAINER_TITLE_ADD","DICTS_CREATE_WITH_CONTAINER_TOOLTIP","DICTS_CREATE_WITH_INPUT_WITH","DICTS_CREATE_WITH_ITEM_KEY","DICTS_CREATE_WITH_ITEM_MAPPING","DICTS_CREATE_WITH_ITEM_TITLE","DICTS_CREATE_WITH_ITEM_TOOLTIP","DICTS_CREATE_WITH_TOOLTIP","DICT_GET","DICT_GET_TO","DICT_KEYS","LISTS_APPEND_MSG","LISTS_APPEND_TOOLTIP","TEXT_PRINT_TITLE","TEXT_PRINT_TOOLTIP","TEXT_PRINT_NOEND_TITLE","TEXT_PRINT_NOEND_TOOLTIP","INPUT_NUM","INPUT_NUM_TOOLTIP","INPUT_CHAR","INPUT_CHAR_TOOLTIP","INPUT_WORD","INPUT_WORD_TOOLTIP","INPUT_LINE","INPUT_LINE_TOOLTIP","CANNOT_DELETE_VARIABLE_PROCEDURE","DATA_LISTREPEAT_TITLE","dicts","HUE","init","appendValueInput","setCheck","appendField","setInputsInline","setOutput","newQuote_","FieldTextInput","open","file","FieldImage","appendDummyInput","appendStatementInput","setTooltip","contextMenu","setPreviousStatement","setNextStatement","itemCount_","updateShape_","setMutator","Mutator","mutationToDom","container","domToMutation","xmlElement","parseInt","getAttribute","getInput","removeInput","setAlign","ALIGN_RIGHT","decompose","containerBlock","Block","obtain","initSvg","connection","x","itemBlock","connect","previousConnection","nextConnection","compose","getInputTargetBlock","connections","valueConnection_","targetBlock","saveConnections","value_input","targetConnection","inputs","lists","jsonInit","message0","args0","type","variable","check","previousStatement","nextStatement","colour","thisBlock","getFieldValue","rtlOperators","ltrOperators","OPERATORS","setHelpUrl","LOGIC_COMPARE_HELPURL","logic","FieldDropdown","op","TOOLTIPS","EQ","LOGIC_COMPARE_TOOLTIP_EQ","NEQ","LOGIC_COMPARE_TOOLTIP_NEQ","LT","LOGIC_COMPARE_TOOLTIP_LT","LTE","LOGIC_COMPARE_TOOLTIP_LTE","GT","LOGIC_COMPARE_TOOLTIP_GT","GTE","LOGIC_COMPARE_TOOLTIP_GTE","prevBlocks_","onchange","e","blockA","blockB","outputConnection","checkType_","Events","setGroup","group","unplug","bumpNeighbours_","texts","tooltip","helpUrl","TEXT_PRINT_HELPURL","JavaScript","definitions_","Object","create","functionNames_","variableDB_","reset","Names","RESERVED_WORDS_","quote_","variable0","getName","NAME_TYPE","argument0","valueToCode","ORDER_ASSIGNMENT","argument1","increment","branch","statementToCode","addLoopTrap","code","isNumber","up","parseFloat","step","abs","startVar","match","getDistinctName","endVar","incVar","INDENT","varName","Python","PASS","dict","ORDER_MEMBER","ORDER_NONE","ORDER_ATOMIC","Array","n","key","join","getField","repeats","String","Number","loopVar","ORDER_ADDITION","incrCode","reportCode","assignCode","globals","arguments_","funcName","STATEMENT_PREFIX","prefixLines","INFINITE_LOOP_TRAP","returnValue","ORDER_FUNCTION_CALL","condition","hasReturnValue_","msg"],"mappings":"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","file":"fioi-blockly.min.js","sourcesContent":["/**\n * @license\n * Visual Blocks Editor\n *\n * Copyright 2016 Massachusetts Institute of Technology\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview A div that floats on top of the workspace, for drop-down menus.\n * The drop-down can be kept inside the workspace, animate in/out, etc.\n * @author tmickel@mit.edu (Tim Mickel)\n */\n\n'use strict';\n\ngoog.provide('Blockly.DropDownDiv');\n\ngoog.require('goog.dom');\ngoog.require('goog.style');\n\n/**\n * Class for drop-down div.\n * @constructor\n */\nBlockly.DropDownDiv = function() {\n};\n\n/**\n * The div element. Set once by Blockly.DropDownDiv.createDom.\n * @type {Element}\n * @private\n */\nBlockly.DropDownDiv.DIV_ = null;\n\n/**\n * Drop-downs will appear within the bounds of this element if possible.\n * Set in Blockly.DropDownDiv.setBoundsElement.\n * @type {Element}\n * @private\n */\nBlockly.DropDownDiv.boundsElement_ = null;\n\n/**\n * The object currently using the drop-down.\n * @type {Object}\n * @private\n */\nBlockly.DropDownDiv.owner_ = null;\n\n/**\n * Arrow size in px. Should match the value in CSS (need to position pre-render).\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.ARROW_SIZE = 16;\n\n/**\n * Drop-down border size in px. Should match the value in CSS (need to position the arrow).\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.BORDER_SIZE = 1;\n\n/**\n * Amount the arrow must be kept away from the edges of the main drop-down div, in px.\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.ARROW_HORIZONTAL_PADDING = 12;\n\n/**\n * Amount drop-downs should be padded away from the source, in px.\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.PADDING_Y = 20;\n\n/**\n * Length of animations in seconds.\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.ANIMATION_TIME = 0.25;\n\n/**\n * Timer for animation out, to be cleared if we need to immediately hide\n * without disrupting new shows.\n * @type {number}\n */\nBlockly.DropDownDiv.animateOutTimer_ = null;\n\n/**\n * Callback for when the drop-down is hidden.\n * @type {Function}\n */\nBlockly.DropDownDiv.onHide_ = 0;\n\n// Don't hide a DropDownDiv we're showing\nBlockly.DropDownDiv.isInAnimation = false;\nBlockly.DropDownDiv.isInAnimationTimer = null;\n\n/**\n * Create and insert the DOM element for this div.\n * @param {Element} container Element that the div should be contained in.\n */\nBlockly.DropDownDiv.createDom = function() {\n  if (Blockly.DropDownDiv.DIV_) {\n    return;  // Already created.\n  }\n  Blockly.DropDownDiv.DIV_ = goog.dom.createDom('div', 'blocklyDropDownDiv');\n  document.body.appendChild(Blockly.DropDownDiv.DIV_);\n  Blockly.DropDownDiv.content_ = goog.dom.createDom('div', 'blocklyDropDownContent');\n  Blockly.DropDownDiv.DIV_.appendChild(Blockly.DropDownDiv.content_);\n  Blockly.DropDownDiv.arrow_ = goog.dom.createDom('div', 'blocklyDropDownArrow');\n  Blockly.DropDownDiv.DIV_.appendChild(Blockly.DropDownDiv.arrow_);\n\n  // Transition animation for transform: translate() and opacity.\n  Blockly.DropDownDiv.DIV_.style.transition = 'transform ' +\n    Blockly.DropDownDiv.ANIMATION_TIME + 's, ' +\n    'opacity ' + Blockly.DropDownDiv.ANIMATION_TIME + 's';\n  window.addEventListener('mousedown', Blockly.DropDownDiv.hideIfNotShowing, true);\n};\n\n/**\n * Set an element to maintain bounds within. Drop-downs will appear\n * within the box of this element if possible.\n * @param {Element} boundsElement Element to bound drop-down to.\n */\nBlockly.DropDownDiv.setBoundsElement = function(boundsElement) {\n  Blockly.DropDownDiv.boundsElement_ = boundsElement;\n};\n\n/**\n * Provide the div for inserting content into the drop-down.\n * @return {Element} Div to populate with content\n */\nBlockly.DropDownDiv.getContentDiv = function() {\n  return Blockly.DropDownDiv.content_;\n};\n\n/**\n * Clear the content of the drop-down.\n */\nBlockly.DropDownDiv.clearContent = function() {\n  Blockly.DropDownDiv.content_.innerHTML = '';\n};\n\n/**\n * Set the colour for the drop-down.\n * @param {string} backgroundColour Any CSS color for the background\n * @param {string} borderColour Any CSS color for the border\n */\nBlockly.DropDownDiv.setColour = function(backgroundColour, borderColour) {\n  Blockly.DropDownDiv.DIV_.style.backgroundColor = backgroundColour;\n  Blockly.DropDownDiv.DIV_.style.borderColor = borderColour;\n};\n\n/**\n * Set the category for the drop-down.\n * @param {string} category The new category for the drop-down.\n */\nBlockly.DropDownDiv.setCategory = function(category) {\n  Blockly.DropDownDiv.DIV_.setAttribute('data-category', category);\n};\n\n// Modified: find blocklyPath\nBlockly.DropDownDiv.showPositionedByBlock = function(owner, block,\n      opt_onHide, opt_secondaryYOffset) {\n  var scale = block.workspace.scale;\n  var bBox = {width: block.width, height: block.height};\n  bBox.width *= scale;\n  bBox.height *= scale;\n  var blockSvg = block.getSvgRoot();\n  for(var i=0; i<blockSvg.children.length; i++) {\n     if(blockSvg.children[i].classList[0] == 'blocklyPath') {\n        blockSvg = blockSvg.children[i];\n        break;\n     }\n  }\n  var position = blockSvg.getBoundingClientRect();\n  // If we can fit it, render below the block.\n  var primaryX = position.left + position.width / 2;\n  var primaryY = position.top + position.height;\n  // If we can't fit it, render above the entire parent block.\n  var secondaryX = primaryX;\n  var secondaryY = position.top;\n  if (opt_secondaryYOffset) {\n    secondaryY += opt_secondaryYOffset;\n  }\n  // Set bounds to workspace; show the drop-down.\n  Blockly.DropDownDiv.setBoundsElement(block.workspace.getParentSvg().parentNode);\n  return Blockly.DropDownDiv.show(this, primaryX, primaryY, secondaryX, secondaryY, opt_onHide);\n};\n\n/**\n * Show and place the drop-down.\n * The drop-down is placed with an absolute \"origin point\" (x, y) - i.e.,\n * the arrow will point at this origin and box will positioned below or above it.\n * If we can maintain the container bounds at the primary point, the arrow will\n * point there, and the container will be positioned below it.\n * If we can't maintain the container bounds at the primary point, fall-back to the\n * secondary point and position above.\n * @param {Object} owner The object showing the drop-down\n * @param {number} primaryX Desired origin point x, in absolute px\n * @param {number} primaryY Desired origin point y, in absolute px\n * @param {number} secondaryX Secondary/alternative origin point x, in absolute px\n * @param {number} secondaryY Secondary/alternative origin point y, in absolute px\n * @param {Function=} opt_onHide Optional callback for when the drop-down is hidden\n * @return {boolean} True if the menu rendered at the primary origin point.\n */\nBlockly.DropDownDiv.show = function(owner, primaryX, primaryY, secondaryX, secondaryY, opt_onHide) {\n  // Do not hide the div while we're showing it\n  Blockly.DropDownDiv.isInAnimation = true;\n  if(Blockly.DropDownDiv.animateOutTimer_) {\n    window.clearTimeout(Blockly.DropDownDiv.animateOutTimer_);\n    Blockly.DropDownDiv.animateOutTimer_ = null;\n  }\n  if(Blockly.DropDownDiv.isInAnimationTimer) {\n    window.clearTimeout(Blockly.DropDownDiv.isInAnimationTimer);\n    Blockly.DropDownDiv.isInAnimationTimer = null;\n  }\n  Blockly.DropDownDiv.isInAnimationTimer = window.setTimeout(function () { Blockly.DropDownDiv.isInAnimation = false; }, Blockly.DropDownDiv.ANIMATION_TIME*1000);\n\n  Blockly.DropDownDiv.owner_ = owner;\n  Blockly.DropDownDiv.onHide_ = opt_onHide;\n  var div = Blockly.DropDownDiv.DIV_;\n  var metrics = Blockly.DropDownDiv.getPositionMetrics(primaryX, primaryY, secondaryX, secondaryY);\n  // Update arrow CSS\n  Blockly.DropDownDiv.arrow_.style.transform = 'translate(' +\n    metrics.arrowX + 'px,' + metrics.arrowY + 'px) rotate(45deg)';\n  Blockly.DropDownDiv.arrow_.setAttribute('class',\n    metrics.arrowAtTop ? 'blocklyDropDownArrow arrowTop' : 'blocklyDropDownArrow arrowBottom');\n\n  // When we change `translate` multiple times in close succession,\n  // Chrome may choose to wait and apply them all at once.\n  // Since we want the translation to initial X, Y to be immediate,\n  // and the translation to final X, Y to be animated,\n  // we saw problems where both would be applied after animation was turned on,\n  // making the dropdown appear to fly in from (0, 0).\n  // Using both `left`, `top` for the initial translation and then `translate`\n  // for the animated transition to final X, Y is a workaround.\n\n  // First apply initial translation.\n  div.style.left = metrics.initialX + 'px';\n  div.style.top = metrics.initialY + 'px';\n  // Show the div.\n  div.style.display = 'block';\n  div.style.opacity = 1;\n  // Add final translate, animated through `transition`.\n  // Coordinates are relative to (initialX, initialY),\n  // where the drop-down is absolutely positioned.\n  var dx = (metrics.finalX - metrics.initialX);\n  var dy = (metrics.finalY - metrics.initialY);\n  div.style.transform = 'translate(' + dx + 'px,' + dy + 'px)';\n  return metrics.arrowAtTop;\n};\n\n/**\n * Helper to position the drop-down and the arrow, maintaining bounds.\n * See explanation of origin points in Blockly.DropDownDiv.show.\n * @param {number} primaryX Desired origin point x, in absolute px\n * @param {number} primaryY Desired origin point y, in absolute px\n * @param {number} secondaryX Secondary/alternative origin point x, in absolute px\n * @param {number} secondaryY Secondary/alternative origin point y, in absolute px\n * @returns {Object} Various final metrics, including rendered positions for drop-down and arrow.\n */\nBlockly.DropDownDiv.getPositionMetrics = function(primaryX, primaryY, secondaryX, secondaryY) {\n  var div = Blockly.DropDownDiv.DIV_;\n  var boundPosition = Blockly.DropDownDiv.boundsElement_.getBoundingClientRect();\n\n  var boundSize = goog.style.getSize(Blockly.DropDownDiv.boundsElement_);\n  var divSize = goog.style.getSize(div);\n\n  // First decide if we will render at primary or secondary position\n  // i.e., above or below\n  // renderX, renderY will eventually be the final rendered position of the box.\n  var renderX, renderY, renderedSecondary;\n  // Can the div fit inside the bounds if we render below the primary point?\n  if (secondaryY - divSize.height < boundPosition.top) {\n    // We can't fit below in terms of y. Can we fit above?\n    if (primaryY + divSize.height > boundPosition.top + boundSize.height) {\n      // We also can't fit above, so just render below anyway.\n      renderX = secondaryX;\n      renderY = secondaryY - divSize.height - Blockly.DropDownDiv.PADDING_Y;\n      renderedSecondary = true;\n    } else {\n      // We can fit above, render secondary\n      renderX = primaryX;\n      renderY = primaryY + Blockly.DropDownDiv.PADDING_Y;\n      renderedSecondary = false;\n    }\n  } else {\n    // We can fit below, render primary\n    renderX = secondaryX;\n    renderY = secondaryY - divSize.height - Blockly.DropDownDiv.PADDING_Y;\n    renderedSecondary = true;\n  }\n  // First calculate the absolute arrow X\n  // This needs to be done before positioning the div, since the arrow\n  // wants to be as close to the origin point as possible.\n  var arrowX = renderX - Blockly.DropDownDiv.ARROW_SIZE / 2;\n  // Keep in overall bounds\n  arrowX = Math.max(boundPosition.left, Math.min(arrowX, boundPosition.left + boundSize.width));\n\n  // Adjust the x-position of the drop-down so that the div is centered and within bounds.\n  var centerX = divSize.width / 2;\n  renderX -= centerX;\n  // Fit horizontally in the bounds.\n  renderX = Math.max(\n    boundPosition.left,\n    Math.min(renderX, boundPosition.left + boundSize.width - divSize.width)\n  );\n  // After we've finished caclulating renderX, adjust the arrow to be relative to it.\n  arrowX -= renderX;\n\n  // Pad the arrow by some pixels, primarily so that it doesn't render on top of a rounded border.\n  arrowX = Math.max(\n    Blockly.DropDownDiv.ARROW_HORIZONTAL_PADDING,\n    Math.min(arrowX, divSize.width - Blockly.DropDownDiv.ARROW_HORIZONTAL_PADDING - Blockly.DropDownDiv.ARROW_SIZE)\n  );\n\n  // Calculate arrow Y. If we rendered secondary, add on bottom.\n  // Extra pixels are added so that it covers the border of the div.\n  var arrowY = (renderedSecondary) ? divSize.height - Blockly.DropDownDiv.BORDER_SIZE : 0;\n  arrowY -= (Blockly.DropDownDiv.ARROW_SIZE / 2) + Blockly.DropDownDiv.BORDER_SIZE;\n\n  // Initial position calculated without any padding to provide an animation point.\n  var initialX = renderX; // X position remains constant during animation.\n  var initialY;\n  if (renderedSecondary) {\n    initialY = secondaryY - divSize.height; // No padding on Y\n  } else {\n    initialY = primaryY; // No padding on Y\n  }\n\n  return {\n    initialX: initialX,\n    initialY : initialY+10,\n    finalX: renderX,\n    finalY: renderY+10,\n    arrowX: arrowX,\n    arrowY: arrowY,\n    arrowAtTop: !renderedSecondary\n  };\n};\n\n/**\n * Is the container visible?\n * @return {boolean} True if visible.\n */\nBlockly.DropDownDiv.isVisible = function() {\n  return !!Blockly.DropDownDiv.owner_;\n};\n\n/**\n * Hide the menu only if it is owned by the provided object.\n * @param {Object} owner Object which must be owning the drop-down to hide\n * @return {Boolean} True if hidden\n */\nBlockly.DropDownDiv.hideIfOwner = function(owner) {\n  if (Blockly.DropDownDiv.owner_ === owner) {\n    Blockly.DropDownDiv.hide();\n    return true;\n  }\n  return false;\n};\n\n/**\n * Hide the menu, triggering animation.\n */\nBlockly.DropDownDiv.hide = function() {\n  Blockly.DropDownDiv.isInAnimation = false;\n  // Start the animation by setting the translation and fading out.\n  var div = Blockly.DropDownDiv.DIV_;\n  // Reset to (initialX, initialY) - i.e., no translation.\n  div.style.transform = 'translate(0px, 0px)';\n  div.style.opacity = 0;\n  Blockly.DropDownDiv.animateOutTimer_ = setTimeout(function() {\n    // Finish animation - reset all values to default.\n    Blockly.DropDownDiv.hideWithoutAnimation();\n  }, Blockly.DropDownDiv.ANIMATION_TIME * 1000);\n  if (Blockly.DropDownDiv.onHide_) {\n    Blockly.DropDownDiv.onHide_();\n    Blockly.DropDownDiv.onHide_ = null;\n  }\n};\n\n// Hide after a timeout\nBlockly.DropDownDiv.hideIfNotShowing = function () {\n  if(!Blockly.DropDownDiv.isInAnimation) {\n    Blockly.DropDownDiv.hide();\n  }\n}\n\n/**\n * Hide the menu, without animation.\n */\nBlockly.DropDownDiv.hideWithoutAnimation = function() {\n  if (!Blockly.DropDownDiv.isVisible()) {\n    return;\n  }\n  var div = Blockly.DropDownDiv.DIV_;\n  Blockly.DropDownDiv.animateOutTimer_ && window.clearTimeout(Blockly.DropDownDiv.animateOutTimer_);\n  div.style.transform = '';\n  div.style.top = '';\n  div.style.left = '';\n  div.style.display = 'none';\n  Blockly.DropDownDiv.clearContent();\n  Blockly.DropDownDiv.owner_ = null;\n  if (Blockly.DropDownDiv.onHide_) {\n    Blockly.DropDownDiv.onHide_();\n    Blockly.DropDownDiv.onHide_ = null;\n  }\n};\n","// Adapt to our custom Blockly.Variables.promptName behavior\nBlockly.FieldVariable.prototype.classValidator = function(text) {\n  var workspace = this.sourceBlock_.workspace;\n  if (text == Blockly.Msg.RENAME_VARIABLE) {\n    var oldVar = this.getText();\n    Blockly.hideChaff();\n    var cb = function(text) {\n      if (text) {\n        workspace.renameVariable(oldVar, text);\n      }\n    };\n    text = Blockly.Variables.promptName(\n        Blockly.Msg.RENAME_VARIABLE_TITLE.replace('%1', oldVar), oldVar, cb);\n    return null;\n  } else if (text == Blockly.Msg.DELETE_VARIABLE.replace('%1',\n      this.getText())) {\n    workspace.deleteVariable(this.getText());\n    return null;\n  }\n  return undefined;\n};\n","// Options for the variables flyout\nBlockly.Procedures.flyoutOptions = {\n  includedBlocks: {noret: true, ret: true, ifret: true}, // Blocks to add to the list\n  };\n\n\n// Allow configuration of the category\nBlockly.Procedures.flyoutCategory = function(workspace) {\n  var incl = Blockly.Procedures.flyoutOptions.includedBlocks;\n  var xmlList = [];\n  if (incl.noret && Blockly.Blocks['procedures_defnoreturn']) {\n    // <block type=\"procedures_defnoreturn\" gap=\"16\"></block>\n    var block = goog.dom.createDom('block');\n    block.setAttribute('type', 'procedures_defnoreturn');\n    block.setAttribute('gap', 16);\n    xmlList.push(block);\n  }\n  if (incl.ret && Blockly.Blocks['procedures_defreturn']) {\n    // <block type=\"procedures_defreturn\" gap=\"16\"></block>\n    var block = goog.dom.createDom('block');\n    block.setAttribute('type', 'procedures_defreturn');\n    block.setAttribute('gap', 16);\n    xmlList.push(block);\n  }\n  if (incl.ifret && Blockly.Blocks['procedures_ifreturn']) {\n    // <block type=\"procedures_ifreturn\" gap=\"16\"></block>\n    var block = goog.dom.createDom('block');\n    block.setAttribute('type', 'procedures_ifreturn');\n    block.setAttribute('gap', 16);\n    xmlList.push(block);\n  }\n  if (xmlList.length) {\n    // Add slightly larger gap between system blocks and user calls.\n    xmlList[xmlList.length - 1].setAttribute('gap', 24);\n  }\n\n  function populateProcedures(procedureList, templateName) {\n    for (var i = 0; i < procedureList.length; i++) {\n      var name = procedureList[i][0];\n      var args = procedureList[i][1];\n      // <block type=\"procedures_callnoreturn\" gap=\"16\">\n      //   <mutation name=\"do something\">\n      //     <arg name=\"x\"></arg>\n      //   </mutation>\n      // </block>\n      var block = goog.dom.createDom('block');\n      block.setAttribute('type', templateName);\n      block.setAttribute('gap', 16);\n      var mutation = goog.dom.createDom('mutation');\n      mutation.setAttribute('name', name);\n      block.appendChild(mutation);\n      for (var j = 0; j < args.length; j++) {\n        var arg = goog.dom.createDom('arg');\n        arg.setAttribute('name', args[j]);\n        mutation.appendChild(arg);\n      }\n      xmlList.push(block);\n    }\n  }\n\n  var tuple = Blockly.Procedures.allProcedures(workspace);\n  populateProcedures(tuple[0], 'procedures_callnoreturn');\n  populateProcedures(tuple[1], 'procedures_callreturn');\n  return xmlList;\n};\n","/**\n * Recalculate a horizontal scrollbar's location on the screen and path length.\n * This should be called when the layout or size of the window has changed.\n * @param {!Object} hostMetrics A data structure describing all the\n *     required dimensions, possibly fetched from the host object.\n */\nBlockly.Scrollbar.prototype.resizeViewHorizontal = function(hostMetrics) {\n  var viewSize = hostMetrics.viewWidth - hostMetrics.flyoutWidth - 1;\n  if (this.pair_) {\n    // Shorten the scrollbar to make room for the corner square.\n    viewSize -= Blockly.Scrollbar.scrollbarThickness;\n  }\n  this.setScrollViewSize_(Math.max(0, viewSize));\n\n  var xCoordinate = hostMetrics.absoluteLeft + hostMetrics.flyoutWidth + 0.5;\n  if (this.pair_ && this.workspace_.RTL) {\n    xCoordinate += Blockly.Scrollbar.scrollbarThickness;\n  }\n\n  // Horizontal toolbar should always be just above the bottom of the workspace.\n  var yCoordinate = hostMetrics.absoluteTop + hostMetrics.viewHeight -\n      Blockly.Scrollbar.scrollbarThickness - 0.5;\n  this.setPosition(xCoordinate, yCoordinate);\n\n  // If the view has been resized, a content resize will also be necessary.  The\n  // reverse is not true.\n  this.resizeContentHorizontal(hostMetrics);\n};\n\n/**\n * Recalculate a horizontal scrollbar's location within its path and length.\n * This should be called when the contents of the workspace have changed.\n * @param {!Object} hostMetrics A data structure describing all the\n *     required dimensions, possibly fetched from the host object.\n */\nBlockly.Scrollbar.prototype.resizeContentHorizontal = function(hostMetrics) {\n  if (!this.pair_) {\n    // Only show the scrollbar if needed.\n    // Ideally this would also apply to scrollbar pairs, but that's a bigger\n    // headache (due to interactions with the corner square).\n    this.setVisible(this.scrollViewSize_ < hostMetrics.contentWidth);\n  }\n\n  this.ratio_ = this.scrollViewSize_ / hostMetrics.contentWidth;\n  if (this.ratio_ == -Infinity || this.ratio_ == Infinity ||\n      isNaN(this.ratio_)) {\n    this.ratio_ = 0;\n  }\n\n  var handleLength = (hostMetrics.viewWidth - hostMetrics.flyoutWidth) * this.ratio_;\n  this.setHandleLength_(Math.max(0, handleLength));\n\n  var handlePosition = (hostMetrics.viewLeft - hostMetrics.contentLeft) *\n      this.ratio_;\n  this.setHandlePosition(this.constrainHandle_(handlePosition));\n};\n\n","Blockly.JavaScript['variables_set'] = function(block) {\n  // Variable setter.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var assignCode = varName + ' = ' + argument0 + ';\\n';\n\n  // Report value if available\n  var reportCode = \"reportBlockValue('\" + block.id + \"', \"+varName+\", '\"+varName+\"');\\n\";\n\n  return assignCode + reportCode;\n};\n","// reportValue allows to show a popup next to a block\nBlockly.WorkspaceSvg.prototype.reportValue = function(id, value) {\n  var block = this.getBlockById(id);\n  if (!block) {\n    throw 'Tried to report value on block that does not exist.';\n  }\n  Blockly.DropDownDiv.createDom();\n  Blockly.DropDownDiv.hideWithoutAnimation();\n  Blockly.DropDownDiv.clearContent();\n  var contentDiv = Blockly.DropDownDiv.getContentDiv();\n  var valueReportBox = goog.dom.createElement('div');\n  valueReportBox.setAttribute('class', 'valueReportBox');\n  valueReportBox.innerHTML = value;\n  contentDiv.appendChild(valueReportBox);\n  Blockly.DropDownDiv.setColour(\"#FFFFFF\", \"#AAAAAA\");\n  Blockly.DropDownDiv.showPositionedByBlock(this, block);\n};\n","Blockly.Msg.VARIABLES_DEFAULT_NAME = \"element\";\nBlockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;\n\nBlockly.Msg.DICTS_CREATE_EMPTY_TITLE = \"dictionnaire vide\";\nBlockly.Msg.DICTS_CREATE_WITH_CONTAINER_TITLE_ADD = \"Créer un dictionnaire\";\nBlockly.Msg.DICTS_CREATE_WITH_CONTAINER_TOOLTIP = \"\";\nBlockly.Msg.DICTS_CREATE_WITH_INPUT_WITH = \"créer un dictionnaire :\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_KEY = \"cle\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_MAPPING = \":\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_TITLE = \"clé/valeur\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_TOOLTIP = \"\";\nBlockly.Msg.DICTS_CREATE_WITH_TOOLTIP = \"\";\nBlockly.Msg.DICT_GET = \"récupérer la clé\";\nBlockly.Msg.DICT_GET_TO = \"de\";\nBlockly.Msg.DICT_KEYS = \"liste des clés de\";\nBlockly.Msg.LISTS_APPEND_MSG = \"à la liste %1 ajouter l'élément %2\";\nBlockly.Msg.LISTS_APPEND_TOOLTIP = \"Ajouter un élément à la liste '%1'\";\nBlockly.Msg.TEXT_PRINT_TITLE = \"afficher la ligne %1\";\nBlockly.Msg.TEXT_PRINT_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, avec retour à la ligne après.\";\nBlockly.Msg.TEXT_PRINT_NOEND_TITLE = \"afficher %1\";\nBlockly.Msg.TEXT_PRINT_NOEND_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, sans retour à la ligne.\";\n\nBlockly.Msg.INPUT_NUM = \"lire un nombre\";\nBlockly.Msg.INPUT_NUM_TOOLTIP = \"Lit un nombre sur l'entrée du programme.\";\nBlockly.Msg.INPUT_CHAR = \"lire un caractère\";\nBlockly.Msg.INPUT_CHAR_TOOLTIP = \"Lit un caractère sur l'entrée du programme.\";\nBlockly.Msg.INPUT_WORD = \"lire un mot\";\nBlockly.Msg.INPUT_WORD_TOOLTIP = \"Lit un mot sur l'entrée du programme.\";\nBlockly.Msg.INPUT_LINE = \"lire une ligne\";\nBlockly.Msg.INPUT_LINE_TOOLTIP = \"Lit une ligne sur l'entrée du programme.\";\n\nBlockly.Msg.CANNOT_DELETE_VARIABLE_PROCEDURE = \"Impossible de supprimer la variable '%1', utilisée par la procédure '%2'.\";\n\nBlockly.Msg.DATA_LISTREPEAT_TITLE = \"initialiser la liste %1 avec %2 répété %3 fois\";\n","Blockly.Python['dict_get'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dict_get_literal'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.quote_(block.getFieldValue('ITEM'));\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dicts_create_with'] = function(block) {\n    var value_keys = Blockly.Python.valueToCode(block, 'keys', Blockly.   Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = new Array(block.itemCount_);\n  \n    for (var n = 0; n < block.itemCount_; n++) {\n        var key = Blockly.Python.quote_(block.getFieldValue('KEY' + n));\n        var value = Blockly.Python.valueToCode(block, 'VALUE' + n,\n                Blockly.Python.ORDER_NONE) || '___';\n        code[n] = key +\": \"+ value;\n    }\n    code = '{' + code.join(', ') + '}';\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['dict_keys'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var code = dict + '.keys()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n","Blockly.Python['input_num'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'int(input_word())';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_char'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.read(1)';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_word'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'input_word()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_line'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.readline()[:-1]';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n","Blockly.Python['lists_append'] = function(block) {\n  // Append\n  var varName = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.Variables.NAME_TYPE);\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  return varName + '.append(' + value + ')\\n';\n};\n","Blockly.Blocks['logic_compare'] = {\n  /**\n   * Block for comparison operator.\n   * @this Blockly.Block\n   */\n  init: function() {\n    var rtlOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['>', 'LT'],\n      ['>=', 'LTE'],\n      ['<', 'GT'],\n      ['<=', 'GTE']\n    ];\n    var ltrOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['<', 'LT'],\n      ['<=', 'LTE'],\n      ['>', 'GT'],\n      ['>=', 'GTE']\n    ];\n    var OPERATORS = this.RTL ? rtlOperators : ltrOperators;\n    this.setHelpUrl(Blockly.Msg.LOGIC_COMPARE_HELPURL);\n    this.setColour(Blockly.Blocks.logic.HUE);\n    this.setOutput(true, 'Boolean');\n    this.appendValueInput('A');\n    this.appendValueInput('B')\n        .appendField(new Blockly.FieldDropdown(OPERATORS), 'OP');\n    this.setInputsInline(true);\n    // Assign 'this' to a variable for use in the tooltip closure below.\n    var thisBlock = this;\n    this.setTooltip(function() {\n      var op = thisBlock.getFieldValue('OP');\n      var TOOLTIPS = {\n        'EQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ,\n        'NEQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ,\n        'LT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT,\n        'LTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE,\n        'GT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT,\n        'GTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE\n      };\n      return TOOLTIPS[op];\n    });\n    this.prevBlocks_ = [null, null];\n  },\n  /**\n   * Called whenever anything on the workspace changes.\n   * Prevent mismatched types from being compared.\n   * @param {!Blockly.Events.Abstract} e Change event.\n   * @this Blockly.Block\n   */\n  onchange: function(e) {\n    var blockA = this.getInputTargetBlock('A');\n    var blockB = this.getInputTargetBlock('B');\n    // Disconnect blocks that existed prior to this change if they don't match.\n    if (blockA && blockB &&\n        !blockA.outputConnection.checkType_(blockB.outputConnection)) {\n      // Mismatch between two inputs.  Disconnect previous and bump it away.\n      // Ensure that any disconnections are grouped with the causing event.\n      Blockly.Events.setGroup(e.group);\n      for (var i = 0; i < this.prevBlocks_.length; i++) {\n        var block = this.prevBlocks_[i];\n        if (block === blockA || block === blockB) {\n          block.unplug();\n          block.bumpNeighbours_();\n        }\n      }\n      Blockly.Events.setGroup(false);\n    }\n    this.prevBlocks_[0] = blockA;\n    this.prevBlocks_[1] = blockB;\n  }\n};\n\n","Blockly.Python['text_print_noend'] = function(block) {\n  // Print statement.\n  var msg = Blockly.Python.valueToCode(block, 'TEXT',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  return 'print(' + msg + ', end=\"\")\\n';\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.JavaScript.init = function(workspace) {\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.JavaScript.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.JavaScript.functionNames_ = Object.create(null);\n\n  if (!Blockly.JavaScript.variableDB_) {\n    Blockly.JavaScript.variableDB_ =\n        new Blockly.Names(Blockly.JavaScript.RESERVED_WORDS_);\n  } else {\n    Blockly.JavaScript.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped JavaScript string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @private\n */\nBlockly.JavaScript.quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n\n\nBlockly.JavaScript['controls_for'] = function(block) {\n  // For loop.\n  var variable0 = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'TO',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var increment = Blockly.JavaScript.valueToCode(block, 'BY',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\n  var code;\n  if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\n      Blockly.isNumber(increment)) {\n    // All arguments are simple numbers.\n    var up = parseFloat(argument0) <= parseFloat(argument1);\n    code = 'for (var ' + variable0 + ' = ' + argument0 + '; ' +\n        variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\n        variable0;\n    var step = Math.abs(parseFloat(increment));\n    if (step == 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    var startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\n      startVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_start', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    var endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\n      var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_end', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    var incVar = Blockly.JavaScript.variableDB_.getDistinctName(\n        variable0 + '_inc', Blockly.Variables.NAME_TYPE);\n    code += 'var ' + incVar + ' = ';\n    if (Blockly.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += Blockly.JavaScript.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' +\n        incVar + ' >= 0 ? ' +\n        variable0 + ' <= ' + endVar + ' : ' +\n        variable0 + ' >= ' + endVar + '; ' +\n        variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nBlockly.JavaScript['variables_set'] = function(block) {\n  // Variable setter.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  return 'var ' + varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.Python.init = function(workspace) {\n  /**\n   * Empty loops or conditionals are not allowed in Python.\n   */\n  Blockly.Python.PASS = this.INDENT + 'pass\\n';\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.Python.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.Python.functionNames_ = Object.create(null);\n\n  if (!Blockly.Python.variableDB_) {\n    Blockly.Python.variableDB_ =\n        new Blockly.Names(Blockly.Python.RESERVED_WORDS_);\n  } else {\n    Blockly.Python.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped Python string, complete with quotes.\n * @param {string} string Text to encode.\n * @return {string} Python string.\n * @private\n */\nBlockly.Python.quote_ = function(string) {\n  // Can't use goog.string.quote since % must also be escaped.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\\%/g, '\\\\%')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n","Blockly.Python['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  if (block.getField('TIMES')) {\n    // Internal number.\n    var repeats = String(parseInt(block.getFieldValue('TIMES'), 10));\n  } else {\n    // External number.\n    var repeats = Blockly.Python.valueToCode(block, 'TIMES',\n        Blockly.Python.ORDER_NONE) || '0';\n  }\n  if (Blockly.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'int(' + repeats + ')';\n  }\n  var branch = Blockly.Python.statementToCode(block, 'DO');\n  branch = Blockly.Python.addLoopTrap(branch, block.id) ||\n      Blockly.Python.PASS;\n  var loopVar = Blockly.Python.variableDB_.getDistinctName(\n      'loop', Blockly.Variables.NAME_TYPE);\n  var code = 'for ' + loopVar + ' in range(' + repeats + '):\\n' + branch;\n  return code;\n};\n\nBlockly.Python['controls_repeat'] = Blockly.Python['controls_repeat_ext'];\n","Blockly.JavaScript['math_change'] = function(block) {\n  // Add to a variable in place.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'DELTA',\n      Blockly.JavaScript.ORDER_ADDITION) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var incrCode = varName + ' = (typeof ' + varName + ' == \\'number\\' ? ' + varName +\n      ' : 0) + ' + argument0 + ';\\n';\n\n  // Report value if available\n  var reportCode = \"reportBlockValue('\" + block.id + \"', \"+varName+\", '\"+varName+\"');\\n\";\n\n  return incrCode + reportCode;\n};\n","Blockly.Python['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  // First, add a 'global' statement for every variable that is assigned.\n  // acbart: Actually, skip that, globals are bad news!\n  var globals = []; //Blockly.Variables.allVariables(block);\n  for (var i = globals.length - 1; i >= 0; i--) {\n    var varName = globals[i];\n    if (block.arguments_.indexOf(varName) == -1) {\n      globals[i] = Blockly.Python.variableDB_.getName(varName,\n          Blockly.Variables.NAME_TYPE);\n    } else {\n      // This variable is actually a parameter name.  Do not include it in\n      // the list of globals, thus allowing it be of local scope.\n      globals.splice(i, 1);\n    }\n  }\n  globals = globals.length ? '  global ' + globals.join(', ') + '\\n' : '';\n  // Get the function's name\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  // Get the stack of code\n  var branch = Blockly.Python.statementToCode(block, 'STACK');\n  // Handle prefixing\n  if (Blockly.Python.STATEMENT_PREFIX) {\n    branch = Blockly.Python.prefixLines(\n        Blockly.Python.STATEMENT_PREFIX.replace(/%1/g,\n        '\\'' + block.id + '\\''), Blockly.Python.INDENT) + branch;\n  }\n  // Handle infinite loop trapping\n  if (Blockly.Python.INFINITE_LOOP_TRAP) {\n    branch = Blockly.Python.INFINITE_LOOP_TRAP.replace(/%1/g,\n        '\"' + block.id + '\"') + branch;\n  }\n  // Handle return value\n  var returnValue = Blockly.Python.valueToCode(block, 'RETURN',\n      Blockly.Python.ORDER_NONE) || '';\n  if (returnValue) {\n    returnValue = '  return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = Blockly.Python.PASS;\n  }\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.variableDB_.getName(block.arguments_[x],\n        Blockly.Variables.NAME_TYPE);\n  }\n  var code = 'def ' + funcName + '(' + args.join(', ') + '):\\n' +\n      globals + branch + returnValue;\n  //acbart: I'm not sure why this is used here. It was fine before when\n  //        functions didn't have anything after them, but now it's deadly.\n  //code = Blockly.Python.scrub_(block, code);\n  //Blockly.Python.definitions_[funcName] = code;\n  return code;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nBlockly.Python['procedures_defnoreturn'] =\n    Blockly.Python['procedures_defreturn'];\n\nBlockly.Python['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.valueToCode(block, 'ARG' + x,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = funcName + '(' + args.join(', ') + ')';\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.valueToCode(block, 'ARG' + x,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = funcName + '(' + args.join(', ') + ')\\n';\n  return code;\n};\n\nBlockly.Python['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  var condition = Blockly.Python.valueToCode(block, 'CONDITION',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = 'if ' + condition + ':\\n';\n  if (block.hasReturnValue_) {\n    var value = Blockly.Python.valueToCode(block, 'VALUE',\n        Blockly.Python.ORDER_NONE) || '___';\n    code += '  return ' + value + '\\n';\n  } else {\n    code += '  return\\n';\n  }\n  return code;\n};\n\nBlockly.Python['procedures_return'] = function(block) {\n  // return value from a procedure.\n  var code = \"return\";\n  if (block.hasReturnValue_) {\n    var value = Blockly.Python.valueToCode(block, 'VALUE',\n        Blockly.Python.ORDER_NONE) || '___';\n    code += ' ' + value + '\\n';\n  } else {\n    code += '\\n';\n  }\n  return code;\n};\n"]}