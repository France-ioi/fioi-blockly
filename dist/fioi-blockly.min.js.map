{"version":3,"sources":["base.js","dropdowndiv.js","field_variable.js","procedures.js","scrollbar.js","touch.js","utils.js","variables.js","workspace_svg.js","xml.js","fr.js","msg_fill.js","dicts.js","inputs.js","lists.js","logic.js","text.js","javascript.js","python.js","loops.js","math.js","python_procedures.js"],"names":["FioiBlockly","Msg","OriginalBlocks","defaultLang","loadLanguage","lang","console","error","msgName","Blockly","reimportOriginalBlocks","blockNames","blockName","indexOf","Blocks","goog","provide","require","DropDownDiv","DIV_","boundsElement_","owner_","ARROW_SIZE","BORDER_SIZE","ARROW_HORIZONTAL_PADDING","PADDING_Y","ANIMATION_TIME","animateOutTimer_","onHide_","isInAnimation","isInAnimationTimer","createDom","dom","document","body","appendChild","content_","arrow_","style","transition","window","addEventListener","hideIfNotShowing","setBoundsElement","boundsElement","getContentDiv","clearContent","innerHTML","setColour","backgroundColour","borderColour","backgroundColor","borderColor","setCategory","category","setAttribute","showPositionedByBlock","owner","block","opt_onHide","opt_secondaryYOffset","scale","workspace","bBox","width","height","blockSvg","getSvgRoot","i","children","length","classList","position","getBoundingClientRect","primaryX","left","primaryY","top","secondaryX","secondaryY","getParentSvg","parentNode","show","this","clearTimeout","setTimeout","div","metrics","getPositionMetrics","transform","arrowX","arrowY","arrowAtTop","initialX","initialY","display","opacity","dx","finalX","dy","finalY","renderX","renderY","renderedSecondary","boundPosition","boundSize","getSize","divSize","Math","max","min","centerX","isVisible","hideIfOwner","hide","hideWithoutAnimation","FieldVariable","prototype","classValidator","text","sourceBlock_","RENAME_VARIABLE","oldVar","getText","hideChaff","cb","renameVariable","Variables","promptName","RENAME_VARIABLE_TITLE","replace","DELETE_VARIABLE","deleteVariable","Procedures","flyoutOptions","includedBlocks","noret","ret","ifret","flyoutCategory","populateProcedures","procedureList","templateName","name","args","mutation","j","arg","xmlList","push","incl","tuple","allProcedures","Scrollbar","resizeViewHorizontal","hostMetrics","viewSize","viewWidth","flyoutWidth","pair_","scrollbarThickness","setScrollViewSize_","xCoordinate","absoluteLeft","workspace_","RTL","yCoordinate","absoluteTop","viewHeight","setPosition","resizeContentHorizontal","setVisible","scrollViewSize_","contentWidth","ratio_","Infinity","isNaN","handleLength","setHandleLength_","handlePosition","viewLeft","contentLeft","setHandlePosition","constrainHandle_","onMouseUp_","e","getMainWorkspace","dragMode_","DRAG_NONE","Touch","clearTouchIdentifier","Css","setCursor","Cursor","OPEN","onTouchUpWrapper_","unbindEvent_","onMouseMoveWrapper_","genUid","soup_","any","anyButton","fixed","get","set","incr","shortList","options","scratchMode","fullVariableList","variableList","newVarIdx","idx","splice","sort","string","caseInsensitiveCompare","button","NEW_VARIABLE","registerButtonCallback","createVariable","getTargetWorkspace","concat","field","createVariableDom_","createTextDom_","createMathNumberDom_","value","shadowBlock","numberField","variableIndexOf","displayHelper","showPopupMessage","VARIABLE_ALREADY_EXISTS","toLowerCase","NEW_VARIABLE_TITLE","promptText","defaultText","callback","newVar","UNDO","WorkspaceSvg","reportValue","id","getBlockById","contentDiv","valueReportBox","createElement","translate","x","y","translation","svgBlockCanvas_","svgBubbleCanvas_","Xml","domToWorkspaceOriginal","domToWorkspace","xml","disableRenameEvents","fr","VARIABLES_DEFAULT_NAME","TEXT_APPEND_VARIABLE","DICTS_CREATE_EMPTY_TITLE","DICTS_CREATE_WITH_CONTAINER_TITLE_ADD","DICTS_CREATE_WITH_CONTAINER_TOOLTIP","DICTS_CREATE_WITH_INPUT_WITH","DICTS_CREATE_WITH_ITEM_KEY","DICTS_CREATE_WITH_ITEM_MAPPING","DICTS_CREATE_WITH_ITEM_TITLE","DICTS_CREATE_WITH_ITEM_TOOLTIP","DICTS_CREATE_WITH_TOOLTIP","DICT_GET","DICT_GET_TO","DICT_KEYS","TEXT_PRINT_TITLE","TEXT_PRINT_TOOLTIP","TEXT_PRINT_NOEND_TITLE","TEXT_PRINT_NOEND_TOOLTIP","LISTS_APPEND_MSG","LISTS_APPEND_TOOLTIP","LISTS_GET_INDEX_FIRST","LISTS_GET_INDEX_FROM_END","LISTS_GET_INDEX_FROM_START","LISTS_GET_INDEX_GET","LISTS_GET_INDEX_GET_REMOVE","LISTS_GET_INDEX_LAST","LISTS_GET_INDEX_RANDOM","LISTS_GET_INDEX_REMOVE","LISTS_SET_INDEX_INSERT","INPUT_NUM","INPUT_NUM_TOOLTIP","INPUT_CHAR","INPUT_CHAR_TOOLTIP","INPUT_WORD","INPUT_WORD_TOOLTIP","INPUT_LINE","INPUT_LINE_TOOLTIP","CANNOT_DELETE_VARIABLE_PROCEDURE","DATA_REPLACEITEMOFLIST_TITLE","DATA_ITEMOFLIST_TITLE","DATA_LISTREPEAT_TITLE","fillLanguage","dicts","HUE","init","appendValueInput","setCheck","appendField","setInputsInline","setOutput","newQuote_","FieldTextInput","open","file","FieldImage","appendDummyInput","appendStatementInput","setTooltip","contextMenu","setPreviousStatement","setNextStatement","itemCount_","updateShape_","setMutator","Mutator","mutationToDom","container","domToMutation","xmlElement","parseInt","getAttribute","getInput","removeInput","setAlign","ALIGN_RIGHT","decompose","containerBlock","Block","obtain","initSvg","connection","itemBlock","connect","previousConnection","nextConnection","compose","getInputTargetBlock","connections","valueConnection_","targetBlock","saveConnections","value_input","targetConnection","inputs","lists","jsonInit","message0","args0","type","variable","check","previousStatement","nextStatement","colour","thisBlock","getFieldValue","MODE","LISTS_SET_INDEX_SET","WHERE_OPTIONS","setHelpUrl","LISTS_SET_INDEX_HELPURL","LISTS_SET_INDEX_INPUT_IN_LIST","FieldDropdown","LISTS_SET_INDEX_TOOLTIP","updateAt_","mode","where","tooltip","LISTS_SET_INDEX_TOOLTIP_SET_FROM","LISTS_SET_INDEX_TOOLTIP_SET_FIRST","LISTS_SET_INDEX_TOOLTIP_SET_LAST","LISTS_SET_INDEX_TOOLTIP_SET_RANDOM","LISTS_SET_INDEX_TOOLTIP_INSERT_FROM","LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST","LISTS_SET_INDEX_TOOLTIP_INSERT_LAST","LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM","LISTS_INDEX_FROM_START_TOOLTIP","oneBasedIndex","isAt","INPUT_VALUE","ORDINAL_NUMBER_SUFFIX","menu","newAt","setFieldValue","moveInputBefore","rtlOperators","ltrOperators","OPERATORS","LOGIC_COMPARE_HELPURL","logic","op","TOOLTIPS","EQ","LOGIC_COMPARE_TOOLTIP_EQ","NEQ","LOGIC_COMPARE_TOOLTIP_NEQ","LT","LOGIC_COMPARE_TOOLTIP_LT","LTE","LOGIC_COMPARE_TOOLTIP_LTE","GT","LOGIC_COMPARE_TOOLTIP_GT","GTE","LOGIC_COMPARE_TOOLTIP_GTE","prevBlocks_","onchange","blockA","blockB","outputConnection","checkType_","Events","setGroup","group","unplug","bumpNeighbours_","renameProcedure","oldName","newName","force","Names","equals","getProcedureCall","PROCEDURES_CALLRETURN_TOOLTIP","PROCEDURES_CALLNORETURN_TOOLTIP","childNode","paramIds","childNodes","nodeName","setProcedureParameters_","texts","helpUrl","TEXT_PRINT_HELPURL","JavaScript","definitions_","Object","create","functionNames_","variableDB_","reset","RESERVED_WORDS_","quote_","variable0","getName","NAME_TYPE","argument0","valueToCode","ORDER_ASSIGNMENT","argument1","increment","branch","statementToCode","addLoopTrap","code","isNumber","up","parseFloat","step","abs","startVar","match","getDistinctName","endVar","incVar","INDENT","varName","Python","PASS","dict","ORDER_MEMBER","ORDER_NONE","ORDER_ATOMIC","Array","n","key","join","getField","repeats","String","Number","loopVar","ORDER_ADDITION","incrCode","reportCode","assignCode","globals","arguments_","funcName","STATEMENT_PREFIX","prefixLines","INFINITE_LOOP_TRAP","returnValue","ORDER_FUNCTION_CALL","condition","hasReturnValue_","msg"],"mappings":"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","file":"fioi-blockly.min.js","sourcesContent":["FioiBlockly = {};\nFioiBlockly.Msg = {};\nFioiBlockly.OriginalBlocks = {};\n\nFioiBlockly.defaultLang = 'fr';\n\n// Import messages for a language\nFioiBlockly.loadLanguage = function(lang) {\n  if(!FioiBlockly.Msg[lang]) {\n    console.error(\"Language '+lang+' doesn't exist in fioi-blockly!\");\n    return;\n  }\n\n  for(var msgName in FioiBlockly.Msg[lang]) {\n    Blockly.Msg[msgName] = FioiBlockly.Msg[lang][msgName];\n  }\n};\n\n// Get back original Blockly blocks\nFioiBlockly.reimportOriginalBlocks = function(blockNames) {\n  for(var blockName in FioiBlockly.OriginalBlocks) {\n    if(!blockNames || blockNames.indexOf(blockName) != -1) {\n      Blockly.Blocks[blockName] = FioiBlockly.OriginalBlocks[blockName];\n    }\n  }\n};\n","/**\n * @license\n * Visual Blocks Editor\n *\n * Copyright 2016 Massachusetts Institute of Technology\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview A div that floats on top of the workspace, for drop-down menus.\n * The drop-down can be kept inside the workspace, animate in/out, etc.\n * @author tmickel@mit.edu (Tim Mickel)\n */\n\n'use strict';\n\ngoog.provide('Blockly.DropDownDiv');\n\ngoog.require('goog.dom');\ngoog.require('goog.style');\n\n/**\n * Class for drop-down div.\n * @constructor\n */\nBlockly.DropDownDiv = function() {\n};\n\n/**\n * The div element. Set once by Blockly.DropDownDiv.createDom.\n * @type {Element}\n * @private\n */\nBlockly.DropDownDiv.DIV_ = null;\n\n/**\n * Drop-downs will appear within the bounds of this element if possible.\n * Set in Blockly.DropDownDiv.setBoundsElement.\n * @type {Element}\n * @private\n */\nBlockly.DropDownDiv.boundsElement_ = null;\n\n/**\n * The object currently using the drop-down.\n * @type {Object}\n * @private\n */\nBlockly.DropDownDiv.owner_ = null;\n\n/**\n * Arrow size in px. Should match the value in CSS (need to position pre-render).\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.ARROW_SIZE = 16;\n\n/**\n * Drop-down border size in px. Should match the value in CSS (need to position the arrow).\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.BORDER_SIZE = 1;\n\n/**\n * Amount the arrow must be kept away from the edges of the main drop-down div, in px.\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.ARROW_HORIZONTAL_PADDING = 12;\n\n/**\n * Amount drop-downs should be padded away from the source, in px.\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.PADDING_Y = 20;\n\n/**\n * Length of animations in seconds.\n * @type {number}\n * @const\n */\nBlockly.DropDownDiv.ANIMATION_TIME = 0.25;\n\n/**\n * Timer for animation out, to be cleared if we need to immediately hide\n * without disrupting new shows.\n * @type {number}\n */\nBlockly.DropDownDiv.animateOutTimer_ = null;\n\n/**\n * Callback for when the drop-down is hidden.\n * @type {Function}\n */\nBlockly.DropDownDiv.onHide_ = 0;\n\n// Don't hide a DropDownDiv we're showing\nBlockly.DropDownDiv.isInAnimation = false;\nBlockly.DropDownDiv.isInAnimationTimer = null;\n\n/**\n * Create and insert the DOM element for this div.\n * @param {Element} container Element that the div should be contained in.\n */\nBlockly.DropDownDiv.createDom = function() {\n  if (Blockly.DropDownDiv.DIV_) {\n    return;  // Already created.\n  }\n  Blockly.DropDownDiv.DIV_ = goog.dom.createDom('div', 'blocklyDropDownDiv');\n  document.body.appendChild(Blockly.DropDownDiv.DIV_);\n  Blockly.DropDownDiv.content_ = goog.dom.createDom('div', 'blocklyDropDownContent');\n  Blockly.DropDownDiv.DIV_.appendChild(Blockly.DropDownDiv.content_);\n  Blockly.DropDownDiv.arrow_ = goog.dom.createDom('div', 'blocklyDropDownArrow');\n  Blockly.DropDownDiv.DIV_.appendChild(Blockly.DropDownDiv.arrow_);\n\n  // Transition animation for transform: translate() and opacity.\n  Blockly.DropDownDiv.DIV_.style.transition = 'transform ' +\n    Blockly.DropDownDiv.ANIMATION_TIME + 's, ' +\n    'opacity ' + Blockly.DropDownDiv.ANIMATION_TIME + 's';\n  window.addEventListener('mousedown', Blockly.DropDownDiv.hideIfNotShowing, true);\n};\n\n/**\n * Set an element to maintain bounds within. Drop-downs will appear\n * within the box of this element if possible.\n * @param {Element} boundsElement Element to bound drop-down to.\n */\nBlockly.DropDownDiv.setBoundsElement = function(boundsElement) {\n  Blockly.DropDownDiv.boundsElement_ = boundsElement;\n};\n\n/**\n * Provide the div for inserting content into the drop-down.\n * @return {Element} Div to populate with content\n */\nBlockly.DropDownDiv.getContentDiv = function() {\n  return Blockly.DropDownDiv.content_;\n};\n\n/**\n * Clear the content of the drop-down.\n */\nBlockly.DropDownDiv.clearContent = function() {\n  Blockly.DropDownDiv.content_.innerHTML = '';\n};\n\n/**\n * Set the colour for the drop-down.\n * @param {string} backgroundColour Any CSS color for the background\n * @param {string} borderColour Any CSS color for the border\n */\nBlockly.DropDownDiv.setColour = function(backgroundColour, borderColour) {\n  Blockly.DropDownDiv.DIV_.style.backgroundColor = backgroundColour;\n  Blockly.DropDownDiv.DIV_.style.borderColor = borderColour;\n};\n\n/**\n * Set the category for the drop-down.\n * @param {string} category The new category for the drop-down.\n */\nBlockly.DropDownDiv.setCategory = function(category) {\n  Blockly.DropDownDiv.DIV_.setAttribute('data-category', category);\n};\n\n// Modified: find blocklyPath\nBlockly.DropDownDiv.showPositionedByBlock = function(owner, block,\n      opt_onHide, opt_secondaryYOffset) {\n  var scale = block.workspace.scale;\n  var bBox = {width: block.width, height: block.height};\n  bBox.width *= scale;\n  bBox.height *= scale;\n  var blockSvg = block.getSvgRoot();\n  for(var i=0; i<blockSvg.children.length; i++) {\n     if(blockSvg.children[i].classList[0] == 'blocklyPath') {\n        blockSvg = blockSvg.children[i];\n        break;\n     }\n  }\n  var position = blockSvg.getBoundingClientRect();\n  // If we can fit it, render below the block.\n  var primaryX = position.left + position.width / 2;\n  var primaryY = position.top + position.height;\n  // If we can't fit it, render above the entire parent block.\n  var secondaryX = primaryX;\n  var secondaryY = position.top;\n  if (opt_secondaryYOffset) {\n    secondaryY += opt_secondaryYOffset;\n  }\n  // Set bounds to workspace; show the drop-down.\n  Blockly.DropDownDiv.setBoundsElement(block.workspace.getParentSvg().parentNode);\n  return Blockly.DropDownDiv.show(this, primaryX, primaryY, secondaryX, secondaryY, opt_onHide);\n};\n\n/**\n * Show and place the drop-down.\n * The drop-down is placed with an absolute \"origin point\" (x, y) - i.e.,\n * the arrow will point at this origin and box will positioned below or above it.\n * If we can maintain the container bounds at the primary point, the arrow will\n * point there, and the container will be positioned below it.\n * If we can't maintain the container bounds at the primary point, fall-back to the\n * secondary point and position above.\n * @param {Object} owner The object showing the drop-down\n * @param {number} primaryX Desired origin point x, in absolute px\n * @param {number} primaryY Desired origin point y, in absolute px\n * @param {number} secondaryX Secondary/alternative origin point x, in absolute px\n * @param {number} secondaryY Secondary/alternative origin point y, in absolute px\n * @param {Function=} opt_onHide Optional callback for when the drop-down is hidden\n * @return {boolean} True if the menu rendered at the primary origin point.\n */\nBlockly.DropDownDiv.show = function(owner, primaryX, primaryY, secondaryX, secondaryY, opt_onHide) {\n  // Do not hide the div while we're showing it\n  Blockly.DropDownDiv.isInAnimation = true;\n  if(Blockly.DropDownDiv.animateOutTimer_) {\n    window.clearTimeout(Blockly.DropDownDiv.animateOutTimer_);\n    Blockly.DropDownDiv.animateOutTimer_ = null;\n  }\n  if(Blockly.DropDownDiv.isInAnimationTimer) {\n    window.clearTimeout(Blockly.DropDownDiv.isInAnimationTimer);\n    Blockly.DropDownDiv.isInAnimationTimer = null;\n  }\n  Blockly.DropDownDiv.isInAnimationTimer = window.setTimeout(function () { Blockly.DropDownDiv.isInAnimation = false; }, Blockly.DropDownDiv.ANIMATION_TIME*1000);\n\n  Blockly.DropDownDiv.owner_ = owner;\n  Blockly.DropDownDiv.onHide_ = opt_onHide;\n  var div = Blockly.DropDownDiv.DIV_;\n  var metrics = Blockly.DropDownDiv.getPositionMetrics(primaryX, primaryY, secondaryX, secondaryY);\n  // Update arrow CSS\n  Blockly.DropDownDiv.arrow_.style.transform = 'translate(' +\n    metrics.arrowX + 'px,' + metrics.arrowY + 'px) rotate(45deg)';\n  Blockly.DropDownDiv.arrow_.setAttribute('class',\n    metrics.arrowAtTop ? 'blocklyDropDownArrow arrowTop' : 'blocklyDropDownArrow arrowBottom');\n\n  // When we change `translate` multiple times in close succession,\n  // Chrome may choose to wait and apply them all at once.\n  // Since we want the translation to initial X, Y to be immediate,\n  // and the translation to final X, Y to be animated,\n  // we saw problems where both would be applied after animation was turned on,\n  // making the dropdown appear to fly in from (0, 0).\n  // Using both `left`, `top` for the initial translation and then `translate`\n  // for the animated transition to final X, Y is a workaround.\n\n  // First apply initial translation.\n  div.style.left = metrics.initialX + 'px';\n  div.style.top = metrics.initialY + 'px';\n  // Show the div.\n  div.style.display = 'block';\n  div.style.opacity = 1;\n  // Add final translate, animated through `transition`.\n  // Coordinates are relative to (initialX, initialY),\n  // where the drop-down is absolutely positioned.\n  var dx = (metrics.finalX - metrics.initialX);\n  var dy = (metrics.finalY - metrics.initialY);\n  div.style.transform = 'translate(' + dx + 'px,' + dy + 'px)';\n  return metrics.arrowAtTop;\n};\n\n/**\n * Helper to position the drop-down and the arrow, maintaining bounds.\n * See explanation of origin points in Blockly.DropDownDiv.show.\n * @param {number} primaryX Desired origin point x, in absolute px\n * @param {number} primaryY Desired origin point y, in absolute px\n * @param {number} secondaryX Secondary/alternative origin point x, in absolute px\n * @param {number} secondaryY Secondary/alternative origin point y, in absolute px\n * @returns {Object} Various final metrics, including rendered positions for drop-down and arrow.\n */\nBlockly.DropDownDiv.getPositionMetrics = function(primaryX, primaryY, secondaryX, secondaryY) {\n  var div = Blockly.DropDownDiv.DIV_;\n  var boundPosition = Blockly.DropDownDiv.boundsElement_.getBoundingClientRect();\n\n  var boundSize = goog.style.getSize(Blockly.DropDownDiv.boundsElement_);\n  var divSize = goog.style.getSize(div);\n\n  // First decide if we will render at primary or secondary position\n  // i.e., above or below\n  // renderX, renderY will eventually be the final rendered position of the box.\n  var renderX, renderY, renderedSecondary;\n  // Can the div fit inside the bounds if we render below the primary point?\n  if (secondaryY - divSize.height < boundPosition.top) {\n    // We can't fit below in terms of y. Can we fit above?\n    if (primaryY + divSize.height > boundPosition.top + boundSize.height) {\n      // We also can't fit above, so just render below anyway.\n      renderX = secondaryX;\n      renderY = secondaryY - divSize.height - Blockly.DropDownDiv.PADDING_Y;\n      renderedSecondary = true;\n    } else {\n      // We can fit above, render secondary\n      renderX = primaryX;\n      renderY = primaryY + Blockly.DropDownDiv.PADDING_Y;\n      renderedSecondary = false;\n    }\n  } else {\n    // We can fit below, render primary\n    renderX = secondaryX;\n    renderY = secondaryY - divSize.height - Blockly.DropDownDiv.PADDING_Y;\n    renderedSecondary = true;\n  }\n  // First calculate the absolute arrow X\n  // This needs to be done before positioning the div, since the arrow\n  // wants to be as close to the origin point as possible.\n  var arrowX = renderX - Blockly.DropDownDiv.ARROW_SIZE / 2;\n  // Keep in overall bounds\n  arrowX = Math.max(boundPosition.left, Math.min(arrowX, boundPosition.left + boundSize.width));\n\n  // Adjust the x-position of the drop-down so that the div is centered and within bounds.\n  var centerX = divSize.width / 2;\n  renderX -= centerX;\n  // Fit horizontally in the bounds.\n  renderX = Math.max(\n    boundPosition.left,\n    Math.min(renderX, boundPosition.left + boundSize.width - divSize.width)\n  );\n  // After we've finished caclulating renderX, adjust the arrow to be relative to it.\n  arrowX -= renderX;\n\n  // Pad the arrow by some pixels, primarily so that it doesn't render on top of a rounded border.\n  arrowX = Math.max(\n    Blockly.DropDownDiv.ARROW_HORIZONTAL_PADDING,\n    Math.min(arrowX, divSize.width - Blockly.DropDownDiv.ARROW_HORIZONTAL_PADDING - Blockly.DropDownDiv.ARROW_SIZE)\n  );\n\n  // Calculate arrow Y. If we rendered secondary, add on bottom.\n  // Extra pixels are added so that it covers the border of the div.\n  var arrowY = (renderedSecondary) ? divSize.height - Blockly.DropDownDiv.BORDER_SIZE : 0;\n  arrowY -= (Blockly.DropDownDiv.ARROW_SIZE / 2) + Blockly.DropDownDiv.BORDER_SIZE;\n\n  // Initial position calculated without any padding to provide an animation point.\n  var initialX = renderX; // X position remains constant during animation.\n  var initialY;\n  if (renderedSecondary) {\n    initialY = secondaryY - divSize.height; // No padding on Y\n  } else {\n    initialY = primaryY; // No padding on Y\n  }\n\n  return {\n    initialX: initialX,\n    initialY : initialY+10,\n    finalX: renderX,\n    finalY: renderY+10,\n    arrowX: arrowX,\n    arrowY: arrowY,\n    arrowAtTop: !renderedSecondary\n  };\n};\n\n/**\n * Is the container visible?\n * @return {boolean} True if visible.\n */\nBlockly.DropDownDiv.isVisible = function() {\n  return !!Blockly.DropDownDiv.owner_;\n};\n\n/**\n * Hide the menu only if it is owned by the provided object.\n * @param {Object} owner Object which must be owning the drop-down to hide\n * @return {Boolean} True if hidden\n */\nBlockly.DropDownDiv.hideIfOwner = function(owner) {\n  if (Blockly.DropDownDiv.owner_ === owner) {\n    Blockly.DropDownDiv.hide();\n    return true;\n  }\n  return false;\n};\n\n/**\n * Hide the menu, triggering animation.\n */\nBlockly.DropDownDiv.hide = function() {\n  Blockly.DropDownDiv.isInAnimation = false;\n  // Start the animation by setting the translation and fading out.\n  var div = Blockly.DropDownDiv.DIV_;\n  // Reset to (initialX, initialY) - i.e., no translation.\n  if(div) {\n    div.style.transform = 'translate(0px, 0px)';\n    div.style.opacity = 0;\n    Blockly.DropDownDiv.animateOutTimer_ = setTimeout(function() {\n      // Finish animation - reset all values to default.\n      Blockly.DropDownDiv.hideWithoutAnimation();\n    }, Blockly.DropDownDiv.ANIMATION_TIME * 1000);\n  }\n  if (Blockly.DropDownDiv.onHide_) {\n    Blockly.DropDownDiv.onHide_();\n    Blockly.DropDownDiv.onHide_ = null;\n  }\n};\n\n// Hide after a timeout\nBlockly.DropDownDiv.hideIfNotShowing = function () {\n  if(!Blockly.DropDownDiv.isInAnimation) {\n    Blockly.DropDownDiv.hide();\n  }\n}\n\n/**\n * Hide the menu, without animation.\n */\nBlockly.DropDownDiv.hideWithoutAnimation = function() {\n  if (!Blockly.DropDownDiv.isVisible()) {\n    return;\n  }\n  var div = Blockly.DropDownDiv.DIV_;\n  Blockly.DropDownDiv.animateOutTimer_ && window.clearTimeout(Blockly.DropDownDiv.animateOutTimer_);\n  div.style.transform = '';\n  div.style.top = '';\n  div.style.left = '';\n  div.style.display = 'none';\n  Blockly.DropDownDiv.clearContent();\n  Blockly.DropDownDiv.owner_ = null;\n  if (Blockly.DropDownDiv.onHide_) {\n    Blockly.DropDownDiv.onHide_();\n    Blockly.DropDownDiv.onHide_ = null;\n  }\n};\n","// Adapt to our custom Blockly.Variables.promptName behavior\nBlockly.FieldVariable.prototype.classValidator = function(text) {\n  var workspace = this.sourceBlock_.workspace;\n  if (text == Blockly.Msg.RENAME_VARIABLE) {\n    var oldVar = this.getText();\n    Blockly.hideChaff();\n    var cb = function(text) {\n      if (text) {\n        workspace.renameVariable(oldVar, text);\n      }\n    };\n    text = Blockly.Variables.promptName(\n        Blockly.Msg.RENAME_VARIABLE_TITLE.replace('%1', oldVar), oldVar, cb);\n    return null;\n  } else if (text == Blockly.Msg.DELETE_VARIABLE.replace('%1',\n      this.getText())) {\n    workspace.deleteVariable(this.getText());\n    return null;\n  }\n  return undefined;\n};\n","Blockly.Blocks['procedures_callnoreturn'].renameProcedure = function(oldName, newName, force) {\n  if (!force && Blockly.disableRenameEvents) { return; }\n  if (Blockly.Names.equals(oldName, this.getProcedureCall())) {\n    this.setFieldValue(newName, 'NAME');\n    this.setTooltip(\n        (this.outputConnection ? Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP :\n         Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP)\n        .replace('%1', newName));\n  }\n};\n\nBlockly.Blocks['procedures_callnoreturn'].domToMutation = function(xmlElement) {\n  var name = xmlElement.getAttribute('name');\n  this.renameProcedure(this.getProcedureCall(), name, true);\n  var args = [];\n  var paramIds = [];\n  for (var i = 0, childNode; childNode = xmlElement.childNodes[i]; i++) {\n    if (childNode.nodeName.toLowerCase() == 'arg') {\n      args.push(childNode.getAttribute('name'));\n      paramIds.push(childNode.getAttribute('paramId'));\n    }\n  }\n  this.setProcedureParameters_(args, paramIds);\n};\n\n\nBlockly.Blocks['procedures_callreturn'].renameProcedure = Blockly.Blocks['procedures_callnoreturn'].renameProcedure;\nBlockly.Blocks['procedures_callreturn'].domToMutation = Blockly.Blocks['procedures_callnoreturn'].domToMutation;\n","/**\n * Recalculate a horizontal scrollbar's location on the screen and path length.\n * This should be called when the layout or size of the window has changed.\n * @param {!Object} hostMetrics A data structure describing all the\n *     required dimensions, possibly fetched from the host object.\n */\nBlockly.Scrollbar.prototype.resizeViewHorizontal = function(hostMetrics) {\n  var viewSize = hostMetrics.viewWidth - hostMetrics.flyoutWidth - 1;\n  if (this.pair_) {\n    // Shorten the scrollbar to make room for the corner square.\n    viewSize -= Blockly.Scrollbar.scrollbarThickness;\n  }\n  this.setScrollViewSize_(Math.max(0, viewSize));\n\n  var xCoordinate = hostMetrics.absoluteLeft + hostMetrics.flyoutWidth + 0.5;\n  if (this.pair_ && this.workspace_.RTL) {\n    xCoordinate += Blockly.Scrollbar.scrollbarThickness;\n  }\n\n  // Horizontal toolbar should always be just above the bottom of the workspace.\n  var yCoordinate = hostMetrics.absoluteTop + hostMetrics.viewHeight -\n      Blockly.Scrollbar.scrollbarThickness - 0.5;\n  this.setPosition(xCoordinate, yCoordinate);\n\n  // If the view has been resized, a content resize will also be necessary.  The\n  // reverse is not true.\n  this.resizeContentHorizontal(hostMetrics);\n};\n\n/**\n * Recalculate a horizontal scrollbar's location within its path and length.\n * This should be called when the contents of the workspace have changed.\n * @param {!Object} hostMetrics A data structure describing all the\n *     required dimensions, possibly fetched from the host object.\n */\nBlockly.Scrollbar.prototype.resizeContentHorizontal = function(hostMetrics) {\n  if (!this.pair_) {\n    // Only show the scrollbar if needed.\n    // Ideally this would also apply to scrollbar pairs, but that's a bigger\n    // headache (due to interactions with the corner square).\n    this.setVisible(this.scrollViewSize_ < hostMetrics.contentWidth);\n  }\n\n  this.ratio_ = this.scrollViewSize_ / hostMetrics.contentWidth;\n  if (this.ratio_ == -Infinity || this.ratio_ == Infinity ||\n      isNaN(this.ratio_)) {\n    this.ratio_ = 0;\n  }\n\n  var handleLength = (hostMetrics.viewWidth - hostMetrics.flyoutWidth) * this.ratio_;\n  this.setHandleLength_(Math.max(0, handleLength));\n\n  var handlePosition = (hostMetrics.viewLeft - hostMetrics.contentLeft) *\n      this.ratio_;\n  this.setHandlePosition(this.constrainHandle_(handlePosition));\n};\n\n","// Fix case where there's no workspace (we're probably unloading)\nBlockly.onMouseUp_ = function(e) {\n  var workspace = Blockly.getMainWorkspace();\n  if (!workspace || workspace.dragMode_ == Blockly.DRAG_NONE) {\n    return;\n  }\n  Blockly.Touch.clearTouchIdentifier();\n  Blockly.Css.setCursor(Blockly.Css.Cursor.OPEN);\n  workspace.dragMode_ = Blockly.DRAG_NONE;\n  // Unbind the touch event if it exists.\n  if (Blockly.Touch.onTouchUpWrapper_) {\n    Blockly.unbindEvent_(Blockly.Touch.onTouchUpWrapper_);\n    Blockly.Touch.onTouchUpWrapper_ = null;\n  }\n  if (Blockly.onMouseMoveWrapper_) {\n    Blockly.unbindEvent_(Blockly.onMouseMoveWrapper_);\n    Blockly.onMouseMoveWrapper_ = null;\n  }\n};\n\n","// Remove some characters which make JavaScript.STATEMENT_PREFIX instructions\n// generation go wrong\nBlockly.genUid.soup_ = '!#()*+,-./:;=?@[]_`{|}~' +\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n","Blockly.JavaScript['variables_set'] = function(block) {\n  // Variable setter.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var assignCode = varName + ' = ' + argument0 + ';\\n';\n\n  // Report value if available\n  var reportCode = \"reportBlockValue('\" + block.id + \"', \"+varName+\", '\"+varName+\"');\\n\";\n\n  return assignCode + reportCode;\n};\n","// reportValue allows to show a popup next to a block\nBlockly.WorkspaceSvg.prototype.reportValue = function(id, value) {\n  var block = this.getBlockById(id);\n  if (!block) {\n    throw 'Tried to report value on block that does not exist.';\n  }\n  Blockly.DropDownDiv.createDom();\n  Blockly.DropDownDiv.hideWithoutAnimation();\n  Blockly.DropDownDiv.clearContent();\n  var contentDiv = Blockly.DropDownDiv.getContentDiv();\n  var valueReportBox = goog.dom.createElement('div');\n  valueReportBox.setAttribute('class', 'valueReportBox');\n  valueReportBox.innerHTML = value;\n  contentDiv.appendChild(valueReportBox);\n  Blockly.DropDownDiv.setColour(\"#FFFFFF\", \"#AAAAAA\");\n  Blockly.DropDownDiv.showPositionedByBlock(this, block);\n};\n\n// Fix issue when unloading\nBlockly.WorkspaceSvg.prototype.translate = function(x, y) {\n  var translation = 'translate(' + x + ',' + y + ') ' +\n      'scale(' + this.scale + ')';\n  if(this.svgBlockCanvas_) {\n    this.svgBlockCanvas_.setAttribute('transform', translation);\n  }\n  if(this.svgBubbleCanvas_) {\n    this.svgBubbleCanvas_.setAttribute('transform', translation);\n  }\n};\n","Blockly.Xml.domToWorkspaceOriginal = Blockly.Xml.domToWorkspace;\n\nBlockly.Xml.domToWorkspace = function(xml, workspace) {\n  Blockly.disableRenameEvents = true;\n  Blockly.Xml.domToWorkspaceOriginal(xml, workspace);\n  Blockly.disableRenameEvents = false;\n}\n","FioiBlockly.Msg.fr = {};\n\nFioiBlockly.Msg.fr.VARIABLES_DEFAULT_NAME = \"element\";\nFioiBlockly.Msg.fr.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;\n\nFioiBlockly.Msg.fr.DICTS_CREATE_EMPTY_TITLE = \"dictionnaire vide\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_CONTAINER_TITLE_ADD = \"Créer un dictionnaire\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_CONTAINER_TOOLTIP = \"\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_INPUT_WITH = \"créer un dictionnaire :\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_ITEM_KEY = \"cle\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_ITEM_MAPPING = \":\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_ITEM_TITLE = \"clé/valeur\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_ITEM_TOOLTIP = \"\";\nFioiBlockly.Msg.fr.DICTS_CREATE_WITH_TOOLTIP = \"\";\nFioiBlockly.Msg.fr.DICT_GET = \"récupérer la clé\";\nFioiBlockly.Msg.fr.DICT_GET_TO = \"de\";\nFioiBlockly.Msg.fr.DICT_KEYS = \"liste des clés de\";\nFioiBlockly.Msg.fr.TEXT_PRINT_TITLE = \"afficher la ligne %1\";\nFioiBlockly.Msg.fr.TEXT_PRINT_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, avec retour à la ligne après.\";\nFioiBlockly.Msg.fr.TEXT_PRINT_NOEND_TITLE = \"afficher %1\";\nFioiBlockly.Msg.fr.TEXT_PRINT_NOEND_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, sans retour à la ligne.\";\n\nFioiBlockly.Msg.fr.LISTS_APPEND_MSG = \"à la liste %1 ajouter l'élément %2\";\nFioiBlockly.Msg.fr.LISTS_APPEND_TOOLTIP = \"Ajouter un élément à la liste '%1'\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_FIRST = \"au début\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_FROM_END = \"à l'indice depuis la fin\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_FROM_START = \"à l'indice\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_GET = \"obtenir la valeur\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_GET_REMOVE = \"obtenir et supprimer la valeur\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_LAST = \"à la fin\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_RANDOM = \"à un indice aléatoire\";\nFioiBlockly.Msg.fr.LISTS_GET_INDEX_REMOVE = \"supprimer la valeur\";\nFioiBlockly.Msg.fr.LISTS_SET_INDEX_INSERT = \"insérer\";\n\nFioiBlockly.Msg.fr.INPUT_NUM = \"lire un nombre\";\nFioiBlockly.Msg.fr.INPUT_NUM_TOOLTIP = \"Lit un nombre sur l'entrée du programme.\";\nFioiBlockly.Msg.fr.INPUT_CHAR = \"lire un caractère\";\nFioiBlockly.Msg.fr.INPUT_CHAR_TOOLTIP = \"Lit un caractère sur l'entrée du programme.\";\nFioiBlockly.Msg.fr.INPUT_WORD = \"lire un mot\";\nFioiBlockly.Msg.fr.INPUT_WORD_TOOLTIP = \"Lit un mot sur l'entrée du programme.\";\nFioiBlockly.Msg.fr.INPUT_LINE = \"lire une ligne\";\nFioiBlockly.Msg.fr.INPUT_LINE_TOOLTIP = \"Lit une ligne sur l'entrée du programme.\";\n\nFioiBlockly.Msg.fr.CANNOT_DELETE_VARIABLE_PROCEDURE = \"Impossible de supprimer la variable '%1', utilisée par la procédure '%2'.\";\n\nFioiBlockly.Msg.fr.DATA_REPLACEITEMOFLIST_TITLE = \"remplacer l'élément %1 de la liste %2 par %3\";\nFioiBlockly.Msg.fr.DATA_ITEMOFLIST_TITLE = \"élément %1 dans %2\";\nFioiBlockly.Msg.fr.DATA_LISTREPEAT_TITLE = \"initialiser la liste %1 avec %2 répété %3 fois\";\n","// Fill undefined Blockly.Msg messages with messages from the default language\nFioiBlockly.fillLanguage = function() {\n  for(var msgName in FioiBlockly.Msg[FioiBlockly.defaultLang]) {\n    if(typeof Blockly.Msg[msgName] == 'undefined') {\n      Blockly.Msg[msgName] = FioiBlockly.Msg[FioiBlockly.defaultLang][msgName];\n    }\n  }\n}\nFioiBlockly.fillLanguage();\n","Blockly.Python['dict_get'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dict_get_literal'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.quote_(block.getFieldValue('ITEM'));\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dicts_create_with'] = function(block) {\n    var value_keys = Blockly.Python.valueToCode(block, 'keys', Blockly.   Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = new Array(block.itemCount_);\n  \n    for (var n = 0; n < block.itemCount_; n++) {\n        var key = Blockly.Python.quote_(block.getFieldValue('KEY' + n));\n        var value = Blockly.Python.valueToCode(block, 'VALUE' + n,\n                Blockly.Python.ORDER_NONE) || '___';\n        code[n] = key +\": \"+ value;\n    }\n    code = '{' + code.join(', ') + '}';\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['dict_keys'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var code = dict + '.keys()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n","Blockly.Python['input_num'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'int(input_word())';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_char'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.read(1)';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_word'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'input_word()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_line'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.readline()[:-1]';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n","Blockly.Python['lists_append'] = function(block) {\n  // Append\n  var varName = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.Variables.NAME_TYPE);\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  return varName + '.append(' + value + ')\\n';\n};\n","FioiBlockly.OriginalBlocks['logic_compare'] = Blockly.Blocks['logic_compare'];\n\n// Use standard operator names (for instance '!=' instead of '≠')\nBlockly.Blocks['logic_compare'] = {\n  /**\n   * Block for comparison operator.\n   * @this Blockly.Block\n   */\n  init: function() {\n    var rtlOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['>', 'LT'],\n      ['>=', 'LTE'],\n      ['<', 'GT'],\n      ['<=', 'GTE']\n    ];\n    var ltrOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['<', 'LT'],\n      ['<=', 'LTE'],\n      ['>', 'GT'],\n      ['>=', 'GTE']\n    ];\n    var OPERATORS = this.RTL ? rtlOperators : ltrOperators;\n    this.setHelpUrl(Blockly.Msg.LOGIC_COMPARE_HELPURL);\n    this.setColour(Blockly.Blocks.logic.HUE);\n    this.setOutput(true, 'Boolean');\n    this.appendValueInput('A');\n    this.appendValueInput('B')\n        .appendField(new Blockly.FieldDropdown(OPERATORS), 'OP');\n    this.setInputsInline(true);\n    // Assign 'this' to a variable for use in the tooltip closure below.\n    var thisBlock = this;\n    this.setTooltip(function() {\n      var op = thisBlock.getFieldValue('OP');\n      var TOOLTIPS = {\n        'EQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ,\n        'NEQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ,\n        'LT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT,\n        'LTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE,\n        'GT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT,\n        'GTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE\n      };\n      return TOOLTIPS[op];\n    });\n    this.prevBlocks_ = [null, null];\n  },\n  /**\n   * Called whenever anything on the workspace changes.\n   * Prevent mismatched types from being compared.\n   * @param {!Blockly.Events.Abstract} e Change event.\n   * @this Blockly.Block\n   */\n  onchange: function(e) {\n    var blockA = this.getInputTargetBlock('A');\n    var blockB = this.getInputTargetBlock('B');\n    // Disconnect blocks that existed prior to this change if they don't match.\n    if (blockA && blockB &&\n        !blockA.outputConnection.checkType_(blockB.outputConnection)) {\n      // Mismatch between two inputs.  Disconnect previous and bump it away.\n      // Ensure that any disconnections are grouped with the causing event.\n      Blockly.Events.setGroup(e.group);\n      for (var i = 0; i < this.prevBlocks_.length; i++) {\n        var block = this.prevBlocks_[i];\n        if (block === blockA || block === blockB) {\n          block.unplug();\n          block.bumpNeighbours_();\n        }\n      }\n      Blockly.Events.setGroup(false);\n    }\n    this.prevBlocks_[0] = blockA;\n    this.prevBlocks_[1] = blockB;\n  }\n};\n\n","Blockly.Python['text_print_noend'] = function(block) {\n  // Print statement.\n  var msg = Blockly.Python.valueToCode(block, 'TEXT',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  return 'print(' + msg + ', end=\"\")\\n';\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.JavaScript.init = function(workspace) {\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.JavaScript.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.JavaScript.functionNames_ = Object.create(null);\n\n  if (!Blockly.JavaScript.variableDB_) {\n    Blockly.JavaScript.variableDB_ =\n        new Blockly.Names(Blockly.JavaScript.RESERVED_WORDS_);\n  } else {\n    Blockly.JavaScript.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped JavaScript string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @private\n */\nBlockly.JavaScript.quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n\n\nBlockly.JavaScript['controls_for'] = function(block) {\n  // For loop.\n  var variable0 = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'TO',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var increment = Blockly.JavaScript.valueToCode(block, 'BY',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\n  var code;\n  if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\n      Blockly.isNumber(increment)) {\n    // All arguments are simple numbers.\n    var up = parseFloat(argument0) <= parseFloat(argument1);\n    code = 'for (var ' + variable0 + ' = ' + argument0 + '; ' +\n        variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\n        variable0;\n    var step = Math.abs(parseFloat(increment));\n    if (step == 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    var startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\n      startVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_start', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    var endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\n      var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_end', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    var incVar = Blockly.JavaScript.variableDB_.getDistinctName(\n        variable0 + '_inc', Blockly.Variables.NAME_TYPE);\n    code += 'var ' + incVar + ' = ';\n    if (Blockly.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += Blockly.JavaScript.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' +\n        incVar + ' >= 0 ? ' +\n        variable0 + ' <= ' + endVar + ' : ' +\n        variable0 + ' >= ' + endVar + '; ' +\n        variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nBlockly.JavaScript['variables_set'] = function(block) {\n  // Variable setter.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  return 'var ' + varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.Python.init = function(workspace) {\n  /**\n   * Empty loops or conditionals are not allowed in Python.\n   */\n  Blockly.Python.PASS = this.INDENT + 'pass\\n';\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.Python.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.Python.functionNames_ = Object.create(null);\n\n  if (!Blockly.Python.variableDB_) {\n    Blockly.Python.variableDB_ =\n        new Blockly.Names(Blockly.Python.RESERVED_WORDS_);\n  } else {\n    Blockly.Python.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped Python string, complete with quotes.\n * @param {string} string Text to encode.\n * @return {string} Python string.\n * @private\n */\nBlockly.Python.quote_ = function(string) {\n  // Can't use goog.string.quote since % must also be escaped.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\\%/g, '\\\\%')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n","Blockly.Python['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  if (block.getField('TIMES')) {\n    // Internal number.\n    var repeats = String(parseInt(block.getFieldValue('TIMES'), 10));\n  } else {\n    // External number.\n    var repeats = Blockly.Python.valueToCode(block, 'TIMES',\n        Blockly.Python.ORDER_NONE) || '0';\n  }\n  if (Blockly.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'int(' + repeats + ')';\n  }\n  var branch = Blockly.Python.statementToCode(block, 'DO');\n  branch = Blockly.Python.addLoopTrap(branch, block.id) ||\n      Blockly.Python.PASS;\n  var loopVar = Blockly.Python.variableDB_.getDistinctName(\n      'loop', Blockly.Variables.NAME_TYPE);\n  var code = 'for ' + loopVar + ' in range(' + repeats + '):\\n' + branch;\n  return code;\n};\n\nBlockly.Python['controls_repeat'] = Blockly.Python['controls_repeat_ext'];\n","Blockly.JavaScript['math_change'] = function(block) {\n  // Add to a variable in place.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'DELTA',\n      Blockly.JavaScript.ORDER_ADDITION) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var incrCode = varName + ' = (typeof ' + varName + ' == \\'number\\' ? ' + varName +\n      ' : 0) + ' + argument0 + ';\\n';\n\n  // Report value if available\n  var reportCode = \"reportBlockValue('\" + block.id + \"', \"+varName+\", '\"+varName+\"');\\n\";\n\n  return incrCode + reportCode;\n};\n","Blockly.Python['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  // First, add a 'global' statement for every variable that is assigned.\n  // acbart: Actually, skip that, globals are bad news!\n  var globals = []; //Blockly.Variables.allVariables(block);\n  for (var i = globals.length - 1; i >= 0; i--) {\n    var varName = globals[i];\n    if (block.arguments_.indexOf(varName) == -1) {\n      globals[i] = Blockly.Python.variableDB_.getName(varName,\n          Blockly.Variables.NAME_TYPE);\n    } else {\n      // This variable is actually a parameter name.  Do not include it in\n      // the list of globals, thus allowing it be of local scope.\n      globals.splice(i, 1);\n    }\n  }\n  globals = globals.length ? '  global ' + globals.join(', ') + '\\n' : '';\n  // Get the function's name\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  // Get the stack of code\n  var branch = Blockly.Python.statementToCode(block, 'STACK');\n  // Handle prefixing\n  if (Blockly.Python.STATEMENT_PREFIX) {\n    branch = Blockly.Python.prefixLines(\n        Blockly.Python.STATEMENT_PREFIX.replace(/%1/g,\n        '\\'' + block.id + '\\''), Blockly.Python.INDENT) + branch;\n  }\n  // Handle infinite loop trapping\n  if (Blockly.Python.INFINITE_LOOP_TRAP) {\n    branch = Blockly.Python.INFINITE_LOOP_TRAP.replace(/%1/g,\n        '\"' + block.id + '\"') + branch;\n  }\n  // Handle return value\n  var returnValue = Blockly.Python.valueToCode(block, 'RETURN',\n      Blockly.Python.ORDER_NONE) || '';\n  if (returnValue) {\n    returnValue = '  return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = Blockly.Python.PASS;\n  }\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.variableDB_.getName(block.arguments_[x],\n        Blockly.Variables.NAME_TYPE);\n  }\n  var code = 'def ' + funcName + '(' + args.join(', ') + '):\\n' +\n      globals + branch + returnValue;\n  //acbart: I'm not sure why this is used here. It was fine before when\n  //        functions didn't have anything after them, but now it's deadly.\n  //code = Blockly.Python.scrub_(block, code);\n  //Blockly.Python.definitions_[funcName] = code;\n  return code;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nBlockly.Python['procedures_defnoreturn'] =\n    Blockly.Python['procedures_defreturn'];\n\nBlockly.Python['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.valueToCode(block, 'ARG' + x,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = funcName + '(' + args.join(', ') + ')';\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.valueToCode(block, 'ARG' + x,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = funcName + '(' + args.join(', ') + ')\\n';\n  return code;\n};\n\nBlockly.Python['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  var condition = Blockly.Python.valueToCode(block, 'CONDITION',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = 'if ' + condition + ':\\n';\n  if (block.hasReturnValue_) {\n    var value = Blockly.Python.valueToCode(block, 'VALUE',\n        Blockly.Python.ORDER_NONE) || '___';\n    code += '  return ' + value + '\\n';\n  } else {\n    code += '  return\\n';\n  }\n  return code;\n};\n\nBlockly.Python['procedures_return'] = function(block) {\n  // return value from a procedure.\n  var code = \"return\";\n  if (block.hasReturnValue_) {\n    var value = Blockly.Python.valueToCode(block, 'VALUE',\n        Blockly.Python.ORDER_NONE) || '___';\n    code += ' ' + value + '\\n';\n  } else {\n    code += '\\n';\n  }\n  return code;\n};\n"]}