{"version":3,"sources":["scrollbar.js","variables.js","msg_fr.js","dicts.js","inputs.js","lists.js","logic.js","text.js","javascript.js","python.js","loops.js","python_procedures.js"],"names":["Blockly","Scrollbar","prototype","resizeViewHorizontal","hostMetrics","viewSize","viewWidth","flyoutWidth","this","pair_","scrollbarThickness","setScrollViewSize_","Math","max","xCoordinate","absoluteLeft","workspace_","RTL","yCoordinate","absoluteTop","viewHeight","setPosition","resizeContentHorizontal","setVisible","scrollViewSize_","contentWidth","ratio_","Infinity","isNaN","handleLength","setHandleLength_","handlePosition","viewLeft","contentLeft","setHandlePosition","constrainHandle_","Variables","flyoutOptions","any","anyButton","fixed","includedBlocks","get","set","incr","shortList","flyoutCategory","workspace","xmlList","options","scratchMode","fullVariableList","variableList","indexOf","newVarIdx","i","length","idx","splice","sort","goog","string","caseInsensitiveCompare","button","dom","createDom","setAttribute","Msg","NEW_VARIABLE","registerButtonCallback","createVariable","getTargetWorkspace","push","concat","blockNames","Blocks","block","field","createVariableDom_","appendChild","createTextDom_","createMathNumberDom_","value","shadowBlock","numberField","VARIABLES_DEFAULT_NAME","TEXT_APPEND_VARIABLE","DICTS_CREATE_EMPTY_TITLE","DICTS_CREATE_WITH_CONTAINER_TITLE_ADD","DICTS_CREATE_WITH_CONTAINER_TOOLTIP","DICTS_CREATE_WITH_INPUT_WITH","DICTS_CREATE_WITH_ITEM_KEY","DICTS_CREATE_WITH_ITEM_MAPPING","DICTS_CREATE_WITH_ITEM_TITLE","DICTS_CREATE_WITH_ITEM_TOOLTIP","DICTS_CREATE_WITH_TOOLTIP","DICT_GET","DICT_GET_TO","DICT_KEYS","LISTS_APPEND_MSG","LISTS_APPEND_TOOLTIP","TEXT_PRINT_TITLE","TEXT_PRINT_TOOLTIP","TEXT_PRINT_NOEND_TITLE","TEXT_PRINT_NOEND_TOOLTIP","INPUT_NUM","INPUT_NUM_TOOLTIP","INPUT_CHAR","INPUT_CHAR_TOOLTIP","INPUT_WORD","INPUT_WORD_TOOLTIP","INPUT_LINE","INPUT_LINE_TOOLTIP","dicts","HUE","init","setColour","appendValueInput","setCheck","appendField","setInputsInline","setOutput","newQuote_","FieldTextInput","open","file","FieldImage","appendDummyInput","appendStatementInput","setTooltip","contextMenu","setPreviousStatement","setNextStatement","itemCount_","updateShape_","setMutator","Mutator","mutationToDom","container","document","createElement","domToMutation","xmlElement","parseInt","getAttribute","getInput","removeInput","setAlign","ALIGN_RIGHT","decompose","containerBlock","Block","obtain","initSvg","connection","x","itemBlock","connect","previousConnection","nextConnection","compose","getInputTargetBlock","connections","valueConnection_","targetBlock","saveConnections","value_input","targetConnection","inputs","lists","jsonInit","message0","args0","type","name","variable","check","previousStatement","nextStatement","colour","thisBlock","replace","getFieldValue","rtlOperators","ltrOperators","OPERATORS","setHelpUrl","LOGIC_COMPARE_HELPURL","logic","FieldDropdown","op","TOOLTIPS","EQ","LOGIC_COMPARE_TOOLTIP_EQ","NEQ","LOGIC_COMPARE_TOOLTIP_NEQ","LT","LOGIC_COMPARE_TOOLTIP_LT","LTE","LOGIC_COMPARE_TOOLTIP_LTE","GT","LOGIC_COMPARE_TOOLTIP_GT","GTE","LOGIC_COMPARE_TOOLTIP_GTE","prevBlocks_","onchange","e","blockA","blockB","outputConnection","checkType_","Events","setGroup","group","unplug","bumpNeighbours_","texts","tooltip","helpUrl","TEXT_PRINT_HELPURL","JavaScript","definitions_","Object","create","functionNames_","variableDB_","reset","Names","RESERVED_WORDS_","quote_","variable0","getName","NAME_TYPE","argument0","valueToCode","ORDER_ASSIGNMENT","argument1","increment","branch","statementToCode","addLoopTrap","id","code","isNumber","up","parseFloat","step","abs","startVar","match","getDistinctName","endVar","incVar","INDENT","varName","Python","PASS","dict","ORDER_MEMBER","ORDER_NONE","ORDER_ATOMIC","Array","n","key","join","getField","repeats","String","Number","loopVar","globals","arguments_","funcName","Procedures","STATEMENT_PREFIX","prefixLines","INFINITE_LOOP_TRAP","returnValue","args","ORDER_FUNCTION_CALL","condition","hasReturnValue_","msg"],"mappings":"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","file":"fioi-blockly.min.js","sourcesContent":["/**\n * Recalculate a horizontal scrollbar's location on the screen and path length.\n * This should be called when the layout or size of the window has changed.\n * @param {!Object} hostMetrics A data structure describing all the\n *     required dimensions, possibly fetched from the host object.\n */\nBlockly.Scrollbar.prototype.resizeViewHorizontal = function(hostMetrics) {\n  var viewSize = hostMetrics.viewWidth - hostMetrics.flyoutWidth - 1;\n  if (this.pair_) {\n    // Shorten the scrollbar to make room for the corner square.\n    viewSize -= Blockly.Scrollbar.scrollbarThickness;\n  }\n  this.setScrollViewSize_(Math.max(0, viewSize));\n\n  var xCoordinate = hostMetrics.absoluteLeft + hostMetrics.flyoutWidth + 0.5;\n  if (this.pair_ && this.workspace_.RTL) {\n    xCoordinate += Blockly.Scrollbar.scrollbarThickness;\n  }\n\n  // Horizontal toolbar should always be just above the bottom of the workspace.\n  var yCoordinate = hostMetrics.absoluteTop + hostMetrics.viewHeight -\n      Blockly.Scrollbar.scrollbarThickness - 0.5;\n  this.setPosition(xCoordinate, yCoordinate);\n\n  // If the view has been resized, a content resize will also be necessary.  The\n  // reverse is not true.\n  this.resizeContentHorizontal(hostMetrics);\n};\n\n/**\n * Recalculate a horizontal scrollbar's location within its path and length.\n * This should be called when the contents of the workspace have changed.\n * @param {!Object} hostMetrics A data structure describing all the\n *     required dimensions, possibly fetched from the host object.\n */\nBlockly.Scrollbar.prototype.resizeContentHorizontal = function(hostMetrics) {\n  if (!this.pair_) {\n    // Only show the scrollbar if needed.\n    // Ideally this would also apply to scrollbar pairs, but that's a bigger\n    // headache (due to interactions with the corner square).\n    this.setVisible(this.scrollViewSize_ < hostMetrics.contentWidth);\n  }\n\n  this.ratio_ = this.scrollViewSize_ / hostMetrics.contentWidth;\n  if (this.ratio_ == -Infinity || this.ratio_ == Infinity ||\n      isNaN(this.ratio_)) {\n    this.ratio_ = 0;\n  }\n\n  var handleLength = (hostMetrics.viewWidth - hostMetrics.flyoutWidth) * this.ratio_;\n  this.setHandleLength_(Math.max(0, handleLength));\n\n  var handlePosition = (hostMetrics.viewLeft - hostMetrics.contentLeft) *\n      this.ratio_;\n  this.setHandlePosition(this.constrainHandle_(handlePosition));\n};\n\n","// Options for the variables flyout\nBlockly.Variables.flyoutOptions = {\n  any: true, // Allow to create any variable\n  anyButton: true, // Add the button to add variables (needs any=true)\n  fixed: [], // List of fixed variables (will create blocks for each of them)\n  includedBlocks: {get: true, set: true, incr: true}, // Blocks to add to the list\n  shortList: true, // Generate set/incr blocks only for the first (non-fixed) variable\n  };\n\n// Construct the blocks required by the flyout for the variable category.\nBlockly.Variables.flyoutCategory = function(workspace) {\n  var xmlList = [];\n  var options = Blockly.Variables.flyoutOptions;\n\n  // Detect if we're in Blockly or Scratch\n  var scratchMode = !!(Blockly.registerButtonCallback);\n  if(options.any) {\n    if(workspace) {\n      var fullVariableList = workspace.variableList;\n    } else {\n      if(options.fixed.indexOf('newvar') > -1) {\n        var newVarIdx = 0;\n        while(options.fixed.indexOf('newvar'+newVarIdx) > -1) {\n          newVarIdx++;\n        }\n        var fullVariableList = ['newvar'+newVarIdx];\n      } else {\n        var fullVariableList = ['newvar'];\n      }\n    }\n    for(var i=0; i<options.fixed.length; i++) {\n      var idx = fullVariableList.indexOf(options.fixed[i]);\n      if(idx > -1) {\n        fullVariableList.splice(idx, 1);\n      }\n    }\n    fullVariableList.sort(goog.string.caseInsensitiveCompare);\n\n    if(options.anyButton) {\n      var button = goog.dom.createDom('button');\n      button.setAttribute('text', Blockly.Msg.NEW_VARIABLE);\n      if(scratchMode) {\n        // Scratch\n        button.setAttribute('callbackKey', 'CREATE_VARIABLE');\n        Blockly.registerButtonCallback('CREATE_VARIABLE', function(button) {\n          Blockly.Variables.createVariable(button.getTargetWorkspace());\n        });\n      }\n      xmlList.push(button);\n    }\n  } else {\n    var fullVariableList = [];\n  }\n\n  var variableList = options.fixed.concat(fullVariableList);\n\n  if (variableList.length > 0) {\n    if(scratchMode) {\n      var blockNames = {\n        get: 'data_variable',\n        set: 'data_setvariableto',\n        incr: 'data_changevariableby'\n        };\n    } else {\n      var blockNames = {\n        get: 'variables_get',\n        set: 'variables_set',\n        incr: 'math_change'\n        };\n    }\n\n    if (options.includedBlocks.get && Blockly.Blocks[blockNames.get]) {\n      for(var i=0; i<variableList.length; i++) {\n        // <block type=\"variables_get\" gap=\"8\">\n        //   <field name=\"VAR\">item</field>\n        // </block>\n        var block = goog.dom.createDom('block');\n        block.setAttribute('type', blockNames.get);\n        if (i < options.fixed.length) {\n          block.setAttribute('editable', 'false');\n        }\n        if (i == variableList.length - 1) {\n          block.setAttribute('gap', 24);\n        } else {\n          block.setAttribute('gap', 8);\n        }\n\n        if(scratchMode) {\n          var field = Blockly.Variables.createVariableDom_(variableList[i]);\n        } else {\n          var field = goog.dom.createDom('field', null, variableList[i]);\n          field.setAttribute('name', 'VAR');\n        }\n\n        block.appendChild(field);\n        xmlList.push(block);\n      }\n    }\n\n    if (options.includedBlocks.set && Blockly.Blocks[blockNames.set]) {\n      for(var i=0; i<variableList.length; i++) {\n        // <block type=\"variables_set\" gap=\"20\">\n        //   <field name=\"VAR\">item</field>\n        // </block>\n        if(options.shortList && i > options.fixed.length) {\n          break;\n        }\n\n        var block = goog.dom.createDom('block');\n        block.setAttribute('type', blockNames.set);\n        if (i < options.fixed.length) {\n          block.setAttribute('editable', 'false');\n        }\n        if (i == variableList.length - 1) {\n          block.setAttribute('gap', 24);\n        } else {\n          block.setAttribute('gap', 8);\n        }\n\n        if(scratchMode) {\n          var field = Blockly.Variables.createVariableDom_(variableList[i]);\n          block.appendChild(field);\n          block.appendChild(Blockly.Variables.createTextDom_());\n        } else {\n          var field = goog.dom.createDom('field', null, variableList[i]);\n          field.setAttribute('name', 'VAR');\n          block.appendChild(field);\n        }\n\n        xmlList.push(block);\n      }\n    }\n    if (options.includedBlocks.incr && Blockly.Blocks[blockNames.incr]) {\n      for(var i=0; i<variableList.length; i++) {\n        // <block type=\"math_change\">\n        //   <value name=\"DELTA\">\n        //     <shadow type=\"math_number\">\n        //       <field name=\"NUM\">1</field>\n        //     </shadow>\n        //   </value>\n        // </block>\n        if(options.shortList && i > options.fixed.length) {\n          break;\n        }\n\n        var block = goog.dom.createDom('block');\n        block.setAttribute('type', blockNames.incr);\n        if (i < options.fixed.length) {\n          block.setAttribute('editable', 'false');\n        }\n        if (i == variableList.length - 1) {\n          block.setAttribute('gap', 24);\n        } else {\n          block.setAttribute('gap', 8);\n        }\n        if(scratchMode) {\n          var field = Blockly.Variables.createVariableDom_(variableList[i]);\n          block.appendChild(field);\n          block.appendChild(Blockly.Variables.createMathNumberDom_())\n        } else {\n          var value = goog.dom.createDom('value');\n          value.setAttribute('name', 'DELTA');\n          block.appendChild(value);\n\n          var shadowBlock = goog.dom.createDom('shadow');\n          shadowBlock.setAttribute('type', 'math_number');\n          value.appendChild(shadowBlock);\n\n          var numberField = goog.dom.createDom('field', null, '1');\n          numberField.setAttribute('name', 'NUM');\n          shadowBlock.appendChild(numberField);\n\n          var field = goog.dom.createDom('field', null, variableList[i]);\n          field.setAttribute('name', 'VAR');\n          block.appendChild(field);\n        }\n\n        xmlList.push(block);\n      }\n    }\n\n  }\n  return xmlList;\n};\n\n","Blockly.Msg.VARIABLES_DEFAULT_NAME = \"element\";\nBlockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;\n\nBlockly.Msg.DICTS_CREATE_EMPTY_TITLE = \"dictionnaire vide\";\nBlockly.Msg.DICTS_CREATE_WITH_CONTAINER_TITLE_ADD = \"Créer un dictionnaire\";\nBlockly.Msg.DICTS_CREATE_WITH_CONTAINER_TOOLTIP = \"\";\nBlockly.Msg.DICTS_CREATE_WITH_INPUT_WITH = \"créer un dictionnaire :\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_KEY = \"cle\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_MAPPING = \":\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_TITLE = \"clé/valeur\";\nBlockly.Msg.DICTS_CREATE_WITH_ITEM_TOOLTIP = \"\";\nBlockly.Msg.DICTS_CREATE_WITH_TOOLTIP = \"\";\nBlockly.Msg.DICT_GET = \"récupérer la clé\";\nBlockly.Msg.DICT_GET_TO = \"de\";\nBlockly.Msg.DICT_KEYS = \"liste des clés de\";\nBlockly.Msg.LISTS_APPEND_MSG = \"à la liste %1 ajouter l'élément %2\";\nBlockly.Msg.LISTS_APPEND_TOOLTIP = \"Ajouter un élément à la liste '%1'\";\nBlockly.Msg.TEXT_PRINT_TITLE = \"afficher la ligne %1\";\nBlockly.Msg.TEXT_PRINT_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, avec retour à la ligne après.\";\nBlockly.Msg.TEXT_PRINT_NOEND_TITLE = \"afficher %1\";\nBlockly.Msg.TEXT_PRINT_NOEND_TOOLTIP = \"Afficher le texte, le nombre ou une autre valeur spécifiée, sans retour à la ligne.\";\n\nBlockly.Msg.INPUT_NUM = \"lire un nombre\";\nBlockly.Msg.INPUT_NUM_TOOLTIP = \"Lit un nombre sur l'entrée du programme.\";\nBlockly.Msg.INPUT_CHAR = \"lire un caractère\";\nBlockly.Msg.INPUT_CHAR_TOOLTIP = \"Lit un caractère sur l'entrée du programme.\";\nBlockly.Msg.INPUT_WORD = \"lire un mot\";\nBlockly.Msg.INPUT_WORD_TOOLTIP = \"Lit un mot sur l'entrée du programme.\";\nBlockly.Msg.INPUT_LINE = \"lire une ligne\";\nBlockly.Msg.INPUT_LINE_TOOLTIP = \"Lit une ligne sur l'entrée du programme.\";\n","Blockly.Python['dict_get'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dict_get_literal'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var value = Blockly.Python.quote_(block.getFieldValue('ITEM'));\n  var code = dict + '[' + value + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Python['dicts_create_with'] = function(block) {\n    var value_keys = Blockly.Python.valueToCode(block, 'keys', Blockly.   Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = new Array(block.itemCount_);\n  \n    for (var n = 0; n < block.itemCount_; n++) {\n        var key = Blockly.Python.quote_(block.getFieldValue('KEY' + n));\n        var value = Blockly.Python.valueToCode(block, 'VALUE' + n,\n                Blockly.Python.ORDER_NONE) || '___';\n        code[n] = key +\": \"+ value;\n    }\n    code = '{' + code.join(', ') + '}';\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['dict_keys'] = function(block) {\n  var dict = Blockly.Python.valueToCode(block, 'DICT',\n      Blockly.Python.ORDER_MEMBER) || '___';\n  var code = dict + '.keys()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n","Blockly.Python['input_num'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'int(input_word())';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_char'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.read(1)';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_word'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  Blockly.Python.definitions_['from_string_import_whitespace'] = 'from string import whitespace';\n  Blockly.Python.definitions_['input_word'] = \"def input_word():\\n\"\n                                            + \"    buffer = ''\\n\"\n                                            + \"    newchar = 'c'\\n\"\n                                            + \"    while newchar:\\n\"\n                                            + \"        newchar = sys.stdin.read(1)\\n\"\n                                            + \"        if newchar in whitespace:\\n\"\n                                            + \"            if buffer: break\\n\"\n                                            + \"        else:\\n\"\n                                            + \"            buffer += newchar\\n\"\n                                            + \"    return buffer\\n\";\n  var code = 'input_word()';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['input_line'] = function(block) {\n  Blockly.Python.definitions_['import_sys'] = 'import sys';\n  var code = 'sys.stdin.readline()[:-1]';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n","Blockly.Python['lists_append'] = function(block) {\n  // Append\n  var varName = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.Variables.NAME_TYPE);\n  var value = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || '___';\n  return varName + '.append(' + value + ')\\n';\n};\n","Blockly.Blocks['logic_compare'] = {\n  /**\n   * Block for comparison operator.\n   * @this Blockly.Block\n   */\n  init: function() {\n    var rtlOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['>', 'LT'],\n      ['>=', 'LTE'],\n      ['<', 'GT'],\n      ['<=', 'GTE']\n    ];\n    var ltrOperators = [\n      ['==', 'EQ'],\n      ['!=', 'NEQ'],\n      ['<', 'LT'],\n      ['<=', 'LTE'],\n      ['>', 'GT'],\n      ['>=', 'GTE']\n    ];\n    var OPERATORS = this.RTL ? rtlOperators : ltrOperators;\n    this.setHelpUrl(Blockly.Msg.LOGIC_COMPARE_HELPURL);\n    this.setColour(Blockly.Blocks.logic.HUE);\n    this.setOutput(true, 'Boolean');\n    this.appendValueInput('A');\n    this.appendValueInput('B')\n        .appendField(new Blockly.FieldDropdown(OPERATORS), 'OP');\n    this.setInputsInline(true);\n    // Assign 'this' to a variable for use in the tooltip closure below.\n    var thisBlock = this;\n    this.setTooltip(function() {\n      var op = thisBlock.getFieldValue('OP');\n      var TOOLTIPS = {\n        'EQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ,\n        'NEQ': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ,\n        'LT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT,\n        'LTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE,\n        'GT': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT,\n        'GTE': Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE\n      };\n      return TOOLTIPS[op];\n    });\n    this.prevBlocks_ = [null, null];\n  },\n  /**\n   * Called whenever anything on the workspace changes.\n   * Prevent mismatched types from being compared.\n   * @param {!Blockly.Events.Abstract} e Change event.\n   * @this Blockly.Block\n   */\n  onchange: function(e) {\n    var blockA = this.getInputTargetBlock('A');\n    var blockB = this.getInputTargetBlock('B');\n    // Disconnect blocks that existed prior to this change if they don't match.\n    if (blockA && blockB &&\n        !blockA.outputConnection.checkType_(blockB.outputConnection)) {\n      // Mismatch between two inputs.  Disconnect previous and bump it away.\n      // Ensure that any disconnections are grouped with the causing event.\n      Blockly.Events.setGroup(e.group);\n      for (var i = 0; i < this.prevBlocks_.length; i++) {\n        var block = this.prevBlocks_[i];\n        if (block === blockA || block === blockB) {\n          block.unplug();\n          block.bumpNeighbours_();\n        }\n      }\n      Blockly.Events.setGroup(false);\n    }\n    this.prevBlocks_[0] = blockA;\n    this.prevBlocks_[1] = blockB;\n  }\n};\n\n","Blockly.Python['text_print_noend'] = function(block) {\n  // Print statement.\n  var msg = Blockly.Python.valueToCode(block, 'TEXT',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  return 'print(' + msg + ', end=\"\")\\n';\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.JavaScript.init = function(workspace) {\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.JavaScript.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.JavaScript.functionNames_ = Object.create(null);\n\n  if (!Blockly.JavaScript.variableDB_) {\n    Blockly.JavaScript.variableDB_ =\n        new Blockly.Names(Blockly.JavaScript.RESERVED_WORDS_);\n  } else {\n    Blockly.JavaScript.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped JavaScript string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @private\n */\nBlockly.JavaScript.quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n\n\nBlockly.JavaScript['controls_for'] = function(block) {\n  // For loop.\n  var variable0 = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'TO',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var increment = Blockly.JavaScript.valueToCode(block, 'BY',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\n  var code;\n  if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\n      Blockly.isNumber(increment)) {\n    // All arguments are simple numbers.\n    var up = parseFloat(argument0) <= parseFloat(argument1);\n    code = 'for (var ' + variable0 + ' = ' + argument0 + '; ' +\n        variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\n        variable0;\n    var step = Math.abs(parseFloat(increment));\n    if (step == 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    var startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\n      startVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_start', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    var endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\n      var endVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_end', Blockly.Variables.NAME_TYPE);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    var incVar = Blockly.JavaScript.variableDB_.getDistinctName(\n        variable0 + '_inc', Blockly.Variables.NAME_TYPE);\n    code += 'var ' + incVar + ' = ';\n    if (Blockly.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += Blockly.JavaScript.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' +\n        incVar + ' >= 0 ? ' +\n        variable0 + ' <= ' + endVar + ' : ' +\n        variable0 + ' >= ' + endVar + '; ' +\n        variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nBlockly.JavaScript['variables_set'] = function(block) {\n  // Variable setter.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  return 'var ' + varName + ' = ' + argument0 + ';\\n';\n};\n","/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.Python.init = function(workspace) {\n  /**\n   * Empty loops or conditionals are not allowed in Python.\n   */\n  Blockly.Python.PASS = this.INDENT + 'pass\\n';\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.Python.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.Python.functionNames_ = Object.create(null);\n\n  if (!Blockly.Python.variableDB_) {\n    Blockly.Python.variableDB_ =\n        new Blockly.Names(Blockly.Python.RESERVED_WORDS_);\n  } else {\n    Blockly.Python.variableDB_.reset();\n  }\n};\n\n/**\n * Encode a string as a properly escaped Python string, complete with quotes.\n * @param {string} string Text to encode.\n * @return {string} Python string.\n * @private\n */\nBlockly.Python.quote_ = function(string) {\n  // Can't use goog.string.quote since % must also be escaped.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\\%/g, '\\\\%')\n                 .replace(/\"/g, '\\\\\"');\n  return '\"' + string + '\"';\n};\n","Blockly.Python['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  if (block.getField('TIMES')) {\n    // Internal number.\n    var repeats = String(parseInt(block.getFieldValue('TIMES'), 10));\n  } else {\n    // External number.\n    var repeats = Blockly.Python.valueToCode(block, 'TIMES',\n        Blockly.Python.ORDER_NONE) || '0';\n  }\n  if (Blockly.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'int(' + repeats + ')';\n  }\n  var branch = Blockly.Python.statementToCode(block, 'DO');\n  branch = Blockly.Python.addLoopTrap(branch, block.id) ||\n      Blockly.Python.PASS;\n  var loopVar = Blockly.Python.variableDB_.getDistinctName(\n      'loop', Blockly.Variables.NAME_TYPE);\n  var code = 'for ' + loopVar + ' in range(' + repeats + '):\\n' + branch;\n  return code;\n};\n\nBlockly.Python['controls_repeat'] = Blockly.Python['controls_repeat_ext'];\n","Blockly.Python['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  // First, add a 'global' statement for every variable that is assigned.\n  // acbart: Actually, skip that, globals are bad news!\n  var globals = []; //Blockly.Variables.allVariables(block);\n  for (var i = globals.length - 1; i >= 0; i--) {\n    var varName = globals[i];\n    if (block.arguments_.indexOf(varName) == -1) {\n      globals[i] = Blockly.Python.variableDB_.getName(varName,\n          Blockly.Variables.NAME_TYPE);\n    } else {\n      // This variable is actually a parameter name.  Do not include it in\n      // the list of globals, thus allowing it be of local scope.\n      globals.splice(i, 1);\n    }\n  }\n  globals = globals.length ? '  global ' + globals.join(', ') + '\\n' : '';\n  // Get the function's name\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  // Get the stack of code\n  var branch = Blockly.Python.statementToCode(block, 'STACK');\n  // Handle prefixing\n  if (Blockly.Python.STATEMENT_PREFIX) {\n    branch = Blockly.Python.prefixLines(\n        Blockly.Python.STATEMENT_PREFIX.replace(/%1/g,\n        '\\'' + block.id + '\\''), Blockly.Python.INDENT) + branch;\n  }\n  // Handle infinite loop trapping\n  if (Blockly.Python.INFINITE_LOOP_TRAP) {\n    branch = Blockly.Python.INFINITE_LOOP_TRAP.replace(/%1/g,\n        '\"' + block.id + '\"') + branch;\n  }\n  // Handle return value\n  var returnValue = Blockly.Python.valueToCode(block, 'RETURN',\n      Blockly.Python.ORDER_NONE) || '';\n  if (returnValue) {\n    returnValue = '  return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = Blockly.Python.PASS;\n  }\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.variableDB_.getName(block.arguments_[x],\n        Blockly.Variables.NAME_TYPE);\n  }\n  var code = 'def ' + funcName + '(' + args.join(', ') + '):\\n' +\n      globals + branch + returnValue;\n  //acbart: I'm not sure why this is used here. It was fine before when\n  //        functions didn't have anything after them, but now it's deadly.\n  //code = Blockly.Python.scrub_(block, code);\n  //Blockly.Python.definitions_[funcName] = code;\n  return code;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nBlockly.Python['procedures_defnoreturn'] =\n    Blockly.Python['procedures_defreturn'];\n\nBlockly.Python['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.valueToCode(block, 'ARG' + x,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = funcName + '(' + args.join(', ') + ')';\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.Procedures.NAME_TYPE);\n  var args = [];\n  for (var x = 0; x < block.arguments_.length; x++) {\n    args[x] = Blockly.Python.valueToCode(block, 'ARG' + x,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = funcName + '(' + args.join(', ') + ')\\n';\n  return code;\n};\n\nBlockly.Python['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  var condition = Blockly.Python.valueToCode(block, 'CONDITION',\n      Blockly.Python.ORDER_NONE) || '___';\n  var code = 'if ' + condition + ':\\n';\n  if (block.hasReturnValue_) {\n    var value = Blockly.Python.valueToCode(block, 'VALUE',\n        Blockly.Python.ORDER_NONE) || '___';\n    code += '  return ' + value + '\\n';\n  } else {\n    code += '  return\\n';\n  }\n  return code;\n};\n\nBlockly.Python['procedures_return'] = function(block) {\n  // return value from a procedure.\n  var code = \"return\";\n  if (block.hasReturnValue_) {\n    var value = Blockly.Python.valueToCode(block, 'VALUE',\n        Blockly.Python.ORDER_NONE) || '___';\n    code += ' ' + value + '\\n';\n  } else {\n    code += '\\n';\n  }\n  return code;\n};\n"]}